{"version":3,"file":"reveal.esm.js","sources":["../js/utils/util.js","../js/utils/device.js","../node_modules/fitty/dist/fitty.module.js","../js/controllers/slidecontent.js","../js/controllers/slidenumber.js","../js/utils/color.js","../js/controllers/backgrounds.js","../js/utils/constants.js","../js/controllers/autoanimate.js","../js/controllers/fragments.js","../js/controllers/overview.js","../js/controllers/keyboard.js","../js/controllers/location.js","../js/controllers/controls.js","../js/controllers/progress.js","../js/controllers/pointer.js","../js/utils/loader.js","../js/controllers/plugins.js","../js/controllers/print.js","../js/controllers/touch.js","../js/controllers/focus.js","../js/controllers/notes.js","../js/components/playback.js","../js/config.js","../js/reveal.js","../js/index.js"],"sourcesContent":["/**\n * Extend object a with the properties of object b.\n * If there's a conflict, object b takes precedence.\n *\n * @param {object} a\n * @param {object} b\n */\nexport const extend = (a, b) => {\n  for (let i in b) {\n    a[i] = b[i]\n  }\n\n  return a\n}\n\n/**\n * querySelectorAll but returns an Array.\n */\nexport const queryAll = (el, selector) => {\n  return Array.from(el.querySelectorAll(selector))\n}\n\n/**\n * classList.toggle() with cross browser support\n */\nexport const toggleClass = (el, className, value) => {\n  if (value) {\n    el.classList.add(className)\n  } else {\n    el.classList.remove(className)\n  }\n}\n\n/**\n * Utility for deserializing a value.\n *\n * @param {*} value\n * @return {*}\n */\nexport const deserialize = (value) => {\n  if (typeof value === \"string\") {\n    if (value === \"null\") return null\n    else if (value === \"true\") return true\n    else if (value === \"false\") return false\n    else if (value.match(/^-?[\\d\\.]+$/))\n      return parseFloat(value)\n  }\n\n  return value\n}\n\n/**\n * Measures the distance in pixels between point a\n * and point b.\n *\n * @param {object} a point with x/y properties\n * @param {object} b point with x/y properties\n *\n * @return {number}\n */\nexport const distanceBetween = (a, b) => {\n  let dx = a.x - b.x,\n    dy = a.y - b.y\n\n  return Math.sqrt(dx * dx + dy * dy)\n}\n\n/**\n * Applies a CSS transform to the target element.\n *\n * @param {HTMLElement} element\n * @param {string} transform\n */\nexport const transformElement = (\n  element,\n  transform\n) => {\n  element.style.transform = transform\n}\n\n/**\n * Element.matches with IE support.\n *\n * @param {HTMLElement} target The element to match\n * @param {String} selector The CSS selector to match\n * the element against\n *\n * @return {Boolean}\n */\nexport const matches = (target, selector) => {\n  let matchesMethod =\n    target.matches ||\n    target.matchesSelector ||\n    target.msMatchesSelector\n\n  return !!(\n    matchesMethod &&\n    matchesMethod.call(target, selector)\n  )\n}\n\n/**\n * Find the closest parent that matches the given\n * selector.\n *\n * @param {HTMLElement} target The child element\n * @param {String} selector The CSS selector to match\n * the parents against\n *\n * @return {HTMLElement} The matched parent or null\n * if no matching parent was found\n */\nexport const closest = (target, selector) => {\n  // Native Element.closest\n  if (typeof target.closest === \"function\") {\n    return target.closest(selector)\n  }\n\n  // Polyfill\n  while (target) {\n    if (matches(target, selector)) {\n      return target\n    }\n\n    // Keep searching\n    target = target.parentNode\n  }\n\n  return null\n}\n\n/**\n * Handling the fullscreen functionality via the fullscreen API\n *\n * @see http://fullscreen.spec.whatwg.org/\n * @see https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode\n */\nexport const enterFullscreen = (element) => {\n  element = element || document.documentElement\n\n  // Check which implementation is available\n  let requestMethod =\n    element.requestFullscreen ||\n    element.webkitRequestFullscreen ||\n    element.webkitRequestFullScreen ||\n    element.mozRequestFullScreen ||\n    element.msRequestFullscreen\n\n  if (requestMethod) {\n    requestMethod.apply(element)\n  }\n}\n\n/**\n * Creates an HTML element and returns a reference to it.\n * If the element already exists the existing instance will\n * be returned.\n *\n * @param {HTMLElement} container\n * @param {string} tagname\n * @param {string} classname\n * @param {string} innerHTML\n *\n * @return {HTMLElement}\n */\nexport const createSingletonNode = (\n  container,\n  tagname,\n  classname,\n  innerHTML = \"\"\n) => {\n  // Find all nodes matching the description\n  let nodes = container.querySelectorAll(\n    \".\" + classname\n  )\n\n  // Check all matches to find one which is a direct child of\n  // the specified container\n  for (let i = 0; i < nodes.length; i++) {\n    let testNode = nodes[i]\n    if (testNode.parentNode === container) {\n      return testNode\n    }\n  }\n\n  // If no node was found, create it now\n  let node = document.createElement(tagname)\n  node.className = classname\n  node.innerHTML = innerHTML\n  container.appendChild(node)\n\n  return node\n}\n\n/**\n * Injects the given CSS styles into the DOM.\n *\n * @param {string} value\n */\nexport const createStyleSheet = (value) => {\n  let tag = document.createElement(\"style\")\n  tag.type = \"text/css\"\n\n  if (value && value.length > 0) {\n    if (tag.styleSheet) {\n      tag.styleSheet.cssText = value\n    } else {\n      tag.appendChild(document.createTextNode(value))\n    }\n  }\n\n  document.head.appendChild(tag)\n\n  return tag\n}\n\n/**\n * Returns a key:value hash of all query params.\n */\nexport const getQueryHash = () => {\n  let query = {}\n\n  location.search.replace(\n    /[A-Z0-9]+?=([\\w\\.%-]*)/gi,\n    (a) => {\n      query[a.split(\"=\").shift()] = a.split(\"=\").pop()\n    }\n  )\n\n  // Basic deserialization\n  for (let i in query) {\n    let value = query[i]\n\n    query[i] = deserialize(unescape(value))\n  }\n\n  // Do not accept new dependencies via query config to avoid\n  // the potential of malicious script injection\n  if (typeof query[\"dependencies\"] !== \"undefined\")\n    delete query[\"dependencies\"]\n\n  return query\n}\n\n/**\n * Returns the remaining height within the parent of the\n * target element.\n *\n * remaining height = [ configured parent height ] - [ current parent height ]\n *\n * @param {HTMLElement} element\n * @param {number} [height]\n */\nexport const getRemainingHeight = (\n  element,\n  height = 0\n) => {\n  if (element) {\n    let newHeight,\n      oldHeight = element.style.height\n\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = \"0px\"\n\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    element.parentNode.style.height = \"auto\"\n\n    newHeight =\n      height - element.parentNode.offsetHeight\n\n    // Restore the old height, just in case\n    element.style.height = oldHeight + \"px\"\n\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    element.parentNode.style.removeProperty(\"height\")\n\n    return newHeight\n  }\n\n  return height\n}\n\nconst fileExtensionToMimeMap = {\n  mp4: \"video/mp4\",\n  m4a: \"video/mp4\",\n  ogv: \"video/ogg\",\n  mpeg: \"video/mpeg\",\n  webm: \"video/webm\",\n}\n\n/**\n * Guess the MIME type for common file formats.\n */\nexport const getMimeTypeFromFile = (filename = \"\") => {\n  return fileExtensionToMimeMap[\n    filename.split(\".\").pop()\n  ]\n}\n","const UA = navigator.userAgent\nconst testElement = document.createElement(\"div\")\n\nexport const isMobile =\n  /(iphone|ipod|ipad|android)/gi.test(UA) ||\n  (navigator.platform === \"MacIntel\" &&\n    navigator.maxTouchPoints > 1) // iPadOS\n\nexport const isChrome =\n  /chrome/i.test(UA) && !/edge/i.test(UA)\n\nexport const isAndroid = /android/gi.test(UA)\n\n// Flags if we should use zoom instead of transform to scale\n// up slides. Zoom produces crisper results but has a lot of\n// xbrowser quirks so we only use it in whitelisted browsers.\nexport const supportsZoom =\n  \"zoom\" in testElement.style &&\n  !isMobile &&\n  (isChrome || /Version\\/[\\d\\.]+.*Safari/.test(UA))\n","/*\n * fitty v2.3.3 - Snugly resizes text to fit its parent container\n * Copyright (c) 2020 Rik Schennink <rik@pqina.nl> (https://pqina.nl/)\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = function (w) {\n\n  // no window, early exit\n  if (!w) return;\n\n  // node list to array helper method\n  var toArray = function toArray(nl) {\n    return [].slice.call(nl);\n  };\n\n  // states\n  var DrawState = {\n    IDLE: 0,\n    DIRTY_CONTENT: 1,\n    DIRTY_LAYOUT: 2,\n    DIRTY: 3\n  };\n\n  // all active fitty elements\n  var fitties = [];\n\n  // group all redraw calls till next frame, we cancel each frame request when a new one comes in. If no support for request animation frame, this is an empty function and supports for fitty stops.\n  var redrawFrame = null;\n  var requestRedraw = 'requestAnimationFrame' in w ? function () {\n    w.cancelAnimationFrame(redrawFrame);\n    redrawFrame = w.requestAnimationFrame(function () {\n      return redraw(fitties.filter(function (f) {\n        return f.dirty && f.active;\n      }));\n    });\n  } : function () {};\n\n  // sets all fitties to dirty so they are redrawn on the next redraw loop, then calls redraw\n  var redrawAll = function redrawAll(type) {\n    return function () {\n      fitties.forEach(function (f) {\n        return f.dirty = type;\n      });\n      requestRedraw();\n    };\n  };\n\n  // redraws fitties so they nicely fit their parent container\n  var redraw = function redraw(fitties) {\n\n    // getting info from the DOM at this point should not trigger a reflow, let's gather as much intel as possible before triggering a reflow\n\n    // check if styles of all fitties have been computed\n    fitties.filter(function (f) {\n      return !f.styleComputed;\n    }).forEach(function (f) {\n      f.styleComputed = computeStyle(f);\n    });\n\n    // restyle elements that require pre-styling, this triggers a reflow, please try to prevent by adding CSS rules (see docs)\n    fitties.filter(shouldPreStyle).forEach(applyStyle);\n\n    // we now determine which fitties should be redrawn\n    var fittiesToRedraw = fitties.filter(shouldRedraw);\n\n    // we calculate final styles for these fitties\n    fittiesToRedraw.forEach(calculateStyles);\n\n    // now we apply the calculated styles from our previous loop\n    fittiesToRedraw.forEach(function (f) {\n      applyStyle(f);\n      markAsClean(f);\n    });\n\n    // now we dispatch events for all restyled fitties\n    fittiesToRedraw.forEach(dispatchFitEvent);\n  };\n\n  var markAsClean = function markAsClean(f) {\n    return f.dirty = DrawState.IDLE;\n  };\n\n  var calculateStyles = function calculateStyles(f) {\n\n    // get available width from parent node\n    f.availableWidth = f.element.parentNode.clientWidth;\n\n    // the space our target element uses\n    f.currentWidth = f.element.scrollWidth;\n\n    // remember current font size\n    f.previousFontSize = f.currentFontSize;\n\n    // let's calculate the new font size\n    f.currentFontSize = Math.min(Math.max(f.minSize, f.availableWidth / f.currentWidth * f.previousFontSize), f.maxSize);\n\n    // if allows wrapping, only wrap when at minimum font size (otherwise would break container)\n    f.whiteSpace = f.multiLine && f.currentFontSize === f.minSize ? 'normal' : 'nowrap';\n  };\n\n  // should always redraw if is not dirty layout, if is dirty layout, only redraw if size has changed\n  var shouldRedraw = function shouldRedraw(f) {\n    return f.dirty !== DrawState.DIRTY_LAYOUT || f.dirty === DrawState.DIRTY_LAYOUT && f.element.parentNode.clientWidth !== f.availableWidth;\n  };\n\n  // every fitty element is tested for invalid styles\n  var computeStyle = function computeStyle(f) {\n\n    // get style properties\n    var style = w.getComputedStyle(f.element, null);\n\n    // get current font size in pixels (if we already calculated it, use the calculated version)\n    f.currentFontSize = parseFloat(style.getPropertyValue('font-size'));\n\n    // get display type and wrap mode\n    f.display = style.getPropertyValue('display');\n    f.whiteSpace = style.getPropertyValue('white-space');\n  };\n\n  // determines if this fitty requires initial styling, can be prevented by applying correct styles through CSS\n  var shouldPreStyle = function shouldPreStyle(f) {\n\n    var preStyle = false;\n\n    // if we already tested for prestyling we don't have to do it again\n    if (f.preStyleTestCompleted) return false;\n\n    // should have an inline style, if not, apply\n    if (!/inline-/.test(f.display)) {\n      preStyle = true;\n      f.display = 'inline-block';\n    }\n\n    // to correctly calculate dimensions the element should have whiteSpace set to nowrap\n    if (f.whiteSpace !== 'nowrap') {\n      preStyle = true;\n      f.whiteSpace = 'nowrap';\n    }\n\n    // we don't have to do this twice\n    f.preStyleTestCompleted = true;\n\n    return preStyle;\n  };\n\n  // apply styles to single fitty\n  var applyStyle = function applyStyle(f) {\n    f.element.style.whiteSpace = f.whiteSpace;\n    f.element.style.display = f.display;\n    f.element.style.fontSize = f.currentFontSize + 'px';\n  };\n\n  // dispatch a fit event on a fitty\n  var dispatchFitEvent = function dispatchFitEvent(f) {\n    f.element.dispatchEvent(new CustomEvent('fit', {\n      detail: {\n        oldValue: f.previousFontSize,\n        newValue: f.currentFontSize,\n        scaleFactor: f.currentFontSize / f.previousFontSize\n      }\n    }));\n  };\n\n  // fit method, marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty)\n  var fit = function fit(f, type) {\n    return function () {\n      f.dirty = type;\n      if (!f.active) return;\n      requestRedraw();\n    };\n  };\n\n  var init = function init(f) {\n\n    // save some of the original CSS properties before we change them\n    f.originalStyle = {\n      whiteSpace: f.element.style.whiteSpace,\n      display: f.element.style.display,\n      fontSize: f.element.style.fontSize\n    };\n\n    // should we observe DOM mutations\n    observeMutations(f);\n\n    // this is a new fitty so we need to validate if it's styles are in order\n    f.newbie = true;\n\n    // because it's a new fitty it should also be dirty, we want it to redraw on the first loop\n    f.dirty = true;\n\n    // we want to be able to update this fitty\n    fitties.push(f);\n  };\n\n  var destroy = function destroy(f) {\n    return function () {\n\n      // remove from fitties array\n      fitties = fitties.filter(function (_) {\n        return _.element !== f.element;\n      });\n\n      // stop observing DOM\n      if (f.observeMutations) f.observer.disconnect();\n\n      // reset the CSS properties we changes\n      f.element.style.whiteSpace = f.originalStyle.whiteSpace;\n      f.element.style.display = f.originalStyle.display;\n      f.element.style.fontSize = f.originalStyle.fontSize;\n    };\n  };\n\n  // add a new fitty, does not redraw said fitty\n  var subscribe = function subscribe(f) {\n    return function () {\n      if (f.active) return;\n      f.active = true;\n      requestRedraw();\n    };\n  };\n\n  // remove an existing fitty\n  var unsubscribe = function unsubscribe(f) {\n    return function () {\n      return f.active = false;\n    };\n  };\n\n  var observeMutations = function observeMutations(f) {\n\n    // no observing?\n    if (!f.observeMutations) return;\n\n    // start observing mutations\n    f.observer = new MutationObserver(fit(f, DrawState.DIRTY_CONTENT));\n\n    // start observing\n    f.observer.observe(f.element, f.observeMutations);\n  };\n\n  // default mutation observer settings\n  var mutationObserverDefaultSetting = {\n    subtree: true,\n    childList: true,\n    characterData: true\n  };\n\n  // default fitty options\n  var defaultOptions = {\n    minSize: 16,\n    maxSize: 512,\n    multiLine: true,\n    observeMutations: 'MutationObserver' in w ? mutationObserverDefaultSetting : false\n  };\n\n  // array of elements in, fitty instances out\n  function fittyCreate(elements, options) {\n\n    // set options object\n    var fittyOptions = _extends({}, defaultOptions, options);\n\n    // create fitties\n    var publicFitties = elements.map(function (element) {\n\n      // create fitty instance\n      var f = _extends({}, fittyOptions, {\n\n        // internal options for this fitty\n        element: element,\n        active: true\n      });\n\n      // initialise this fitty\n      init(f);\n\n      // expose API\n      return {\n        element: element,\n        fit: fit(f, DrawState.DIRTY),\n        unfreeze: subscribe(f),\n        freeze: unsubscribe(f),\n        unsubscribe: destroy(f)\n      };\n    });\n\n    // call redraw on newly initiated fitties\n    requestRedraw();\n\n    // expose fitties\n    return publicFitties;\n  }\n\n  // fitty creation function\n  function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    // if target is a string\n    return typeof target === 'string' ?\n\n    // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) :\n\n    // create single fitty\n    fittyCreate([target], options)[0];\n  }\n\n  // handles viewport changes, redraws all fitties, but only does so after a timeout\n  var resizeDebounce = null;\n  var onWindowResized = function onWindowResized() {\n    w.clearTimeout(resizeDebounce);\n    resizeDebounce = w.setTimeout(redrawAll(DrawState.DIRTY_LAYOUT), fitty.observeWindowDelay);\n  };\n\n  // define observe window property, so when we set it to true or false events are automatically added and removed\n  var events = ['resize', 'orientationchange'];\n  Object.defineProperty(fitty, 'observeWindow', {\n    set: function set(enabled) {\n      var method = (enabled ? 'add' : 'remove') + 'EventListener';\n      events.forEach(function (e) {\n        w[method](e, onWindowResized);\n      });\n    }\n  });\n\n  // fitty global properties (by setting observeWindow to true the events above get added)\n  fitty.observeWindow = true;\n  fitty.observeWindowDelay = 100;\n\n  // public fit all method, will force redraw no matter what\n  fitty.fitAll = redrawAll(DrawState.DIRTY);\n\n  // export our fitty function, we don't want to keep it to our selves\n  return fitty;\n}(typeof window === 'undefined' ? null : window);","import {\n  extend,\n  queryAll,\n  closest,\n  getMimeTypeFromFile,\n} from \"../utils/util.js\"\nimport { isMobile } from \"../utils/device.js\"\n\nimport fitty from \"fitty\"\n\n/**\n * Handles loading, unloading and playback of slide\n * content such as images, videos and iframes.\n */\nexport default class SlideContent {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    this.startEmbeddedIframe =\n      this.startEmbeddedIframe.bind(this)\n  }\n\n  /**\n   * Should the given element be preloaded?\n   * Decides based on local element attributes and global config.\n   *\n   * @param {HTMLElement} element\n   */\n  shouldPreload(element) {\n    // Prefer an explicit global preload setting\n    let preload =\n      this.Reveal.getConfig().preloadIframes\n\n    // If no global setting is available, fall back on the element's\n    // own preload setting\n    if (typeof preload !== \"boolean\") {\n      preload = element.hasAttribute(\"data-preload\")\n    }\n\n    return preload\n  }\n\n  /**\n   * Called when the given slide is within the configured view\n   * distance. Shows the slide element and loads any content\n   * that is set to load lazily (data-src).\n   *\n   * @param {HTMLElement} slide Slide to show\n   */\n  load(slide, options = {}) {\n    // Show the slide element\n    slide.style.display =\n      this.Reveal.getConfig().display\n\n    // Media elements with data-src attributes\n    queryAll(\n      slide,\n      \"img[data-src], video[data-src], audio[data-src], iframe[data-src]\"\n    ).forEach((element) => {\n      if (\n        element.tagName !== \"IFRAME\" ||\n        this.shouldPreload(element)\n      ) {\n        element.setAttribute(\n          \"src\",\n          element.getAttribute(\"data-src\")\n        )\n        element.setAttribute(\"data-lazy-loaded\", \"\")\n        element.removeAttribute(\"data-src\")\n      }\n    })\n\n    // Media elements with <source> children\n    queryAll(slide, \"video, audio\").forEach(\n      (media) => {\n        let sources = 0\n\n        queryAll(media, \"source[data-src]\").forEach(\n          (source) => {\n            source.setAttribute(\n              \"src\",\n              source.getAttribute(\"data-src\")\n            )\n            source.removeAttribute(\"data-src\")\n            source.setAttribute(\"data-lazy-loaded\", \"\")\n            sources += 1\n          }\n        )\n\n        // Enable inline video playback in mobile Safari\n        if (isMobile && media.tagName === \"VIDEO\") {\n          media.setAttribute(\"playsinline\", \"\")\n        }\n\n        // If we rewrote sources for this video/audio element, we need\n        // to manually tell it to load from its new origin\n        if (sources > 0) {\n          media.load()\n        }\n      }\n    )\n\n    // Show the corresponding background element\n    let background = slide.slideBackgroundElement\n    if (background) {\n      background.style.display = \"block\"\n\n      let backgroundContent =\n        slide.slideBackgroundContentElement\n      let backgroundIframe = slide.getAttribute(\n        \"data-background-iframe\"\n      )\n\n      // If the background contains media, load it\n      if (\n        background.hasAttribute(\"data-loaded\") ===\n        false\n      ) {\n        background.setAttribute(\"data-loaded\", \"true\")\n\n        let backgroundImage = slide.getAttribute(\n            \"data-background-image\"\n          ),\n          backgroundVideo = slide.getAttribute(\n            \"data-background-video\"\n          ),\n          backgroundVideoLoop = slide.hasAttribute(\n            \"data-background-video-loop\"\n          ),\n          backgroundVideoMuted = slide.hasAttribute(\n            \"data-background-video-muted\"\n          )\n\n        // Images\n        if (backgroundImage) {\n          // base64\n          if (/^data:/.test(backgroundImage.trim())) {\n            backgroundContent.style.backgroundImage = `url(${backgroundImage.trim()})`\n          }\n          // URL(s)\n          else {\n            backgroundContent.style.backgroundImage =\n              backgroundImage\n                .split(\",\")\n                .map((background) => {\n                  return `url(${encodeURI(\n                    background.trim()\n                  )})`\n                })\n                .join(\",\")\n          }\n        }\n        // Videos\n        else if (\n          backgroundVideo &&\n          !this.Reveal.isSpeakerNotes()\n        ) {\n          let video = document.createElement(\"video\")\n\n          if (backgroundVideoLoop) {\n            video.setAttribute(\"loop\", \"\")\n          }\n\n          if (backgroundVideoMuted) {\n            video.muted = true\n          }\n\n          // Enable inline playback in mobile Safari\n          //\n          // Mute is required for video to play when using\n          // swipe gestures to navigate since they don't\n          // count as direct user actions :'(\n          if (isMobile) {\n            video.muted = true\n            video.setAttribute(\"playsinline\", \"\")\n          }\n\n          // Support comma separated lists of video sources\n          backgroundVideo\n            .split(\",\")\n            .forEach((source) => {\n              let type = getMimeTypeFromFile(source)\n              if (type) {\n                video.innerHTML += `<source src=\"${source}\" type=\"${type}\">`\n              } else {\n                video.innerHTML += `<source src=\"${source}\">`\n              }\n            })\n\n          backgroundContent.appendChild(video)\n        }\n        // Iframes\n        else if (\n          backgroundIframe &&\n          options.excludeIframes !== true\n        ) {\n          let iframe = document.createElement(\"iframe\")\n          iframe.setAttribute(\"allowfullscreen\", \"\")\n          iframe.setAttribute(\"mozallowfullscreen\", \"\")\n          iframe.setAttribute(\n            \"webkitallowfullscreen\",\n            \"\"\n          )\n          iframe.setAttribute(\"allow\", \"autoplay\")\n\n          iframe.setAttribute(\n            \"data-src\",\n            backgroundIframe\n          )\n\n          iframe.style.width = \"100%\"\n          iframe.style.height = \"100%\"\n          iframe.style.maxHeight = \"100%\"\n          iframe.style.maxWidth = \"100%\"\n\n          backgroundContent.appendChild(iframe)\n        }\n      }\n\n      // Start loading preloadable iframes\n      let backgroundIframeElement =\n        backgroundContent.querySelector(\n          \"iframe[data-src]\"\n        )\n      if (backgroundIframeElement) {\n        // Check if this iframe is eligible to be preloaded\n        if (\n          this.shouldPreload(background) &&\n          !/autoplay=(1|true|yes)/gi.test(\n            backgroundIframe\n          )\n        ) {\n          if (\n            backgroundIframeElement.getAttribute(\n              \"src\"\n            ) !== backgroundIframe\n          ) {\n            backgroundIframeElement.setAttribute(\n              \"src\",\n              backgroundIframe\n            )\n          }\n        }\n      }\n    }\n\n    this.layout(slide)\n  }\n\n  /**\n   * Applies JS-dependent layout helpers for the given slide,\n   * if there are any.\n   */\n  layout(slide) {\n    // Autosize text with the r-fit-text class based on the\n    // size of its container. This needs to happen after the\n    // slide is visible in order to measure the text.\n    Array.from(\n      slide.querySelectorAll(\".r-fit-text\")\n    ).forEach((element) => {\n      fitty(element, {\n        minSize: 24,\n        maxSize: this.Reveal.getConfig().height * 0.8,\n        observeMutations: false,\n        observeWindow: false,\n      })\n    })\n  }\n\n  /**\n   * Unloads and hides the given slide. This is called when the\n   * slide is moved outside of the configured view distance.\n   *\n   * @param {HTMLElement} slide\n   */\n  unload(slide) {\n    // Hide the slide element\n    slide.style.display = \"none\"\n\n    // Hide the corresponding background element\n    let background =\n      this.Reveal.getSlideBackground(slide)\n    if (background) {\n      background.style.display = \"none\"\n\n      // Unload any background iframes\n      queryAll(background, \"iframe[src]\").forEach(\n        (element) => {\n          element.removeAttribute(\"src\")\n        }\n      )\n    }\n\n    // Reset lazy-loaded media elements with src attributes\n    queryAll(\n      slide,\n      \"video[data-lazy-loaded][src], audio[data-lazy-loaded][src], iframe[data-lazy-loaded][src]\"\n    ).forEach((element) => {\n      element.setAttribute(\n        \"data-src\",\n        element.getAttribute(\"src\")\n      )\n      element.removeAttribute(\"src\")\n    })\n\n    // Reset lazy-loaded media elements with <source> children\n    queryAll(\n      slide,\n      \"video[data-lazy-loaded] source[src], audio source[src]\"\n    ).forEach((source) => {\n      source.setAttribute(\n        \"data-src\",\n        source.getAttribute(\"src\")\n      )\n      source.removeAttribute(\"src\")\n    })\n  }\n\n  /**\n   * Enforces origin-specific format rules for embedded media.\n   */\n  formatEmbeddedContent() {\n    let _appendParamToIframeSource = (\n      sourceAttribute,\n      sourceURL,\n      param\n    ) => {\n      queryAll(\n        this.Reveal.getSlidesElement(),\n        \"iframe[\" +\n          sourceAttribute +\n          '*=\"' +\n          sourceURL +\n          '\"]'\n      ).forEach((el) => {\n        let src = el.getAttribute(sourceAttribute)\n        if (src && src.indexOf(param) === -1) {\n          el.setAttribute(\n            sourceAttribute,\n            src + (!/\\?/.test(src) ? \"?\" : \"&\") + param\n          )\n        }\n      })\n    }\n\n    // YouTube frames must include \"?enablejsapi=1\"\n    _appendParamToIframeSource(\n      \"src\",\n      \"youtube.com/embed/\",\n      \"enablejsapi=1\"\n    )\n    _appendParamToIframeSource(\n      \"data-src\",\n      \"youtube.com/embed/\",\n      \"enablejsapi=1\"\n    )\n\n    // Vimeo frames must include \"?api=1\"\n    _appendParamToIframeSource(\n      \"src\",\n      \"player.vimeo.com/\",\n      \"api=1\"\n    )\n    _appendParamToIframeSource(\n      \"data-src\",\n      \"player.vimeo.com/\",\n      \"api=1\"\n    )\n  }\n\n  /**\n   * Start playback of any embedded content inside of\n   * the given element.\n   *\n   * @param {HTMLElement} element\n   */\n  startEmbeddedContent(element) {\n    if (element && !this.Reveal.isSpeakerNotes()) {\n      // Restart GIFs\n      queryAll(element, 'img[src$=\".gif\"]').forEach(\n        (el) => {\n          // Setting the same unchanged source like this was confirmed\n          // to work in Chrome, FF & Safari\n          el.setAttribute(\n            \"src\",\n            el.getAttribute(\"src\")\n          )\n        }\n      )\n\n      // HTML5 media elements\n      queryAll(element, \"video, audio\").forEach(\n        (el) => {\n          if (\n            closest(el, \".fragment\") &&\n            !closest(el, \".fragment.visible\")\n          ) {\n            return\n          }\n\n          // Prefer an explicit global autoplay setting\n          let autoplay =\n            this.Reveal.getConfig().autoPlayMedia\n\n          // If no global setting is available, fall back on the element's\n          // own autoplay setting\n          if (typeof autoplay !== \"boolean\") {\n            autoplay =\n              el.hasAttribute(\"data-autoplay\") ||\n              !!closest(el, \".slide-background\")\n          }\n\n          if (\n            autoplay &&\n            typeof el.play === \"function\"\n          ) {\n            // If the media is ready, start playback\n            if (el.readyState > 1) {\n              this.startEmbeddedMedia({ target: el })\n            }\n            // Mobile devices never fire a loaded event so instead\n            // of waiting, we initiate playback\n            else if (isMobile) {\n              let promise = el.play()\n\n              // If autoplay does not work, ensure that the controls are visible so\n              // that the viewer can start the media on their own\n              if (\n                promise &&\n                typeof promise.catch === \"function\" &&\n                el.controls === false\n              ) {\n                promise.catch(() => {\n                  el.controls = true\n\n                  // Once the video does start playing, hide the controls again\n                  el.addEventListener(\"play\", () => {\n                    el.controls = false\n                  })\n                })\n              }\n            }\n            // If the media isn't loaded, wait before playing\n            else {\n              el.removeEventListener(\n                \"loadeddata\",\n                this.startEmbeddedMedia\n              ) // remove first to avoid dupes\n              el.addEventListener(\n                \"loadeddata\",\n                this.startEmbeddedMedia\n              )\n            }\n          }\n        }\n      )\n\n      // Normal iframes\n      queryAll(element, \"iframe[src]\").forEach(\n        (el) => {\n          if (\n            closest(el, \".fragment\") &&\n            !closest(el, \".fragment.visible\")\n          ) {\n            return\n          }\n\n          this.startEmbeddedIframe({ target: el })\n        }\n      )\n\n      // Lazy loading iframes\n      queryAll(element, \"iframe[data-src]\").forEach(\n        (el) => {\n          if (\n            closest(el, \".fragment\") &&\n            !closest(el, \".fragment.visible\")\n          ) {\n            return\n          }\n\n          if (\n            el.getAttribute(\"src\") !==\n            el.getAttribute(\"data-src\")\n          ) {\n            el.removeEventListener(\n              \"load\",\n              this.startEmbeddedIframe\n            ) // remove first to avoid dupes\n            el.addEventListener(\n              \"load\",\n              this.startEmbeddedIframe\n            )\n            el.setAttribute(\n              \"src\",\n              el.getAttribute(\"data-src\")\n            )\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * Starts playing an embedded video/audio element after\n   * it has finished loading.\n   *\n   * @param {object} event\n   */\n  startEmbeddedMedia(event) {\n    let isAttachedToDOM = !!closest(\n        event.target,\n        \"html\"\n      ),\n      isVisible = !!closest(event.target, \".present\")\n\n    if (isAttachedToDOM && isVisible) {\n      event.target.currentTime = 0\n      event.target.play()\n    }\n\n    event.target.removeEventListener(\n      \"loadeddata\",\n      this.startEmbeddedMedia\n    )\n  }\n\n  /**\n   * \"Starts\" the content of an embedded iframe using the\n   * postMessage API.\n   *\n   * @param {object} event\n   */\n  startEmbeddedIframe(event) {\n    let iframe = event.target\n\n    if (iframe && iframe.contentWindow) {\n      let isAttachedToDOM = !!closest(\n          event.target,\n          \"html\"\n        ),\n        isVisible = !!closest(event.target, \".present\")\n\n      if (isAttachedToDOM && isVisible) {\n        // Prefer an explicit global autoplay setting\n        let autoplay =\n          this.Reveal.getConfig().autoPlayMedia\n\n        // If no global setting is available, fall back on the element's\n        // own autoplay setting\n        if (typeof autoplay !== \"boolean\") {\n          autoplay =\n            iframe.hasAttribute(\"data-autoplay\") ||\n            !!closest(iframe, \".slide-background\")\n        }\n\n        // YouTube postMessage API\n        if (\n          /youtube\\.com\\/embed\\//.test(\n            iframe.getAttribute(\"src\")\n          ) &&\n          autoplay\n        ) {\n          iframe.contentWindow.postMessage(\n            '{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}',\n            \"*\"\n          )\n        }\n        // Vimeo postMessage API\n        else if (\n          /player\\.vimeo\\.com\\//.test(\n            iframe.getAttribute(\"src\")\n          ) &&\n          autoplay\n        ) {\n          iframe.contentWindow.postMessage(\n            '{\"method\":\"play\"}',\n            \"*\"\n          )\n        }\n        // Generic postMessage API\n        else {\n          iframe.contentWindow.postMessage(\n            \"slide:start\",\n            \"*\"\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * Stop playback of any embedded content inside of\n   * the targeted slide.\n   *\n   * @param {HTMLElement} element\n   */\n  stopEmbeddedContent(element, options = {}) {\n    options = extend(\n      {\n        // Defaults\n        unloadIframes: true,\n      },\n      options\n    )\n\n    if (element && element.parentNode) {\n      // HTML5 media elements\n      queryAll(element, \"video, audio\").forEach(\n        (el) => {\n          if (\n            !el.hasAttribute(\"data-ignore\") &&\n            typeof el.pause === \"function\"\n          ) {\n            el.setAttribute(\n              \"data-paused-by-reveal\",\n              \"\"\n            )\n            el.pause()\n          }\n        }\n      )\n\n      // Generic postMessage API for non-lazy loaded iframes\n      queryAll(element, \"iframe\").forEach((el) => {\n        if (el.contentWindow)\n          el.contentWindow.postMessage(\n            \"slide:stop\",\n            \"*\"\n          )\n        el.removeEventListener(\n          \"load\",\n          this.startEmbeddedIframe\n        )\n      })\n\n      // YouTube postMessage API\n      queryAll(\n        element,\n        'iframe[src*=\"youtube.com/embed/\"]'\n      ).forEach((el) => {\n        if (\n          !el.hasAttribute(\"data-ignore\") &&\n          el.contentWindow &&\n          typeof el.contentWindow.postMessage ===\n            \"function\"\n        ) {\n          el.contentWindow.postMessage(\n            '{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}',\n            \"*\"\n          )\n        }\n      })\n\n      // Vimeo postMessage API\n      queryAll(\n        element,\n        'iframe[src*=\"player.vimeo.com/\"]'\n      ).forEach((el) => {\n        if (\n          !el.hasAttribute(\"data-ignore\") &&\n          el.contentWindow &&\n          typeof el.contentWindow.postMessage ===\n            \"function\"\n        ) {\n          el.contentWindow.postMessage(\n            '{\"method\":\"pause\"}',\n            \"*\"\n          )\n        }\n      })\n\n      if (options.unloadIframes === true) {\n        // Unload lazy-loaded iframes\n        queryAll(element, \"iframe[data-src]\").forEach(\n          (el) => {\n            // Only removing the src doesn't actually unload the frame\n            // in all browsers (Firefox) so we set it to blank first\n            el.setAttribute(\"src\", \"about:blank\")\n            el.removeAttribute(\"src\")\n          }\n        )\n      }\n    }\n  }\n}\n","/**\n * Handles the display of reveal.js' optional slide number.\n */\nexport default class SlideNumber {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  render() {\n    this.element = document.createElement(\"div\")\n    this.element.className = \"slide-number\"\n    this.Reveal.getRevealElement().appendChild(\n      this.element\n    )\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    let slideNumberDisplay = \"none\"\n    if (\n      config.slideNumber &&\n      !this.Reveal.isPrintingPDF()\n    ) {\n      if (config.showSlideNumber === \"all\") {\n        slideNumberDisplay = \"block\"\n      } else if (\n        config.showSlideNumber === \"speaker\" &&\n        this.Reveal.isSpeakerNotes()\n      ) {\n        slideNumberDisplay = \"block\"\n      }\n    }\n\n    this.element.style.display = slideNumberDisplay\n  }\n\n  /**\n   * Updates the slide number to match the current slide.\n   */\n  update() {\n    // Update slide number if enabled\n    if (\n      this.Reveal.getConfig().slideNumber &&\n      this.element\n    ) {\n      this.element.innerHTML = this.getSlideNumber()\n    }\n  }\n\n  /**\n   * Returns the HTML string corresponding to the current slide\n   * number, including formatting.\n   */\n  getSlideNumber(\n    slide = this.Reveal.getCurrentSlide()\n  ) {\n    let config = this.Reveal.getConfig()\n    let value\n    let format = \"h.v\"\n\n    if (typeof config.slideNumber === \"function\") {\n      value = config.slideNumber(slide)\n    } else {\n      // Check if a custom number format is available\n      if (typeof config.slideNumber === \"string\") {\n        format = config.slideNumber\n      }\n\n      // If there are ONLY vertical slides in this deck, always use\n      // a flattened slide number\n      if (\n        !/c/.test(format) &&\n        this.Reveal.getHorizontalSlides().length === 1\n      ) {\n        format = \"c\"\n      }\n\n      // Offset the current slide number by 1 to make it 1-indexed\n      let horizontalOffset =\n        slide &&\n        slide.dataset.visibility === \"uncounted\"\n          ? 0\n          : 1\n\n      value = []\n      switch (format) {\n        case \"c\":\n          value.push(\n            this.Reveal.getSlidePastCount(slide) +\n              horizontalOffset\n          )\n          break\n        case \"c/t\":\n          value.push(\n            this.Reveal.getSlidePastCount(slide) +\n              horizontalOffset,\n            \"/\",\n            this.Reveal.getTotalSlides()\n          )\n          break\n        default:\n          let indices = this.Reveal.getIndices(slide)\n          value.push(indices.h + horizontalOffset)\n          let sep = format === \"h/v\" ? \"/\" : \".\"\n          if (this.Reveal.isVerticalSlide(slide))\n            value.push(sep, indices.v + 1)\n      }\n    }\n\n    let url = \"#\" + this.Reveal.location.getHash(slide)\n    return this.formatNumber(\n      value[0],\n      value[1],\n      value[2],\n      url\n    )\n  }\n\n  /**\n   * Applies HTML formatting to a slide number before it's\n   * written to the DOM.\n   *\n   * @param {number} a Current slide\n   * @param {string} delimiter Character to separate slide numbers\n   * @param {(number|*)} b Total slides\n   * @param {HTMLElement} [url='#'+locationHash()] The url to link to\n   * @return {string} HTML string fragment\n   */\n  formatNumber(\n    a,\n    delimiter,\n    b,\n    url = \"#\" + this.Reveal.location.getHash()\n  ) {\n    if (typeof b === \"number\" && !isNaN(b)) {\n      return `<a href=\"${url}\">\n\t\t\t\t\t<span class=\"slide-number-a\">${a}</span>\n\t\t\t\t\t<span class=\"slide-number-delimiter\">${delimiter}</span>\n\t\t\t\t\t<span class=\"slide-number-b\">${b}</span>\n\t\t\t\t\t</a>`\n    } else {\n      return `<a href=\"${url}\">\n\t\t\t\t\t<span class=\"slide-number-a\">${a}</span>\n\t\t\t\t\t</a>`\n    }\n  }\n}\n","/**\n * Converts various color input formats to an {r:0,g:0,b:0} object.\n *\n * @param {string} color The string representation of a color\n * @example\n * colorToRgb('#000');\n * @example\n * colorToRgb('#000000');\n * @example\n * colorToRgb('rgb(0,0,0)');\n * @example\n * colorToRgb('rgba(0,0,0)');\n *\n * @return {{r: number, g: number, b: number, [a]: number}|null}\n */\nexport const colorToRgb = (color) => {\n  let hex3 = color.match(/^#([0-9a-f]{3})$/i)\n  if (hex3 && hex3[1]) {\n    hex3 = hex3[1]\n    return {\n      r: parseInt(hex3.charAt(0), 16) * 0x11,\n      g: parseInt(hex3.charAt(1), 16) * 0x11,\n      b: parseInt(hex3.charAt(2), 16) * 0x11,\n    }\n  }\n\n  let hex6 = color.match(/^#([0-9a-f]{6})$/i)\n  if (hex6 && hex6[1]) {\n    hex6 = hex6[1]\n    return {\n      r: parseInt(hex6.substr(0, 2), 16),\n      g: parseInt(hex6.substr(2, 2), 16),\n      b: parseInt(hex6.substr(4, 2), 16),\n    }\n  }\n\n  let rgb = color.match(\n    /^rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/i\n  )\n  if (rgb) {\n    return {\n      r: parseInt(rgb[1], 10),\n      g: parseInt(rgb[2], 10),\n      b: parseInt(rgb[3], 10),\n    }\n  }\n\n  let rgba = color.match(\n    /^rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\,\\s*([\\d]+|[\\d]*.[\\d]+)\\s*\\)$/i\n  )\n  if (rgba) {\n    return {\n      r: parseInt(rgba[1], 10),\n      g: parseInt(rgba[2], 10),\n      b: parseInt(rgba[3], 10),\n      a: parseFloat(rgba[4]),\n    }\n  }\n\n  return null\n}\n\n/**\n * Calculates brightness on a scale of 0-255.\n *\n * @param {string} color See colorToRgb for supported formats.\n * @see {@link colorToRgb}\n */\nexport const colorBrightness = (color) => {\n  if (typeof color === \"string\")\n    color = colorToRgb(color)\n\n  if (color) {\n    return (\n      (color.r * 299 + color.g * 587 + color.b * 114) /\n      1000\n    )\n  }\n\n  return null\n}\n","import { queryAll } from \"../utils/util.js\"\nimport {\n  colorToRgb,\n  colorBrightness,\n} from \"../utils/color.js\"\n\n/**\n * Creates and updates slide backgrounds.\n */\nexport default class Backgrounds {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  render() {\n    this.element = document.createElement(\"div\")\n    this.element.className = \"backgrounds\"\n    this.Reveal.getRevealElement().appendChild(\n      this.element\n    )\n  }\n\n  /**\n   * Creates the slide background elements and appends them\n   * to the background container. One element is created per\n   * slide no matter if the given slide has visible background.\n   */\n  create() {\n    // Clear prior backgrounds\n    this.element.innerHTML = \"\"\n    this.element.classList.add(\"no-transition\")\n\n    // Iterate over all horizontal slides\n    this.Reveal.getHorizontalSlides().forEach(\n      (slideh) => {\n        let backgroundStack = this.createBackground(\n          slideh,\n          this.element\n        )\n\n        // Iterate over all vertical slides\n        queryAll(slideh, \"section\").forEach(\n          (slidev) => {\n            this.createBackground(\n              slidev,\n              backgroundStack\n            )\n\n            backgroundStack.classList.add(\"stack\")\n          }\n        )\n      }\n    )\n\n    // Add parallax background if specified\n    if (\n      this.Reveal.getConfig().parallaxBackgroundImage\n    ) {\n      this.element.style.backgroundImage =\n        'url(\"' +\n        this.Reveal.getConfig()\n          .parallaxBackgroundImage +\n        '\")'\n      this.element.style.backgroundSize =\n        this.Reveal.getConfig().parallaxBackgroundSize\n      this.element.style.backgroundRepeat =\n        this.Reveal.getConfig().parallaxBackgroundRepeat\n      this.element.style.backgroundPosition =\n        this.Reveal.getConfig().parallaxBackgroundPosition\n\n      // Make sure the below properties are set on the element - these properties are\n      // needed for proper transitions to be set on the element via CSS. To remove\n      // annoying background slide-in effect when the presentation starts, apply\n      // these properties after short time delay\n      setTimeout(() => {\n        this.Reveal.getRevealElement().classList.add(\n          \"has-parallax-background\"\n        )\n      }, 1)\n    } else {\n      this.element.style.backgroundImage = \"\"\n      this.Reveal.getRevealElement().classList.remove(\n        \"has-parallax-background\"\n      )\n    }\n  }\n\n  /**\n   * Creates a background for the given slide.\n   *\n   * @param {HTMLElement} slide\n   * @param {HTMLElement} container The element that the background\n   * should be appended to\n   * @return {HTMLElement} New background div\n   */\n  createBackground(slide, container) {\n    // Main slide background element\n    let element = document.createElement(\"div\")\n    element.className =\n      \"slide-background \" +\n      slide.className.replace(\n        /present|past|future/,\n        \"\"\n      )\n\n    // Inner background element that wraps images/videos/iframes\n    let contentElement = document.createElement(\"div\")\n    contentElement.className =\n      \"slide-background-content\"\n\n    element.appendChild(contentElement)\n    container.appendChild(element)\n\n    slide.slideBackgroundElement = element\n    slide.slideBackgroundContentElement =\n      contentElement\n\n    // Syncs the background to reflect all current background settings\n    this.sync(slide)\n\n    return element\n  }\n\n  /**\n   * Renders all of the visual properties of a slide background\n   * based on the various background attributes.\n   *\n   * @param {HTMLElement} slide\n   */\n  sync(slide) {\n    const element = slide.slideBackgroundElement,\n      contentElement =\n        slide.slideBackgroundContentElement\n\n    const data = {\n      background: slide.getAttribute(\n        \"data-background\"\n      ),\n      backgroundSize: slide.getAttribute(\n        \"data-background-size\"\n      ),\n      backgroundImage: slide.getAttribute(\n        \"data-background-image\"\n      ),\n      backgroundVideo: slide.getAttribute(\n        \"data-background-video\"\n      ),\n      backgroundIframe: slide.getAttribute(\n        \"data-background-iframe\"\n      ),\n      backgroundColor: slide.getAttribute(\n        \"data-background-color\"\n      ),\n      backgroundRepeat: slide.getAttribute(\n        \"data-background-repeat\"\n      ),\n      backgroundPosition: slide.getAttribute(\n        \"data-background-position\"\n      ),\n      backgroundTransition: slide.getAttribute(\n        \"data-background-transition\"\n      ),\n      backgroundOpacity: slide.getAttribute(\n        \"data-background-opacity\"\n      ),\n    }\n\n    const dataPreload = slide.hasAttribute(\n      \"data-preload\"\n    )\n\n    // Reset the prior background state in case this is not the\n    // initial sync\n    slide.classList.remove(\"has-dark-background\")\n    slide.classList.remove(\"has-light-background\")\n\n    element.removeAttribute(\"data-loaded\")\n    element.removeAttribute(\"data-background-hash\")\n    element.removeAttribute(\"data-background-size\")\n    element.removeAttribute(\n      \"data-background-transition\"\n    )\n    element.style.backgroundColor = \"\"\n\n    contentElement.style.backgroundSize = \"\"\n    contentElement.style.backgroundRepeat = \"\"\n    contentElement.style.backgroundPosition = \"\"\n    contentElement.style.backgroundImage = \"\"\n    contentElement.style.opacity = \"\"\n    contentElement.innerHTML = \"\"\n\n    if (data.background) {\n      // Auto-wrap image urls in url(...)\n      if (\n        /^(http|file|\\/\\/)/gi.test(data.background) ||\n        /\\.(svg|png|jpg|jpeg|gif|bmp)([?#\\s]|$)/gi.test(\n          data.background\n        )\n      ) {\n        slide.setAttribute(\n          \"data-background-image\",\n          data.background\n        )\n      } else {\n        element.style.background = data.background\n      }\n    }\n\n    // Create a hash for this combination of background settings.\n    // This is used to determine when two slide backgrounds are\n    // the same.\n    if (\n      data.background ||\n      data.backgroundColor ||\n      data.backgroundImage ||\n      data.backgroundVideo ||\n      data.backgroundIframe\n    ) {\n      element.setAttribute(\n        \"data-background-hash\",\n        data.background +\n          data.backgroundSize +\n          data.backgroundImage +\n          data.backgroundVideo +\n          data.backgroundIframe +\n          data.backgroundColor +\n          data.backgroundRepeat +\n          data.backgroundPosition +\n          data.backgroundTransition +\n          data.backgroundOpacity\n      )\n    }\n\n    // Additional and optional background properties\n    if (data.backgroundSize)\n      element.setAttribute(\n        \"data-background-size\",\n        data.backgroundSize\n      )\n    if (data.backgroundColor)\n      element.style.backgroundColor =\n        data.backgroundColor\n    if (data.backgroundTransition)\n      element.setAttribute(\n        \"data-background-transition\",\n        data.backgroundTransition\n      )\n\n    if (dataPreload)\n      element.setAttribute(\"data-preload\", \"\")\n\n    // Background image options are set on the content wrapper\n    if (data.backgroundSize)\n      contentElement.style.backgroundSize =\n        data.backgroundSize\n    if (data.backgroundRepeat)\n      contentElement.style.backgroundRepeat =\n        data.backgroundRepeat\n    if (data.backgroundPosition)\n      contentElement.style.backgroundPosition =\n        data.backgroundPosition\n    if (data.backgroundOpacity)\n      contentElement.style.opacity =\n        data.backgroundOpacity\n\n    // If this slide has a background color, we add a class that\n    // signals if it is light or dark. If the slide has no background\n    // color, no class will be added\n    let contrastColor = data.backgroundColor\n\n    // If no bg color was found, or it cannot be converted by colorToRgb, check the computed background\n    if (!contrastColor || !colorToRgb(contrastColor)) {\n      let computedBackgroundStyle =\n        window.getComputedStyle(element)\n      if (\n        computedBackgroundStyle &&\n        computedBackgroundStyle.backgroundColor\n      ) {\n        contrastColor =\n          computedBackgroundStyle.backgroundColor\n      }\n    }\n\n    if (contrastColor) {\n      const rgb = colorToRgb(contrastColor)\n\n      // Ignore fully transparent backgrounds. Some browsers return\n      // rgba(0,0,0,0) when reading the computed background color of\n      // an element with no background\n      if (rgb && rgb.a !== 0) {\n        if (colorBrightness(contrastColor) < 128) {\n          slide.classList.add(\"has-dark-background\")\n        } else {\n          slide.classList.add(\"has-light-background\")\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the background elements to reflect the current\n   * slide.\n   *\n   * @param {boolean} includeAll If true, the backgrounds of\n   * all vertical slides (not just the present) will be updated.\n   */\n  update(includeAll = false) {\n    let currentSlide = this.Reveal.getCurrentSlide()\n    let indices = this.Reveal.getIndices()\n\n    let currentBackground = null\n\n    // Reverse past/future classes when in RTL mode\n    let horizontalPast = this.Reveal.getConfig().rtl\n        ? \"future\"\n        : \"past\",\n      horizontalFuture = this.Reveal.getConfig().rtl\n        ? \"past\"\n        : \"future\"\n\n    // Update the classes of all backgrounds to match the\n    // states of their slides (past/present/future)\n    Array.from(this.element.childNodes).forEach(\n      (backgroundh, h) => {\n        backgroundh.classList.remove(\n          \"past\",\n          \"present\",\n          \"future\"\n        )\n\n        if (h < indices.h) {\n          backgroundh.classList.add(horizontalPast)\n        } else if (h > indices.h) {\n          backgroundh.classList.add(horizontalFuture)\n        } else {\n          backgroundh.classList.add(\"present\")\n\n          // Store a reference to the current background element\n          currentBackground = backgroundh\n        }\n\n        if (includeAll || h === indices.h) {\n          queryAll(\n            backgroundh,\n            \".slide-background\"\n          ).forEach((backgroundv, v) => {\n            backgroundv.classList.remove(\n              \"past\",\n              \"present\",\n              \"future\"\n            )\n\n            if (v < indices.v) {\n              backgroundv.classList.add(\"past\")\n            } else if (v > indices.v) {\n              backgroundv.classList.add(\"future\")\n            } else {\n              backgroundv.classList.add(\"present\")\n\n              // Only if this is the present horizontal and vertical slide\n              if (h === indices.h)\n                currentBackground = backgroundv\n            }\n          })\n        }\n      }\n    )\n\n    // Stop content inside of previous backgrounds\n    if (this.previousBackground) {\n      this.Reveal.slideContent.stopEmbeddedContent(\n        this.previousBackground,\n        {\n          unloadIframes:\n            !this.Reveal.slideContent.shouldPreload(\n              this.previousBackground\n            ),\n        }\n      )\n    }\n\n    // Start content in the current background\n    if (currentBackground) {\n      this.Reveal.slideContent.startEmbeddedContent(\n        currentBackground\n      )\n\n      let currentBackgroundContent =\n        currentBackground.querySelector(\n          \".slide-background-content\"\n        )\n      if (currentBackgroundContent) {\n        let backgroundImageURL =\n          currentBackgroundContent.style\n            .backgroundImage || \"\"\n\n        // Restart GIFs (doesn't work in Firefox)\n        if (/\\.gif/i.test(backgroundImageURL)) {\n          currentBackgroundContent.style.backgroundImage =\n            \"\"\n          window.getComputedStyle(\n            currentBackgroundContent\n          ).opacity\n          currentBackgroundContent.style.backgroundImage =\n            backgroundImageURL\n        }\n      }\n\n      // Don't transition between identical backgrounds. This\n      // prevents unwanted flicker.\n      let previousBackgroundHash = this\n        .previousBackground\n        ? this.previousBackground.getAttribute(\n            \"data-background-hash\"\n          )\n        : null\n      let currentBackgroundHash =\n        currentBackground.getAttribute(\n          \"data-background-hash\"\n        )\n      if (\n        currentBackgroundHash &&\n        currentBackgroundHash ===\n          previousBackgroundHash &&\n        currentBackground !== this.previousBackground\n      ) {\n        this.element.classList.add(\"no-transition\")\n      }\n\n      this.previousBackground = currentBackground\n    }\n\n    // If there's a background brightness flag for this slide,\n    // bubble it to the .reveal container\n    if (currentSlide) {\n      ;[\n        \"has-light-background\",\n        \"has-dark-background\",\n      ].forEach((classToBubble) => {\n        if (\n          currentSlide.classList.contains(\n            classToBubble\n          )\n        ) {\n          this.Reveal.getRevealElement().classList.add(\n            classToBubble\n          )\n        } else {\n          this.Reveal.getRevealElement().classList.remove(\n            classToBubble\n          )\n        }\n      }, this)\n    }\n\n    // Allow the first background to apply without transition\n    setTimeout(() => {\n      this.element.classList.remove(\"no-transition\")\n    }, 1)\n  }\n\n  /**\n   * Updates the position of the parallax background based\n   * on the current slide index.\n   */\n  updateParallax() {\n    let indices = this.Reveal.getIndices()\n\n    if (\n      this.Reveal.getConfig().parallaxBackgroundImage\n    ) {\n      let horizontalSlides =\n          this.Reveal.getHorizontalSlides(),\n        verticalSlides =\n          this.Reveal.getVerticalSlides()\n\n      let backgroundSize =\n          this.element.style.backgroundSize.split(\" \"),\n        backgroundWidth,\n        backgroundHeight\n\n      if (backgroundSize.length === 1) {\n        backgroundWidth = backgroundHeight = parseInt(\n          backgroundSize[0],\n          10\n        )\n      } else {\n        backgroundWidth = parseInt(\n          backgroundSize[0],\n          10\n        )\n        backgroundHeight = parseInt(\n          backgroundSize[1],\n          10\n        )\n      }\n\n      let slideWidth = this.element.offsetWidth,\n        horizontalSlideCount = horizontalSlides.length,\n        horizontalOffsetMultiplier,\n        horizontalOffset\n\n      if (\n        typeof this.Reveal.getConfig()\n          .parallaxBackgroundHorizontal === \"number\"\n      ) {\n        horizontalOffsetMultiplier =\n          this.Reveal.getConfig()\n            .parallaxBackgroundHorizontal\n      } else {\n        horizontalOffsetMultiplier =\n          horizontalSlideCount > 1\n            ? (backgroundWidth - slideWidth) /\n              (horizontalSlideCount - 1)\n            : 0\n      }\n\n      horizontalOffset =\n        horizontalOffsetMultiplier * indices.h * -1\n\n      let slideHeight = this.element.offsetHeight,\n        verticalSlideCount = verticalSlides.length,\n        verticalOffsetMultiplier,\n        verticalOffset\n\n      if (\n        typeof this.Reveal.getConfig()\n          .parallaxBackgroundVertical === \"number\"\n      ) {\n        verticalOffsetMultiplier =\n          this.Reveal.getConfig()\n            .parallaxBackgroundVertical\n      } else {\n        verticalOffsetMultiplier =\n          (backgroundHeight - slideHeight) /\n          (verticalSlideCount - 1)\n      }\n\n      verticalOffset =\n        verticalSlideCount > 0\n          ? verticalOffsetMultiplier * indices.v\n          : 0\n\n      this.element.style.backgroundPosition =\n        horizontalOffset +\n        \"px \" +\n        -verticalOffset +\n        \"px\"\n    }\n  }\n}\n","export const SLIDES_SELECTOR = \".slides section\"\nexport const HORIZONTAL_SLIDES_SELECTOR =\n  \".slides>section\"\nexport const VERTICAL_SLIDES_SELECTOR =\n  \".slides>section.present>section\"\n\n// Methods that may not be invoked via the postMessage API\nexport const POST_MESSAGE_METHOD_BLACKLIST =\n  /registerPlugin|registerKeyboardShortcut|addKeyBinding|addEventListener/\n\n// Regex for retrieving the fragment style from a class attribute\nexport const FRAGMENT_STYLE_REGEX =\n  /fade-(down|up|right|left|out|in-then-out|in-then-semi-out)|semi-fade-out|current-visible|shrink|grow/\n","import {\n  queryAll,\n  extend,\n  createStyleSheet,\n  matches,\n  closest,\n} from \"../utils/util.js\"\nimport { FRAGMENT_STYLE_REGEX } from \"../utils/constants.js\"\n\n// Counter used to generate unique IDs for auto-animated elements\nlet autoAnimateCounter = 0\n\n/**\n * Automatically animates matching elements across\n * slides with the [data-auto-animate] attribute.\n */\nexport default class AutoAnimate {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  /**\n   * Runs an auto-animation between the given slides.\n   *\n   * @param  {HTMLElement} fromSlide\n   * @param  {HTMLElement} toSlide\n   */\n  run(fromSlide, toSlide) {\n    // Clean up after prior animations\n    this.reset()\n\n    let allSlides = this.Reveal.getSlides()\n    let toSlideIndex = allSlides.indexOf(toSlide)\n    let fromSlideIndex = allSlides.indexOf(fromSlide)\n\n    // Ensure that both slides are auto-animate targets with the same data-auto-animate-id value\n    // (including null if absent on both) and that data-auto-animate-restart isn't set on the\n    // physically latter slide (independent of slide direction)\n    if (\n      fromSlide.hasAttribute(\"data-auto-animate\") &&\n      toSlide.hasAttribute(\"data-auto-animate\") &&\n      fromSlide.getAttribute(\n        \"data-auto-animate-id\"\n      ) ===\n        toSlide.getAttribute(\"data-auto-animate-id\") &&\n      !(\n        toSlideIndex > fromSlideIndex\n          ? toSlide\n          : fromSlide\n      ).hasAttribute(\"data-auto-animate-restart\")\n    ) {\n      // Create a new auto-animate sheet\n      this.autoAnimateStyleSheet =\n        this.autoAnimateStyleSheet ||\n        createStyleSheet()\n\n      let animationOptions =\n        this.getAutoAnimateOptions(toSlide)\n\n      // Set our starting state\n      fromSlide.dataset.autoAnimate = \"pending\"\n      toSlide.dataset.autoAnimate = \"pending\"\n\n      // Flag the navigation direction, needed for fragment buildup\n      animationOptions.slideDirection =\n        toSlideIndex > fromSlideIndex\n          ? \"forward\"\n          : \"backward\"\n\n      // Inject our auto-animate styles for this transition\n      let css = this.getAutoAnimatableElements(\n        fromSlide,\n        toSlide\n      ).map((elements) => {\n        return this.autoAnimateElements(\n          elements.from,\n          elements.to,\n          elements.options || {},\n          animationOptions,\n          autoAnimateCounter++\n        )\n      })\n\n      // Animate unmatched elements, if enabled\n      if (\n        toSlide.dataset.autoAnimateUnmatched !==\n          \"false\" &&\n        this.Reveal.getConfig()\n          .autoAnimateUnmatched === true\n      ) {\n        // Our default timings for unmatched elements\n        let defaultUnmatchedDuration =\n            animationOptions.duration * 0.8,\n          defaultUnmatchedDelay =\n            animationOptions.duration * 0.2\n\n        this.getUnmatchedAutoAnimateElements(\n          toSlide\n        ).forEach((unmatchedElement) => {\n          let unmatchedOptions =\n            this.getAutoAnimateOptions(\n              unmatchedElement,\n              animationOptions\n            )\n          let id = \"unmatched\"\n\n          // If there is a duration or delay set specifically for this\n          // element our unmatched elements should adhere to those\n          if (\n            unmatchedOptions.duration !==\n              animationOptions.duration ||\n            unmatchedOptions.delay !==\n              animationOptions.delay\n          ) {\n            id = \"unmatched-\" + autoAnimateCounter++\n            css.push(\n              `[data-auto-animate=\"running\"] [data-auto-animate-target=\"${id}\"] { transition: opacity ${unmatchedOptions.duration}s ease ${unmatchedOptions.delay}s; }`\n            )\n          }\n\n          unmatchedElement.dataset.autoAnimateTarget =\n            id\n        }, this)\n\n        // Our default transition for unmatched elements\n        css.push(\n          `[data-auto-animate=\"running\"] [data-auto-animate-target=\"unmatched\"] { transition: opacity ${defaultUnmatchedDuration}s ease ${defaultUnmatchedDelay}s; }`\n        )\n      }\n\n      // Setting the whole chunk of CSS at once is the most\n      // efficient way to do this. Using sheet.insertRule\n      // is multiple factors slower.\n      this.autoAnimateStyleSheet.innerHTML =\n        css.join(\"\")\n\n      // Start the animation next cycle\n      requestAnimationFrame(() => {\n        if (this.autoAnimateStyleSheet) {\n          // This forces our newly injected styles to be applied in Firefox\n          getComputedStyle(this.autoAnimateStyleSheet)\n            .fontWeight\n\n          toSlide.dataset.autoAnimate = \"running\"\n        }\n      })\n\n      this.Reveal.dispatchEvent({\n        type: \"autoanimate\",\n        data: {\n          fromSlide,\n          toSlide,\n          sheet: this.autoAnimateStyleSheet,\n        },\n      })\n    }\n  }\n\n  /**\n   * Rolls back all changes that we've made to the DOM so\n   * that as part of animating.\n   */\n  reset() {\n    // Reset slides\n    queryAll(\n      this.Reveal.getRevealElement(),\n      '[data-auto-animate]:not([data-auto-animate=\"\"])'\n    ).forEach((element) => {\n      element.dataset.autoAnimate = \"\"\n    })\n\n    // Reset elements\n    queryAll(\n      this.Reveal.getRevealElement(),\n      \"[data-auto-animate-target]\"\n    ).forEach((element) => {\n      delete element.dataset.autoAnimateTarget\n    })\n\n    // Remove the animation sheet\n    if (\n      this.autoAnimateStyleSheet &&\n      this.autoAnimateStyleSheet.parentNode\n    ) {\n      this.autoAnimateStyleSheet.parentNode.removeChild(\n        this.autoAnimateStyleSheet\n      )\n      this.autoAnimateStyleSheet = null\n    }\n  }\n\n  /**\n   * Creates a FLIP animation where the `to` element starts out\n   * in the `from` element position and animates to its original\n   * state.\n   *\n   * @param {HTMLElement} from\n   * @param {HTMLElement} to\n   * @param {Object} elementOptions Options for this element pair\n   * @param {Object} animationOptions Options set at the slide level\n   * @param {String} id Unique ID that we can use to identify this\n   * auto-animate element in the DOM\n   */\n  autoAnimateElements(\n    from,\n    to,\n    elementOptions,\n    animationOptions,\n    id\n  ) {\n    // 'from' elements are given a data-auto-animate-target with no value,\n    // 'to' elements are are given a data-auto-animate-target with an ID\n    from.dataset.autoAnimateTarget = \"\"\n    to.dataset.autoAnimateTarget = id\n\n    // Each element may override any of the auto-animate options\n    // like transition easing, duration and delay via data-attributes\n    let options = this.getAutoAnimateOptions(\n      to,\n      animationOptions\n    )\n\n    // If we're using a custom element matcher the element options\n    // may contain additional transition overrides\n    if (typeof elementOptions.delay !== \"undefined\")\n      options.delay = elementOptions.delay\n    if (typeof elementOptions.duration !== \"undefined\")\n      options.duration = elementOptions.duration\n    if (typeof elementOptions.easing !== \"undefined\")\n      options.easing = elementOptions.easing\n\n    let fromProps = this.getAutoAnimatableProperties(\n        \"from\",\n        from,\n        elementOptions\n      ),\n      toProps = this.getAutoAnimatableProperties(\n        \"to\",\n        to,\n        elementOptions\n      )\n\n    // Maintain fragment visibility for matching elements when\n    // we're navigating forwards, this way the viewer won't need\n    // to step through the same fragments twice\n    if (to.classList.contains(\"fragment\")) {\n      // Don't auto-animate the opacity of fragments to avoid\n      // conflicts with fragment animations\n      delete toProps.styles[\"opacity\"]\n\n      if (from.classList.contains(\"fragment\")) {\n        let fromFragmentStyle = (from.className.match(\n          FRAGMENT_STYLE_REGEX\n        ) || [\"\"])[0]\n        let toFragmentStyle = (to.className.match(\n          FRAGMENT_STYLE_REGEX\n        ) || [\"\"])[0]\n\n        // Only skip the fragment if the fragment animation style\n        // remains unchanged\n        if (\n          fromFragmentStyle === toFragmentStyle &&\n          animationOptions.slideDirection === \"forward\"\n        ) {\n          to.classList.add(\"visible\", \"disabled\")\n        }\n      }\n    }\n\n    // If translation and/or scaling are enabled, css transform\n    // the 'to' element so that it matches the position and size\n    // of the 'from' element\n    if (\n      elementOptions.translate !== false ||\n      elementOptions.scale !== false\n    ) {\n      let presentationScale = this.Reveal.getScale()\n\n      let delta = {\n        x:\n          (fromProps.x - toProps.x) /\n          presentationScale,\n        y:\n          (fromProps.y - toProps.y) /\n          presentationScale,\n        scaleX: fromProps.width / toProps.width,\n        scaleY: fromProps.height / toProps.height,\n      }\n\n      // Limit decimal points to avoid 0.0001px blur and stutter\n      delta.x = Math.round(delta.x * 1000) / 1000\n      delta.y = Math.round(delta.y * 1000) / 1000\n      delta.scaleX =\n        Math.round(delta.scaleX * 1000) / 1000\n      delta.scaleX =\n        Math.round(delta.scaleX * 1000) / 1000\n\n      let translate =\n          elementOptions.translate !== false &&\n          (delta.x !== 0 || delta.y !== 0),\n        scale =\n          elementOptions.scale !== false &&\n          (delta.scaleX !== 0 || delta.scaleY !== 0)\n\n      // No need to transform if nothing's changed\n      if (translate || scale) {\n        let transform = []\n\n        if (translate)\n          transform.push(\n            `translate(${delta.x}px, ${delta.y}px)`\n          )\n        if (scale)\n          transform.push(\n            `scale(${delta.scaleX}, ${delta.scaleY})`\n          )\n\n        fromProps.styles[\"transform\"] =\n          transform.join(\" \")\n        fromProps.styles[\"transform-origin\"] =\n          \"top left\"\n\n        toProps.styles[\"transform\"] = \"none\"\n      }\n    }\n\n    // Delete all unchanged 'to' styles\n    for (let propertyName in toProps.styles) {\n      const toValue = toProps.styles[propertyName]\n      const fromValue = fromProps.styles[propertyName]\n\n      if (toValue === fromValue) {\n        delete toProps.styles[propertyName]\n      } else {\n        // If these property values were set via a custom matcher providing\n        // an explicit 'from' and/or 'to' value, we always inject those values.\n        if (toValue.explicitValue === true) {\n          toProps.styles[propertyName] = toValue.value\n        }\n\n        if (fromValue.explicitValue === true) {\n          fromProps.styles[propertyName] =\n            fromValue.value\n        }\n      }\n    }\n\n    let css = \"\"\n\n    let toStyleProperties = Object.keys(toProps.styles)\n\n    // Only create animate this element IF at least one style\n    // property has changed\n    if (toStyleProperties.length > 0) {\n      // Instantly move to the 'from' state\n      fromProps.styles[\"transition\"] = \"none\"\n\n      // Animate towards the 'to' state\n      toProps.styles[\n        \"transition\"\n      ] = `all ${options.duration}s ${options.easing} ${options.delay}s`\n      toProps.styles[\"transition-property\"] =\n        toStyleProperties.join(\", \")\n      toProps.styles[\"will-change\"] =\n        toStyleProperties.join(\", \")\n\n      // Build up our custom CSS. We need to override inline styles\n      // so we need to make our styles vErY IMPORTANT!1!!\n      let fromCSS = Object.keys(fromProps.styles)\n        .map((propertyName) => {\n          return (\n            propertyName +\n            \": \" +\n            fromProps.styles[propertyName] +\n            \" !important;\"\n          )\n        })\n        .join(\"\")\n\n      let toCSS = Object.keys(toProps.styles)\n        .map((propertyName) => {\n          return (\n            propertyName +\n            \": \" +\n            toProps.styles[propertyName] +\n            \" !important;\"\n          )\n        })\n        .join(\"\")\n\n      css =\n        '[data-auto-animate-target=\"' +\n        id +\n        '\"] {' +\n        fromCSS +\n        \"}\" +\n        '[data-auto-animate=\"running\"] [data-auto-animate-target=\"' +\n        id +\n        '\"] {' +\n        toCSS +\n        \"}\"\n    }\n\n    return css\n  }\n\n  /**\n   * Returns the auto-animate options for the given element.\n   *\n   * @param {HTMLElement} element Element to pick up options\n   * from, either a slide or an animation target\n   * @param {Object} [inheritedOptions] Optional set of existing\n   * options\n   */\n  getAutoAnimateOptions(element, inheritedOptions) {\n    let options = {\n      easing:\n        this.Reveal.getConfig().autoAnimateEasing,\n      duration:\n        this.Reveal.getConfig().autoAnimateDuration,\n      delay: 0,\n    }\n\n    options = extend(options, inheritedOptions)\n\n    // Inherit options from parent elements\n    if (element.parentNode) {\n      let autoAnimatedParent = closest(\n        element.parentNode,\n        \"[data-auto-animate-target]\"\n      )\n      if (autoAnimatedParent) {\n        options = this.getAutoAnimateOptions(\n          autoAnimatedParent,\n          options\n        )\n      }\n    }\n\n    if (element.dataset.autoAnimateEasing) {\n      options.easing =\n        element.dataset.autoAnimateEasing\n    }\n\n    if (element.dataset.autoAnimateDuration) {\n      options.duration = parseFloat(\n        element.dataset.autoAnimateDuration\n      )\n    }\n\n    if (element.dataset.autoAnimateDelay) {\n      options.delay = parseFloat(\n        element.dataset.autoAnimateDelay\n      )\n    }\n\n    return options\n  }\n\n  /**\n   * Returns an object containing all of the properties\n   * that can be auto-animated for the given element and\n   * their current computed values.\n   *\n   * @param {String} direction 'from' or 'to'\n   */\n  getAutoAnimatableProperties(\n    direction,\n    element,\n    elementOptions\n  ) {\n    let config = this.Reveal.getConfig()\n\n    let properties = { styles: [] }\n\n    // Position and size\n    if (\n      elementOptions.translate !== false ||\n      elementOptions.scale !== false\n    ) {\n      let bounds\n\n      // Custom auto-animate may optionally return a custom tailored\n      // measurement function\n      if (\n        typeof elementOptions.measure === \"function\"\n      ) {\n        bounds = elementOptions.measure(element)\n      } else {\n        if (config.center) {\n          // More precise, but breaks when used in combination\n          // with zoom for scaling the deck ¯\\_(ツ)_/¯\n          bounds = element.getBoundingClientRect()\n        } else {\n          let scale = this.Reveal.getScale()\n          bounds = {\n            x: element.offsetLeft * scale,\n            y: element.offsetTop * scale,\n            width: element.offsetWidth * scale,\n            height: element.offsetHeight * scale,\n          }\n        }\n      }\n\n      properties.x = bounds.x\n      properties.y = bounds.y\n      properties.width = bounds.width\n      properties.height = bounds.height\n    }\n\n    const computedStyles = getComputedStyle(element)\n\n    // CSS styles\n    ;(\n      elementOptions.styles || config.autoAnimateStyles\n    ).forEach((style) => {\n      let value\n\n      // `style` is either the property name directly, or an object\n      // definition of a style property\n      if (typeof style === \"string\")\n        style = { property: style }\n\n      if (\n        typeof style.from !== \"undefined\" &&\n        direction === \"from\"\n      ) {\n        value = {\n          value: style.from,\n          explicitValue: true,\n        }\n      } else if (\n        typeof style.to !== \"undefined\" &&\n        direction === \"to\"\n      ) {\n        value = {\n          value: style.to,\n          explicitValue: true,\n        }\n      } else {\n        value = computedStyles[style.property]\n      }\n\n      if (value !== \"\") {\n        properties.styles[style.property] = value\n      }\n    })\n\n    return properties\n  }\n\n  /**\n   * Get a list of all element pairs that we can animate\n   * between the given slides.\n   *\n   * @param {HTMLElement} fromSlide\n   * @param {HTMLElement} toSlide\n   *\n   * @return {Array} Each value is an array where [0] is\n   * the element we're animating from and [1] is the\n   * element we're animating to\n   */\n  getAutoAnimatableElements(fromSlide, toSlide) {\n    let matcher =\n      typeof this.Reveal.getConfig()\n        .autoAnimateMatcher === \"function\"\n        ? this.Reveal.getConfig().autoAnimateMatcher\n        : this.getAutoAnimatePairs\n\n    let pairs = matcher.call(this, fromSlide, toSlide)\n\n    let reserved = []\n\n    // Remove duplicate pairs\n    return pairs.filter((pair, index) => {\n      if (reserved.indexOf(pair.to) === -1) {\n        reserved.push(pair.to)\n        return true\n      }\n    })\n  }\n\n  /**\n   * Identifies matching elements between slides.\n   *\n   * You can specify a custom matcher function by using\n   * the `autoAnimateMatcher` config option.\n   */\n  getAutoAnimatePairs(fromSlide, toSlide) {\n    let pairs = []\n\n    const codeNodes = \"pre\"\n    const textNodes = \"h1, h2, h3, h4, h5, h6, p, li\"\n    const mediaNodes = \"img, video, iframe\"\n\n    // Eplicit matches via data-id\n    this.findAutoAnimateMatches(\n      pairs,\n      fromSlide,\n      toSlide,\n      \"[data-id]\",\n      (node) => {\n        return (\n          node.nodeName +\n          \":::\" +\n          node.getAttribute(\"data-id\")\n        )\n      }\n    )\n\n    // Text\n    this.findAutoAnimateMatches(\n      pairs,\n      fromSlide,\n      toSlide,\n      textNodes,\n      (node) => {\n        return node.nodeName + \":::\" + node.innerText\n      }\n    )\n\n    // Media\n    this.findAutoAnimateMatches(\n      pairs,\n      fromSlide,\n      toSlide,\n      mediaNodes,\n      (node) => {\n        return (\n          node.nodeName +\n          \":::\" +\n          (node.getAttribute(\"src\") ||\n            node.getAttribute(\"data-src\"))\n        )\n      }\n    )\n\n    // Code\n    this.findAutoAnimateMatches(\n      pairs,\n      fromSlide,\n      toSlide,\n      codeNodes,\n      (node) => {\n        return node.nodeName + \":::\" + node.innerText\n      }\n    )\n\n    pairs.forEach((pair) => {\n      // Disable scale transformations on text nodes, we transition\n      // each individual text property instead\n      if (matches(pair.from, textNodes)) {\n        pair.options = { scale: false }\n      }\n      // Animate individual lines of code\n      else if (matches(pair.from, codeNodes)) {\n        // Transition the code block's width and height instead of scaling\n        // to prevent its content from being squished\n        pair.options = {\n          scale: false,\n          styles: [\"width\", \"height\"],\n        }\n\n        // Lines of code\n        this.findAutoAnimateMatches(\n          pairs,\n          pair.from,\n          pair.to,\n          \".hljs .hljs-ln-code\",\n          (node) => {\n            return node.textContent\n          },\n          {\n            scale: false,\n            styles: [],\n            measure:\n              this.getLocalBoundingBox.bind(this),\n          }\n        )\n\n        // Line numbers\n        this.findAutoAnimateMatches(\n          pairs,\n          pair.from,\n          pair.to,\n          \".hljs .hljs-ln-line[data-line-number]\",\n          (node) => {\n            return node.getAttribute(\n              \"data-line-number\"\n            )\n          },\n          {\n            scale: false,\n            styles: [\"width\"],\n            measure:\n              this.getLocalBoundingBox.bind(this),\n          }\n        )\n      }\n    }, this)\n\n    return pairs\n  }\n\n  /**\n   * Helper method which returns a bounding box based on\n   * the given elements offset coordinates.\n   *\n   * @param {HTMLElement} element\n   * @return {Object} x, y, width, height\n   */\n  getLocalBoundingBox(element) {\n    const presentationScale = this.Reveal.getScale()\n\n    return {\n      x:\n        Math.round(\n          element.offsetLeft * presentationScale * 100\n        ) / 100,\n      y:\n        Math.round(\n          element.offsetTop * presentationScale * 100\n        ) / 100,\n      width:\n        Math.round(\n          element.offsetWidth * presentationScale * 100\n        ) / 100,\n      height:\n        Math.round(\n          element.offsetHeight *\n            presentationScale *\n            100\n        ) / 100,\n    }\n  }\n\n  /**\n   * Finds matching elements between two slides.\n   *\n   * @param {Array} pairs            \tList of pairs to push matches to\n   * @param {HTMLElement} fromScope   Scope within the from element exists\n   * @param {HTMLElement} toScope     Scope within the to element exists\n   * @param {String} selector         CSS selector of the element to match\n   * @param {Function} serializer     A function that accepts an element and returns\n   *                                  a stringified ID based on its contents\n   * @param {Object} animationOptions Optional config options for this pair\n   */\n  findAutoAnimateMatches(\n    pairs,\n    fromScope,\n    toScope,\n    selector,\n    serializer,\n    animationOptions\n  ) {\n    let fromMatches = {}\n    let toMatches = {}\n\n    ;[].slice\n      .call(fromScope.querySelectorAll(selector))\n      .forEach((element, i) => {\n        const key = serializer(element)\n        if (typeof key === \"string\" && key.length) {\n          fromMatches[key] = fromMatches[key] || []\n          fromMatches[key].push(element)\n        }\n      })\n    ;[].slice\n      .call(toScope.querySelectorAll(selector))\n      .forEach((element, i) => {\n        const key = serializer(element)\n        toMatches[key] = toMatches[key] || []\n        toMatches[key].push(element)\n\n        let fromElement\n\n        // Retrieve the 'from' element\n        if (fromMatches[key]) {\n          const pimaryIndex = toMatches[key].length - 1\n          const secondaryIndex =\n            fromMatches[key].length - 1\n\n          // If there are multiple identical from elements, retrieve\n          // the one at the same index as our to-element.\n          if (fromMatches[key][pimaryIndex]) {\n            fromElement = fromMatches[key][pimaryIndex]\n            fromMatches[key][pimaryIndex] = null\n          }\n          // If there are no matching from-elements at the same index,\n          // use the last one.\n          else if (fromMatches[key][secondaryIndex]) {\n            fromElement =\n              fromMatches[key][secondaryIndex]\n            fromMatches[key][secondaryIndex] = null\n          }\n        }\n\n        // If we've got a matching pair, push it to the list of pairs\n        if (fromElement) {\n          pairs.push({\n            from: fromElement,\n            to: element,\n            options: animationOptions,\n          })\n        }\n      })\n  }\n\n  /**\n   * Returns a all elements within the given scope that should\n   * be considered unmatched in an auto-animate transition. If\n   * fading of unmatched elements is turned on, these elements\n   * will fade when going between auto-animate slides.\n   *\n   * Note that parents of auto-animate targets are NOT considerd\n   * unmatched since fading them would break the auto-animation.\n   *\n   * @param {HTMLElement} rootElement\n   * @return {Array}\n   */\n  getUnmatchedAutoAnimateElements(rootElement) {\n    return [].slice\n      .call(rootElement.children)\n      .reduce((result, element) => {\n        const containsAnimatedElements =\n          element.querySelector(\n            \"[data-auto-animate-target]\"\n          )\n\n        // The element is unmatched if\n        // - It is not an auto-animate target\n        // - It does not contain any auto-animate targets\n        if (\n          !element.hasAttribute(\n            \"data-auto-animate-target\"\n          ) &&\n          !containsAnimatedElements\n        ) {\n          result.push(element)\n        }\n\n        if (\n          element.querySelector(\n            \"[data-auto-animate-target]\"\n          )\n        ) {\n          result = result.concat(\n            this.getUnmatchedAutoAnimateElements(\n              element\n            )\n          )\n        }\n\n        return result\n      }, [])\n  }\n}\n","import { extend, queryAll } from \"../utils/util.js\"\n\n/**\n * Handles sorting and navigation of slide fragments.\n * Fragments are elements within a slide that are\n * revealed/animated incrementally.\n */\nexport default class Fragments {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    if (config.fragments === false) {\n      this.disable()\n    } else if (oldConfig.fragments === false) {\n      this.enable()\n    }\n  }\n\n  /**\n   * If fragments are disabled in the deck, they should all be\n   * visible rather than stepped through.\n   */\n  disable() {\n    queryAll(\n      this.Reveal.getSlidesElement(),\n      \".fragment\"\n    ).forEach((element) => {\n      element.classList.add(\"visible\")\n      element.classList.remove(\"current-fragment\")\n    })\n  }\n\n  /**\n   * Reverse of #disable(). Only called if fragments have\n   * previously been disabled.\n   */\n  enable() {\n    queryAll(\n      this.Reveal.getSlidesElement(),\n      \".fragment\"\n    ).forEach((element) => {\n      element.classList.remove(\"visible\")\n      element.classList.remove(\"current-fragment\")\n    })\n  }\n\n  /**\n   * Returns an object describing the available fragment\n   * directions.\n   *\n   * @return {{prev: boolean, next: boolean}}\n   */\n  availableRoutes() {\n    let currentSlide = this.Reveal.getCurrentSlide()\n    if (\n      currentSlide &&\n      this.Reveal.getConfig().fragments\n    ) {\n      let fragments = currentSlide.querySelectorAll(\n        \".fragment:not(.disabled)\"\n      )\n      let hiddenFragments =\n        currentSlide.querySelectorAll(\n          \".fragment:not(.disabled):not(.visible)\"\n        )\n\n      return {\n        prev:\n          fragments.length - hiddenFragments.length >\n          0,\n        next: !!hiddenFragments.length,\n      }\n    } else {\n      return { prev: false, next: false }\n    }\n  }\n\n  /**\n   * Return a sorted fragments list, ordered by an increasing\n   * \"data-fragment-index\" attribute.\n   *\n   * Fragments will be revealed in the order that they are returned by\n   * this function, so you can use the index attributes to control the\n   * order of fragment appearance.\n   *\n   * To maintain a sensible default fragment order, fragments are presumed\n   * to be passed in document order. This function adds a \"fragment-index\"\n   * attribute to each node if such an attribute is not already present,\n   * and sets that attribute to an integer value which is the position of\n   * the fragment within the fragments list.\n   *\n   * @param {object[]|*} fragments\n   * @param {boolean} grouped If true the returned array will contain\n   * nested arrays for all fragments with the same index\n   * @return {object[]} sorted Sorted array of fragments\n   */\n  sort(fragments, grouped = false) {\n    fragments = Array.from(fragments)\n\n    let ordered = [],\n      unordered = [],\n      sorted = []\n\n    // Group ordered and unordered elements\n    fragments.forEach((fragment) => {\n      if (\n        fragment.hasAttribute(\"data-fragment-index\")\n      ) {\n        let index = parseInt(\n          fragment.getAttribute(\"data-fragment-index\"),\n          10\n        )\n\n        if (!ordered[index]) {\n          ordered[index] = []\n        }\n\n        ordered[index].push(fragment)\n      } else {\n        unordered.push([fragment])\n      }\n    })\n\n    // Append fragments without explicit indices in their\n    // DOM order\n    ordered = ordered.concat(unordered)\n\n    // Manually count the index up per group to ensure there\n    // are no gaps\n    let index = 0\n\n    // Push all fragments in their sorted order to an array,\n    // this flattens the groups\n    ordered.forEach((group) => {\n      group.forEach((fragment) => {\n        sorted.push(fragment)\n        fragment.setAttribute(\n          \"data-fragment-index\",\n          index\n        )\n      })\n\n      index++\n    })\n\n    return grouped === true ? ordered : sorted\n  }\n\n  /**\n   * Sorts and formats all of fragments in the\n   * presentation.\n   */\n  sortAll() {\n    this.Reveal.getHorizontalSlides().forEach(\n      (horizontalSlide) => {\n        let verticalSlides = queryAll(\n          horizontalSlide,\n          \"section\"\n        )\n        verticalSlides.forEach((verticalSlide, y) => {\n          this.sort(\n            verticalSlide.querySelectorAll(\".fragment\")\n          )\n        }, this)\n\n        if (verticalSlides.length === 0)\n          this.sort(\n            horizontalSlide.querySelectorAll(\n              \".fragment\"\n            )\n          )\n      }\n    )\n  }\n\n  /**\n   * Refreshes the fragments on the current slide so that they\n   * have the appropriate classes (.visible + .current-fragment).\n   *\n   * @param {number} [index] The index of the current fragment\n   * @param {array} [fragments] Array containing all fragments\n   * in the current slide\n   *\n   * @return {{shown: array, hidden: array}}\n   */\n  update(index, fragments) {\n    let changedFragments = {\n      shown: [],\n      hidden: [],\n    }\n\n    let currentSlide = this.Reveal.getCurrentSlide()\n    if (\n      currentSlide &&\n      this.Reveal.getConfig().fragments\n    ) {\n      fragments =\n        fragments ||\n        this.sort(\n          currentSlide.querySelectorAll(\".fragment\")\n        )\n\n      if (fragments.length) {\n        let maxIndex = 0\n\n        if (typeof index !== \"number\") {\n          let currentFragment = this.sort(\n            currentSlide.querySelectorAll(\n              \".fragment.visible\"\n            )\n          ).pop()\n          if (currentFragment) {\n            index = parseInt(\n              currentFragment.getAttribute(\n                \"data-fragment-index\"\n              ) || 0,\n              10\n            )\n          }\n        }\n\n        Array.from(fragments).forEach((el, i) => {\n          if (el.hasAttribute(\"data-fragment-index\")) {\n            i = parseInt(\n              el.getAttribute(\"data-fragment-index\"),\n              10\n            )\n          }\n\n          maxIndex = Math.max(maxIndex, i)\n\n          // Visible fragments\n          if (i <= index) {\n            let wasVisible =\n              el.classList.contains(\"visible\")\n            el.classList.add(\"visible\")\n            el.classList.remove(\"current-fragment\")\n\n            if (i === index) {\n              // Announce the fragments one by one to the Screen Reader\n              this.Reveal.announceStatus(\n                this.Reveal.getStatusText(el)\n              )\n\n              el.classList.add(\"current-fragment\")\n              this.Reveal.slideContent.startEmbeddedContent(\n                el\n              )\n            }\n\n            if (!wasVisible) {\n              changedFragments.shown.push(el)\n              this.Reveal.dispatchEvent({\n                target: el,\n                type: \"visible\",\n                bubbles: false,\n              })\n            }\n          }\n          // Hidden fragments\n          else {\n            let wasVisible =\n              el.classList.contains(\"visible\")\n            el.classList.remove(\"visible\")\n            el.classList.remove(\"current-fragment\")\n\n            if (wasVisible) {\n              this.Reveal.slideContent.stopEmbeddedContent(\n                el\n              )\n              changedFragments.hidden.push(el)\n              this.Reveal.dispatchEvent({\n                target: el,\n                type: \"hidden\",\n                bubbles: false,\n              })\n            }\n          }\n        })\n\n        // Write the current fragment index to the slide <section>.\n        // This can be used by end users to apply styles based on\n        // the current fragment index.\n        index = typeof index === \"number\" ? index : -1\n        index = Math.max(Math.min(index, maxIndex), -1)\n        currentSlide.setAttribute(\n          \"data-fragment\",\n          index\n        )\n      }\n    }\n\n    return changedFragments\n  }\n\n  /**\n   * Formats the fragments on the given slide so that they have\n   * valid indices. Call this if fragments are changed in the DOM\n   * after reveal.js has already initialized.\n   *\n   * @param {HTMLElement} slide\n   * @return {Array} a list of the HTML fragments that were synced\n   */\n  sync(slide = this.Reveal.getCurrentSlide()) {\n    return this.sort(\n      slide.querySelectorAll(\".fragment\")\n    )\n  }\n\n  /**\n   * Navigate to the specified slide fragment.\n   *\n   * @param {?number} index The index of the fragment that\n   * should be shown, -1 means all are invisible\n   * @param {number} offset Integer offset to apply to the\n   * fragment index\n   *\n   * @return {boolean} true if a change was made in any\n   * fragments visibility as part of this call\n   */\n  goto(index, offset = 0) {\n    let currentSlide = this.Reveal.getCurrentSlide()\n    if (\n      currentSlide &&\n      this.Reveal.getConfig().fragments\n    ) {\n      let fragments = this.sort(\n        currentSlide.querySelectorAll(\n          \".fragment:not(.disabled)\"\n        )\n      )\n      if (fragments.length) {\n        // If no index is specified, find the current\n        if (typeof index !== \"number\") {\n          let lastVisibleFragment = this.sort(\n            currentSlide.querySelectorAll(\n              \".fragment:not(.disabled).visible\"\n            )\n          ).pop()\n\n          if (lastVisibleFragment) {\n            index = parseInt(\n              lastVisibleFragment.getAttribute(\n                \"data-fragment-index\"\n              ) || 0,\n              10\n            )\n          } else {\n            index = -1\n          }\n        }\n\n        // Apply the offset if there is one\n        index += offset\n\n        let changedFragments = this.update(\n          index,\n          fragments\n        )\n\n        if (changedFragments.hidden.length) {\n          this.Reveal.dispatchEvent({\n            type: \"fragmenthidden\",\n            data: {\n              fragment: changedFragments.hidden[0],\n              fragments: changedFragments.hidden,\n            },\n          })\n        }\n\n        if (changedFragments.shown.length) {\n          this.Reveal.dispatchEvent({\n            type: \"fragmentshown\",\n            data: {\n              fragment: changedFragments.shown[0],\n              fragments: changedFragments.shown,\n            },\n          })\n        }\n\n        this.Reveal.controls.update()\n        this.Reveal.progress.update()\n\n        if (this.Reveal.getConfig().fragmentInURL) {\n          this.Reveal.location.writeURL()\n        }\n\n        return !!(\n          changedFragments.shown.length ||\n          changedFragments.hidden.length\n        )\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Navigate to the next slide fragment.\n   *\n   * @return {boolean} true if there was a next fragment,\n   * false otherwise\n   */\n  next() {\n    return this.goto(null, 1)\n  }\n\n  /**\n   * Navigate to the previous slide fragment.\n   *\n   * @return {boolean} true if there was a previous fragment,\n   * false otherwise\n   */\n  prev() {\n    return this.goto(null, -1)\n  }\n}\n","import { SLIDES_SELECTOR } from \"../utils/constants.js\"\nimport {\n  extend,\n  queryAll,\n  transformElement,\n} from \"../utils/util.js\"\n\n/**\n * Handles all logic related to the overview mode\n * (birds-eye view of all slides).\n */\nexport default class Overview {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    this.active = false\n\n    this.onSlideClicked =\n      this.onSlideClicked.bind(this)\n  }\n\n  /**\n   * Displays the overview of slides (quick nav) by scaling\n   * down and arranging all slide elements.\n   */\n  activate() {\n    // Only proceed if enabled in config\n    if (\n      this.Reveal.getConfig().overview &&\n      !this.isActive()\n    ) {\n      this.active = true\n\n      this.Reveal.getRevealElement().classList.add(\n        \"overview\"\n      )\n\n      // Don't auto-slide while in overview mode\n      this.Reveal.cancelAutoSlide()\n\n      // Move the backgrounds element into the slide container to\n      // that the same scaling is applied\n      this.Reveal.getSlidesElement().appendChild(\n        this.Reveal.getBackgroundsElement()\n      )\n\n      // Clicking on an overview slide navigates to it\n      queryAll(\n        this.Reveal.getRevealElement(),\n        SLIDES_SELECTOR\n      ).forEach((slide) => {\n        if (!slide.classList.contains(\"stack\")) {\n          slide.addEventListener(\n            \"click\",\n            this.onSlideClicked,\n            true\n          )\n        }\n      })\n\n      // Calculate slide sizes\n      const margin = 70\n      const slideSize =\n        this.Reveal.getComputedSlideSize()\n      this.overviewSlideWidth =\n        slideSize.width + margin\n      this.overviewSlideHeight =\n        slideSize.height + margin\n\n      // Reverse in RTL mode\n      if (this.Reveal.getConfig().rtl) {\n        this.overviewSlideWidth =\n          -this.overviewSlideWidth\n      }\n\n      this.Reveal.updateSlidesVisibility()\n\n      this.layout()\n      this.update()\n\n      this.Reveal.layout()\n\n      const indices = this.Reveal.getIndices()\n\n      // Notify observers of the overview showing\n      this.Reveal.dispatchEvent({\n        type: \"overviewshown\",\n        data: {\n          indexh: indices.h,\n          indexv: indices.v,\n          currentSlide: this.Reveal.getCurrentSlide(),\n        },\n      })\n    }\n  }\n\n  /**\n   * Uses CSS transforms to position all slides in a grid for\n   * display inside of the overview mode.\n   */\n  layout() {\n    // Layout slides\n    this.Reveal.getHorizontalSlides().forEach(\n      (hslide, h) => {\n        hslide.setAttribute(\"data-index-h\", h)\n        transformElement(\n          hslide,\n          \"translate3d(\" +\n            h * this.overviewSlideWidth +\n            \"px, 0, 0)\"\n        )\n\n        if (hslide.classList.contains(\"stack\")) {\n          queryAll(hslide, \"section\").forEach(\n            (vslide, v) => {\n              vslide.setAttribute(\"data-index-h\", h)\n              vslide.setAttribute(\"data-index-v\", v)\n\n              transformElement(\n                vslide,\n                \"translate3d(0, \" +\n                  v * this.overviewSlideHeight +\n                  \"px, 0)\"\n              )\n            }\n          )\n        }\n      }\n    )\n\n    // Layout slide backgrounds\n    Array.from(\n      this.Reveal.getBackgroundsElement().childNodes\n    ).forEach((hbackground, h) => {\n      transformElement(\n        hbackground,\n        \"translate3d(\" +\n          h * this.overviewSlideWidth +\n          \"px, 0, 0)\"\n      )\n\n      queryAll(\n        hbackground,\n        \".slide-background\"\n      ).forEach((vbackground, v) => {\n        transformElement(\n          vbackground,\n          \"translate3d(0, \" +\n            v * this.overviewSlideHeight +\n            \"px, 0)\"\n        )\n      })\n    })\n  }\n\n  /**\n   * Moves the overview viewport to the current slides.\n   * Called each time the current slide changes.\n   */\n  update() {\n    const vmin = Math.min(\n      window.innerWidth,\n      window.innerHeight\n    )\n    const scale = Math.max(vmin / 5, 150) / vmin\n    const indices = this.Reveal.getIndices()\n\n    this.Reveal.transformSlides({\n      overview: [\n        \"scale(\" + scale + \")\",\n        \"translateX(\" +\n          -indices.h * this.overviewSlideWidth +\n          \"px)\",\n        \"translateY(\" +\n          -indices.v * this.overviewSlideHeight +\n          \"px)\",\n      ].join(\" \"),\n    })\n  }\n\n  /**\n   * Exits the slide overview and enters the currently\n   * active slide.\n   */\n  deactivate() {\n    // Only proceed if enabled in config\n    if (this.Reveal.getConfig().overview) {\n      this.active = false\n\n      this.Reveal.getRevealElement().classList.remove(\n        \"overview\"\n      )\n\n      // Temporarily add a class so that transitions can do different things\n      // depending on whether they are exiting/entering overview, or just\n      // moving from slide to slide\n      this.Reveal.getRevealElement().classList.add(\n        \"overview-deactivating\"\n      )\n\n      setTimeout(() => {\n        this.Reveal.getRevealElement().classList.remove(\n          \"overview-deactivating\"\n        )\n      }, 1)\n\n      // Move the background element back out\n      this.Reveal.getRevealElement().appendChild(\n        this.Reveal.getBackgroundsElement()\n      )\n\n      // Clean up changes made to slides\n      queryAll(\n        this.Reveal.getRevealElement(),\n        SLIDES_SELECTOR\n      ).forEach((slide) => {\n        transformElement(slide, \"\")\n\n        slide.removeEventListener(\n          \"click\",\n          this.onSlideClicked,\n          true\n        )\n      })\n\n      // Clean up changes made to backgrounds\n      queryAll(\n        this.Reveal.getBackgroundsElement(),\n        \".slide-background\"\n      ).forEach((background) => {\n        transformElement(background, \"\")\n      })\n\n      this.Reveal.transformSlides({ overview: \"\" })\n\n      const indices = this.Reveal.getIndices()\n\n      this.Reveal.slide(indices.h, indices.v)\n      this.Reveal.layout()\n      this.Reveal.cueAutoSlide()\n\n      // Notify observers of the overview hiding\n      this.Reveal.dispatchEvent({\n        type: \"overviewhidden\",\n        data: {\n          indexh: indices.h,\n          indexv: indices.v,\n          currentSlide: this.Reveal.getCurrentSlide(),\n        },\n      })\n    }\n  }\n\n  /**\n   * Toggles the slide overview mode on and off.\n   *\n   * @param {Boolean} [override] Flag which overrides the\n   * toggle logic and forcibly sets the desired state. True means\n   * overview is open, false means it's closed.\n   */\n  toggle(override) {\n    if (typeof override === \"boolean\") {\n      override ? this.activate() : this.deactivate()\n    } else {\n      this.isActive()\n        ? this.deactivate()\n        : this.activate()\n    }\n  }\n\n  /**\n   * Checks if the overview is currently active.\n   *\n   * @return {Boolean} true if the overview is active,\n   * false otherwise\n   */\n  isActive() {\n    return this.active\n  }\n\n  /**\n   * Invoked when a slide is and we're in the overview.\n   *\n   * @param {object} event\n   */\n  onSlideClicked(event) {\n    if (this.isActive()) {\n      event.preventDefault()\n\n      let element = event.target\n\n      while (\n        element &&\n        !element.nodeName.match(/section/gi)\n      ) {\n        element = element.parentNode\n      }\n\n      if (\n        element &&\n        !element.classList.contains(\"disabled\")\n      ) {\n        this.deactivate()\n\n        if (element.nodeName.match(/section/gi)) {\n          let h = parseInt(\n              element.getAttribute(\"data-index-h\"),\n              10\n            ),\n            v = parseInt(\n              element.getAttribute(\"data-index-v\"),\n              10\n            )\n\n          this.Reveal.slide(h, v)\n        }\n      }\n    }\n  }\n}\n","import { enterFullscreen } from \"../utils/util.js\"\n\n/**\n * Handles all reveal.js keyboard interactions.\n */\nexport default class Keyboard {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    // A key:value map of keyboard keys and descriptions of\n    // the actions they trigger\n    this.shortcuts = {}\n\n    // Holds custom key code mappings\n    this.bindings = {}\n\n    this.onDocumentKeyDown =\n      this.onDocumentKeyDown.bind(this)\n    this.onDocumentKeyPress =\n      this.onDocumentKeyPress.bind(this)\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    if (config.navigationMode === \"linear\") {\n      this.shortcuts[\n        \"&#8594;  ,  &#8595;  ,  SPACE  ,  N  ,  L  ,  J\"\n      ] = \"Next slide\"\n      this.shortcuts[\n        \"&#8592;  ,  &#8593;  ,  P  ,  H  ,  K\"\n      ] = \"Previous slide\"\n    } else {\n      this.shortcuts[\"N  ,  SPACE\"] = \"Next slide\"\n      this.shortcuts[\"P  ,  Shift SPACE\"] =\n        \"Previous slide\"\n      this.shortcuts[\"&#8592;  ,  H\"] = \"Navigate left\"\n      this.shortcuts[\"&#8594;  ,  L\"] =\n        \"Navigate right\"\n      this.shortcuts[\"&#8593;  ,  K\"] = \"Navigate up\"\n      this.shortcuts[\"&#8595;  ,  J\"] = \"Navigate down\"\n    }\n\n    this.shortcuts[\n      \"Alt + &#8592;/&#8593/&#8594;/&#8595;\"\n    ] = \"Navigate without fragments\"\n    this.shortcuts[\n      \"Shift + &#8592;/&#8593/&#8594;/&#8595;\"\n    ] = \"Jump to first/last slide\"\n    this.shortcuts[\"B  ,  .\"] = \"Pause\"\n    this.shortcuts[\"F\"] = \"Fullscreen\"\n    this.shortcuts[\"ESC, O\"] = \"Slide overview\"\n  }\n\n  /**\n   * Starts listening for keyboard events.\n   */\n  bind() {\n    document.addEventListener(\n      \"keydown\",\n      this.onDocumentKeyDown,\n      false\n    )\n    document.addEventListener(\n      \"keypress\",\n      this.onDocumentKeyPress,\n      false\n    )\n  }\n\n  /**\n   * Stops listening for keyboard events.\n   */\n  unbind() {\n    document.removeEventListener(\n      \"keydown\",\n      this.onDocumentKeyDown,\n      false\n    )\n    document.removeEventListener(\n      \"keypress\",\n      this.onDocumentKeyPress,\n      false\n    )\n  }\n\n  /**\n   * Add a custom key binding with optional description to\n   * be added to the help screen.\n   */\n  addKeyBinding(binding, callback) {\n    if (\n      typeof binding === \"object\" &&\n      binding.keyCode\n    ) {\n      this.bindings[binding.keyCode] = {\n        callback: callback,\n        key: binding.key,\n        description: binding.description,\n      }\n    } else {\n      this.bindings[binding] = {\n        callback: callback,\n        key: null,\n        description: null,\n      }\n    }\n  }\n\n  /**\n   * Removes the specified custom key binding.\n   */\n  removeKeyBinding(keyCode) {\n    delete this.bindings[keyCode]\n  }\n\n  /**\n   * Programmatically triggers a keyboard event\n   *\n   * @param {int} keyCode\n   */\n  triggerKey(keyCode) {\n    this.onDocumentKeyDown({ keyCode })\n  }\n\n  /**\n   * Registers a new shortcut to include in the help overlay\n   *\n   * @param {String} key\n   * @param {String} value\n   */\n  registerKeyboardShortcut(key, value) {\n    this.shortcuts[key] = value\n  }\n\n  getShortcuts() {\n    return this.shortcuts\n  }\n\n  getBindings() {\n    return this.bindings\n  }\n\n  /**\n   * Handler for the document level 'keypress' event.\n   *\n   * @param {object} event\n   */\n  onDocumentKeyPress(event) {\n    // Check if the pressed key is question mark\n    if (event.shiftKey && event.charCode === 63) {\n      this.Reveal.toggleHelp()\n    }\n  }\n\n  /**\n   * Handler for the document level 'keydown' event.\n   *\n   * @param {object} event\n   */\n  onDocumentKeyDown(event) {\n    let config = this.Reveal.getConfig()\n\n    // If there's a condition specified and it returns false,\n    // ignore this event\n    if (\n      typeof config.keyboardCondition === \"function\" &&\n      config.keyboardCondition(event) === false\n    ) {\n      return true\n    }\n\n    // If keyboardCondition is set, only capture keyboard events\n    // for embedded decks when they are focused\n    if (\n      config.keyboardCondition === \"focused\" &&\n      !this.Reveal.isFocused()\n    ) {\n      return true\n    }\n\n    // Shorthand\n    let keyCode = event.keyCode\n\n    // Remember if auto-sliding was paused so we can toggle it\n    let autoSlideWasPaused =\n      !this.Reveal.isAutoSliding()\n\n    this.Reveal.onUserInput(event)\n\n    // Is there a focused element that could be using the keyboard?\n    let activeElementIsCE =\n      document.activeElement &&\n      document.activeElement.isContentEditable === true\n    let activeElementIsInput =\n      document.activeElement &&\n      document.activeElement.tagName &&\n      /input|textarea/i.test(\n        document.activeElement.tagName\n      )\n    let activeElementIsNotes =\n      document.activeElement &&\n      document.activeElement.className &&\n      /speaker-notes/i.test(\n        document.activeElement.className\n      )\n\n    // Whitelist certain modifiers for slide navigation shortcuts\n    let isNavigationKey =\n      [32, 37, 38, 39, 40, 78, 80].indexOf(\n        event.keyCode\n      ) !== -1\n\n    // Prevent all other events when a modifier is pressed\n    let unusedModifier =\n      !(\n        (isNavigationKey && event.shiftKey) ||\n        event.altKey\n      ) &&\n      (event.shiftKey ||\n        event.altKey ||\n        event.ctrlKey ||\n        event.metaKey)\n\n    // Disregard the event if there's a focused element or a\n    // keyboard modifier key is present\n    if (\n      activeElementIsCE ||\n      activeElementIsInput ||\n      activeElementIsNotes ||\n      unusedModifier\n    )\n      return\n\n    // While paused only allow resume keyboard events; 'b', 'v', '.'\n    let resumeKeyCodes = [66, 86, 190, 191]\n    let key\n\n    // Custom key bindings for togglePause should be able to resume\n    if (typeof config.keyboard === \"object\") {\n      for (key in config.keyboard) {\n        if (config.keyboard[key] === \"togglePause\") {\n          resumeKeyCodes.push(parseInt(key, 10))\n        }\n      }\n    }\n\n    if (\n      this.Reveal.isPaused() &&\n      resumeKeyCodes.indexOf(keyCode) === -1\n    ) {\n      return false\n    }\n\n    // Use linear navigation if we're configured to OR if\n    // the presentation is one-dimensional\n    let useLinearMode =\n      config.navigationMode === \"linear\" ||\n      !this.Reveal.hasHorizontalSlides() ||\n      !this.Reveal.hasVerticalSlides()\n\n    let triggered = false\n\n    // 1. User defined key bindings\n    if (typeof config.keyboard === \"object\") {\n      for (key in config.keyboard) {\n        // Check if this binding matches the pressed key\n        if (parseInt(key, 10) === keyCode) {\n          let value = config.keyboard[key]\n\n          // Callback function\n          if (typeof value === \"function\") {\n            value.apply(null, [event])\n          }\n          // String shortcuts to reveal.js API\n          else if (\n            typeof value === \"string\" &&\n            typeof this.Reveal[value] === \"function\"\n          ) {\n            this.Reveal[value].call()\n          }\n\n          triggered = true\n        }\n      }\n    }\n\n    // 2. Registered custom key bindings\n    if (triggered === false) {\n      for (key in this.bindings) {\n        // Check if this binding matches the pressed key\n        if (parseInt(key, 10) === keyCode) {\n          let action = this.bindings[key].callback\n\n          // Callback function\n          if (typeof action === \"function\") {\n            action.apply(null, [event])\n          }\n          // String shortcuts to reveal.js API\n          else if (\n            typeof action === \"string\" &&\n            typeof this.Reveal[action] === \"function\"\n          ) {\n            this.Reveal[action].call()\n          }\n\n          triggered = true\n        }\n      }\n    }\n\n    // 3. System defined key bindings\n    if (triggered === false) {\n      // Assume true and try to prove false\n      triggered = true\n\n      // P, PAGE UP\n      if (keyCode === 80 || keyCode === 33) {\n        this.Reveal.prev({\n          skipFragments: event.altKey,\n        })\n      }\n      // N, PAGE DOWN\n      else if (keyCode === 78 || keyCode === 34) {\n        this.Reveal.next({\n          skipFragments: event.altKey,\n        })\n      }\n      // H, LEFT\n      else if (keyCode === 72 || keyCode === 37) {\n        if (event.shiftKey) {\n          this.Reveal.slide(0)\n        } else if (\n          !this.Reveal.overview.isActive() &&\n          useLinearMode\n        ) {\n          this.Reveal.prev({\n            skipFragments: event.altKey,\n          })\n        } else {\n          this.Reveal.left({\n            skipFragments: event.altKey,\n          })\n        }\n      }\n      // L, RIGHT\n      else if (keyCode === 76 || keyCode === 39) {\n        if (event.shiftKey) {\n          this.Reveal.slide(\n            this.Reveal.getHorizontalSlides().length -\n              1\n          )\n        } else if (\n          !this.Reveal.overview.isActive() &&\n          useLinearMode\n        ) {\n          this.Reveal.next({\n            skipFragments: event.altKey,\n          })\n        } else {\n          this.Reveal.right({\n            skipFragments: event.altKey,\n          })\n        }\n      }\n      // K, UP\n      else if (keyCode === 75 || keyCode === 38) {\n        if (event.shiftKey) {\n          this.Reveal.slide(undefined, 0)\n        } else if (\n          !this.Reveal.overview.isActive() &&\n          useLinearMode\n        ) {\n          this.Reveal.prev({\n            skipFragments: event.altKey,\n          })\n        } else {\n          this.Reveal.up({\n            skipFragments: event.altKey,\n          })\n        }\n      }\n      // J, DOWN\n      else if (keyCode === 74 || keyCode === 40) {\n        if (event.shiftKey) {\n          this.Reveal.slide(\n            undefined,\n            Number.MAX_VALUE\n          )\n        } else if (\n          !this.Reveal.overview.isActive() &&\n          useLinearMode\n        ) {\n          this.Reveal.next({\n            skipFragments: event.altKey,\n          })\n        } else {\n          this.Reveal.down({\n            skipFragments: event.altKey,\n          })\n        }\n      }\n      // HOME\n      else if (keyCode === 36) {\n        this.Reveal.slide(0)\n      }\n      // END\n      else if (keyCode === 35) {\n        this.Reveal.slide(\n          this.Reveal.getHorizontalSlides().length - 1\n        )\n      }\n      // SPACE\n      else if (keyCode === 32) {\n        if (this.Reveal.overview.isActive()) {\n          this.Reveal.overview.deactivate()\n        }\n        if (event.shiftKey) {\n          this.Reveal.prev({\n            skipFragments: event.altKey,\n          })\n        } else {\n          this.Reveal.next({\n            skipFragments: event.altKey,\n          })\n        }\n      }\n      // TWO-SPOT, SEMICOLON, B, V, PERIOD, LOGITECH PRESENTER TOOLS \"BLACK SCREEN\" BUTTON\n      else if (\n        keyCode === 58 ||\n        keyCode === 59 ||\n        keyCode === 66 ||\n        keyCode === 86 ||\n        keyCode === 190 ||\n        keyCode === 191\n      ) {\n        this.Reveal.togglePause()\n      }\n      // F\n      else if (keyCode === 70) {\n        enterFullscreen(\n          config.embedded\n            ? this.Reveal.getViewportElement()\n            : document.documentElement\n        )\n      }\n      // A\n      else if (keyCode === 65) {\n        if (config.autoSlideStoppable) {\n          this.Reveal.toggleAutoSlide(\n            autoSlideWasPaused\n          )\n        }\n      } else {\n        triggered = false\n      }\n    }\n\n    // If the input resulted in a triggered action we should prevent\n    // the browsers default behavior\n    if (triggered) {\n      event.preventDefault && event.preventDefault()\n    }\n    // ESC or O key\n    else if (keyCode === 27 || keyCode === 79) {\n      if (this.Reveal.closeOverlay() === false) {\n        this.Reveal.overview.toggle()\n      }\n\n      event.preventDefault && event.preventDefault()\n    }\n\n    // If auto-sliding is enabled we need to cue up\n    // another timeout\n    this.Reveal.cueAutoSlide()\n  }\n}\n","/**\n * Reads and writes the URL based on reveal.js' current state.\n */\nexport default class Location {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    // Delays updates to the URL due to a Chrome thumbnailer bug\n    this.writeURLTimeout = 0\n\n    this.onWindowHashChange =\n      this.onWindowHashChange.bind(this)\n  }\n\n  bind() {\n    window.addEventListener(\n      \"hashchange\",\n      this.onWindowHashChange,\n      false\n    )\n  }\n\n  unbind() {\n    window.removeEventListener(\n      \"hashchange\",\n      this.onWindowHashChange,\n      false\n    )\n  }\n\n  /**\n   * Returns the slide indices for the given hash link.\n   *\n   * @param {string} [hash] the hash string that we want to\n   * find the indices for\n   *\n   * @returns slide indices or null\n   */\n  getIndicesFromHash(hash = window.location.hash) {\n    // Attempt to parse the hash as either an index or name\n    let name = hash.replace(/^#\\/?/, \"\")\n    let bits = name.split(\"/\")\n\n    // If the first bit is not fully numeric and there is a name we\n    // can assume that this is a named link\n    if (!/^[0-9]*$/.test(bits[0]) && name.length) {\n      let element\n\n      let f\n\n      // Parse named links with fragments (#/named-link/2)\n      if (/\\/[-\\d]+$/g.test(name)) {\n        f = parseInt(name.split(\"/\").pop(), 10)\n        f = isNaN(f) ? undefined : f\n        name = name.split(\"/\").shift()\n      }\n\n      // Ensure the named link is a valid HTML ID attribute\n      try {\n        element = document.getElementById(\n          decodeURIComponent(name)\n        )\n      } catch (error) {}\n\n      if (element) {\n        return {\n          ...this.Reveal.getIndices(element),\n          f,\n        }\n      }\n    } else {\n      const config = this.Reveal.getConfig()\n      let hashIndexBase = config.hashOneBasedIndex\n        ? 1\n        : 0\n\n      // Read the index components of the hash\n      let h =\n          parseInt(bits[0], 10) - hashIndexBase || 0,\n        v = parseInt(bits[1], 10) - hashIndexBase || 0,\n        f\n\n      if (config.fragmentInURL) {\n        f = parseInt(bits[2], 10)\n        if (isNaN(f)) {\n          f = undefined\n        }\n      }\n\n      return { h, v, f }\n    }\n\n    // The hash couldn't be parsed or no matching named link was found\n    return null\n  }\n\n  /**\n   * Reads the current URL (hash) and navigates accordingly.\n   */\n  readURL() {\n    const currentIndices = this.Reveal.getIndices()\n    const newIndices = this.getIndicesFromHash()\n\n    if (newIndices) {\n      if (\n        newIndices.h !== currentIndices.h ||\n        newIndices.v !== currentIndices.v ||\n        newIndices.f !== undefined\n      ) {\n        this.Reveal.slide(\n          newIndices.h,\n          newIndices.v,\n          newIndices.f\n        )\n      }\n    }\n    // If no new indices are available, we're trying to navigate to\n    // a slide hash that does not exist\n    else {\n      this.Reveal.slide(\n        currentIndices.h || 0,\n        currentIndices.v || 0\n      )\n    }\n  }\n\n  /**\n   * Updates the page URL (hash) to reflect the current\n   * state.\n   *\n   * @param {number} delay The time in ms to wait before\n   * writing the hash\n   */\n  writeURL(delay) {\n    let config = this.Reveal.getConfig()\n    let currentSlide = this.Reveal.getCurrentSlide()\n\n    // Make sure there's never more than one timeout running\n    clearTimeout(this.writeURLTimeout)\n\n    // If a delay is specified, timeout this call\n    if (typeof delay === \"number\") {\n      this.writeURLTimeout = setTimeout(\n        this.writeURL,\n        delay\n      )\n    } else if (currentSlide) {\n      let hash = this.getHash()\n\n      // If we're configured to push to history OR the history\n      // API is not avaialble.\n      if (config.history) {\n        window.location.hash = hash\n      }\n      // If we're configured to reflect the current slide in the\n      // URL without pushing to history.\n      else if (config.hash) {\n        // If the hash is empty, don't add it to the URL\n        if (hash === \"/\") {\n          window.history.replaceState(\n            null,\n            null,\n            window.location.pathname +\n              window.location.search\n          )\n        } else {\n          window.history.replaceState(\n            null,\n            null,\n            \"#\" + hash\n          )\n        }\n      }\n      // UPDATE: The below nuking of all hash changes breaks\n      // anchors on pages where reveal.js is running. Removed\n      // in 4.0. Why was it here in the first place? ¯\\_(ツ)_/¯\n      //\n      // If history and hash are both disabled, a hash may still\n      // be added to the URL by clicking on a href with a hash\n      // target. Counter this by always removing the hash.\n      // else {\n      // \twindow.history.replaceState( null, null, window.location.pathname + window.location.search );\n      // }\n    }\n  }\n\n  /**\n   * Return a hash URL that will resolve to the given slide location.\n   *\n   * @param {HTMLElement} [slide=currentSlide] The slide to link to\n   */\n  getHash(slide) {\n    let url = \"/\"\n\n    // Attempt to create a named link based on the slide's ID\n    let s = slide || this.Reveal.getCurrentSlide()\n    let id = s ? s.getAttribute(\"id\") : null\n    if (id) {\n      id = encodeURIComponent(id)\n    }\n\n    let index = this.Reveal.getIndices(slide)\n    if (!this.Reveal.getConfig().fragmentInURL) {\n      index.f = undefined\n    }\n\n    // If the current slide has an ID, use that as a named link,\n    // but we don't support named links with a fragment index\n    if (typeof id === \"string\" && id.length) {\n      url = \"/\" + id\n\n      // If there is also a fragment, append that at the end\n      // of the named link, like: #/named-link/2\n      if (index.f >= 0) url += \"/\" + index.f\n    }\n    // Otherwise use the /h/v index\n    else {\n      let hashIndexBase = this.Reveal.getConfig()\n        .hashOneBasedIndex\n        ? 1\n        : 0\n      if (index.h > 0 || index.v > 0 || index.f >= 0)\n        url += index.h + hashIndexBase\n      if (index.v > 0 || index.f >= 0)\n        url += \"/\" + (index.v + hashIndexBase)\n      if (index.f >= 0) url += \"/\" + index.f\n    }\n\n    return url\n  }\n\n  /**\n   * Handler for the window level 'hashchange' event.\n   *\n   * @param {object} [event]\n   */\n  onWindowHashChange(event) {\n    this.readURL()\n  }\n}\n","import { queryAll } from \"../utils/util.js\"\nimport { isAndroid } from \"../utils/device.js\"\n\n/**\n * Manages our presentation controls. This includes both\n * the built-in control arrows as well as event monitoring\n * of any elements within the presentation with either of the\n * following helper classes:\n * - .navigate-up\n * - .navigate-right\n * - .navigate-down\n * - .navigate-left\n * - .navigate-next\n * - .navigate-prev\n */\nexport default class Controls {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    this.onNavigateLeftClicked =\n      this.onNavigateLeftClicked.bind(this)\n    this.onNavigateRightClicked =\n      this.onNavigateRightClicked.bind(this)\n    this.onNavigateUpClicked =\n      this.onNavigateUpClicked.bind(this)\n    this.onNavigateDownClicked =\n      this.onNavigateDownClicked.bind(this)\n    this.onNavigatePrevClicked =\n      this.onNavigatePrevClicked.bind(this)\n    this.onNavigateNextClicked =\n      this.onNavigateNextClicked.bind(this)\n  }\n\n  render() {\n    const rtl = this.Reveal.getConfig().rtl\n    const revealElement =\n      this.Reveal.getRevealElement()\n\n    this.element = document.createElement(\"aside\")\n    this.element.className = \"controls\"\n    this.element.innerHTML = `<button class=\"navigate-left\" aria-label=\"${\n      rtl ? \"next slide\" : \"previous slide\"\n    }\"><div class=\"controls-arrow\"></div></button>\n\t\t\t<button class=\"navigate-right\" aria-label=\"${\n        rtl ? \"previous slide\" : \"next slide\"\n      }\"><div class=\"controls-arrow\"></div></button>\n\t\t\t<button class=\"navigate-up\" aria-label=\"above slide\"><div class=\"controls-arrow\"></div></button>\n\t\t\t<button class=\"navigate-down\" aria-label=\"below slide\"><div class=\"controls-arrow\"></div></button>`\n\n    this.Reveal.getRevealElement().appendChild(\n      this.element\n    )\n\n    // There can be multiple instances of controls throughout the page\n    this.controlsLeft = queryAll(\n      revealElement,\n      \".navigate-left\"\n    )\n    this.controlsRight = queryAll(\n      revealElement,\n      \".navigate-right\"\n    )\n    this.controlsUp = queryAll(\n      revealElement,\n      \".navigate-up\"\n    )\n    this.controlsDown = queryAll(\n      revealElement,\n      \".navigate-down\"\n    )\n    this.controlsPrev = queryAll(\n      revealElement,\n      \".navigate-prev\"\n    )\n    this.controlsNext = queryAll(\n      revealElement,\n      \".navigate-next\"\n    )\n\n    // The left, right and down arrows in the standard reveal.js controls\n    this.controlsRightArrow =\n      this.element.querySelector(\".navigate-right\")\n    this.controlsLeftArrow =\n      this.element.querySelector(\".navigate-left\")\n    this.controlsDownArrow =\n      this.element.querySelector(\".navigate-down\")\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    this.element.style.display = config.controls\n      ? \"block\"\n      : \"none\"\n\n    this.element.setAttribute(\n      \"data-controls-layout\",\n      config.controlsLayout\n    )\n    this.element.setAttribute(\n      \"data-controls-back-arrows\",\n      config.controlsBackArrows\n    )\n  }\n\n  bind() {\n    // Listen to both touch and click events, in case the device\n    // supports both\n    let pointerEvents = [\"touchstart\", \"click\"]\n\n    // Only support touch for Android, fixes double navigations in\n    // stock browser\n    if (isAndroid) {\n      pointerEvents = [\"touchstart\"]\n    }\n\n    pointerEvents.forEach((eventName) => {\n      this.controlsLeft.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigateLeftClicked,\n          false\n        )\n      )\n      this.controlsRight.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigateRightClicked,\n          false\n        )\n      )\n      this.controlsUp.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigateUpClicked,\n          false\n        )\n      )\n      this.controlsDown.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigateDownClicked,\n          false\n        )\n      )\n      this.controlsPrev.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigatePrevClicked,\n          false\n        )\n      )\n      this.controlsNext.forEach((el) =>\n        el.addEventListener(\n          eventName,\n          this.onNavigateNextClicked,\n          false\n        )\n      )\n    })\n  }\n\n  unbind() {\n    ;[\"touchstart\", \"click\"].forEach((eventName) => {\n      this.controlsLeft.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigateLeftClicked,\n          false\n        )\n      )\n      this.controlsRight.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigateRightClicked,\n          false\n        )\n      )\n      this.controlsUp.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigateUpClicked,\n          false\n        )\n      )\n      this.controlsDown.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigateDownClicked,\n          false\n        )\n      )\n      this.controlsPrev.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigatePrevClicked,\n          false\n        )\n      )\n      this.controlsNext.forEach((el) =>\n        el.removeEventListener(\n          eventName,\n          this.onNavigateNextClicked,\n          false\n        )\n      )\n    })\n  }\n\n  /**\n   * Updates the state of all control/navigation arrows.\n   */\n  update() {\n    let routes = this.Reveal.availableRoutes()\n\n    // Remove the 'enabled' class from all directions\n    ;[\n      ...this.controlsLeft,\n      ...this.controlsRight,\n      ...this.controlsUp,\n      ...this.controlsDown,\n      ...this.controlsPrev,\n      ...this.controlsNext,\n    ].forEach((node) => {\n      node.classList.remove(\"enabled\", \"fragmented\")\n\n      // Set 'disabled' attribute on all directions\n      node.setAttribute(\"disabled\", \"disabled\")\n    })\n\n    // Add the 'enabled' class to the available routes; remove 'disabled' attribute to enable buttons\n    if (routes.left)\n      this.controlsLeft.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n    if (routes.right)\n      this.controlsRight.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n    if (routes.up)\n      this.controlsUp.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n    if (routes.down)\n      this.controlsDown.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n\n    // Prev/next buttons\n    if (routes.left || routes.up)\n      this.controlsPrev.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n    if (routes.right || routes.down)\n      this.controlsNext.forEach((el) => {\n        el.classList.add(\"enabled\")\n        el.removeAttribute(\"disabled\")\n      })\n\n    // Highlight fragment directions\n    let currentSlide = this.Reveal.getCurrentSlide()\n    if (currentSlide) {\n      let fragmentsRoutes =\n        this.Reveal.fragments.availableRoutes()\n\n      // Always apply fragment decorator to prev/next buttons\n      if (fragmentsRoutes.prev)\n        this.controlsPrev.forEach((el) => {\n          el.classList.add(\"fragmented\", \"enabled\")\n          el.removeAttribute(\"disabled\")\n        })\n      if (fragmentsRoutes.next)\n        this.controlsNext.forEach((el) => {\n          el.classList.add(\"fragmented\", \"enabled\")\n          el.removeAttribute(\"disabled\")\n        })\n\n      // Apply fragment decorators to directional buttons based on\n      // what slide axis they are in\n      if (this.Reveal.isVerticalSlide(currentSlide)) {\n        if (fragmentsRoutes.prev)\n          this.controlsUp.forEach((el) => {\n            el.classList.add(\"fragmented\", \"enabled\")\n            el.removeAttribute(\"disabled\")\n          })\n        if (fragmentsRoutes.next)\n          this.controlsDown.forEach((el) => {\n            el.classList.add(\"fragmented\", \"enabled\")\n            el.removeAttribute(\"disabled\")\n          })\n      } else {\n        if (fragmentsRoutes.prev)\n          this.controlsLeft.forEach((el) => {\n            el.classList.add(\"fragmented\", \"enabled\")\n            el.removeAttribute(\"disabled\")\n          })\n        if (fragmentsRoutes.next)\n          this.controlsRight.forEach((el) => {\n            el.classList.add(\"fragmented\", \"enabled\")\n            el.removeAttribute(\"disabled\")\n          })\n      }\n    }\n\n    if (this.Reveal.getConfig().controlsTutorial) {\n      let indices = this.Reveal.getIndices()\n\n      // Highlight control arrows with an animation to ensure\n      // that the viewer knows how to navigate\n      if (\n        !this.Reveal.hasNavigatedVertically() &&\n        routes.down\n      ) {\n        this.controlsDownArrow.classList.add(\n          \"highlight\"\n        )\n      } else {\n        this.controlsDownArrow.classList.remove(\n          \"highlight\"\n        )\n\n        if (this.Reveal.getConfig().rtl) {\n          if (\n            !this.Reveal.hasNavigatedHorizontally() &&\n            routes.left &&\n            indices.v === 0\n          ) {\n            this.controlsLeftArrow.classList.add(\n              \"highlight\"\n            )\n          } else {\n            this.controlsLeftArrow.classList.remove(\n              \"highlight\"\n            )\n          }\n        } else {\n          if (\n            !this.Reveal.hasNavigatedHorizontally() &&\n            routes.right &&\n            indices.v === 0\n          ) {\n            this.controlsRightArrow.classList.add(\n              \"highlight\"\n            )\n          } else {\n            this.controlsRightArrow.classList.remove(\n              \"highlight\"\n            )\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Event handlers for navigation control buttons.\n   */\n  onNavigateLeftClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    if (\n      this.Reveal.getConfig().navigationMode ===\n      \"linear\"\n    ) {\n      this.Reveal.prev()\n    } else {\n      this.Reveal.left()\n    }\n  }\n\n  onNavigateRightClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    if (\n      this.Reveal.getConfig().navigationMode ===\n      \"linear\"\n    ) {\n      this.Reveal.next()\n    } else {\n      this.Reveal.right()\n    }\n  }\n\n  onNavigateUpClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    this.Reveal.up()\n  }\n\n  onNavigateDownClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    this.Reveal.down()\n  }\n\n  onNavigatePrevClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    this.Reveal.prev()\n  }\n\n  onNavigateNextClicked(event) {\n    event.preventDefault()\n    this.Reveal.onUserInput()\n\n    this.Reveal.next()\n  }\n}\n","/**\n * Creates a visual progress bar for the presentation.\n */\nexport default class Progress {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    this.onProgressClicked =\n      this.onProgressClicked.bind(this)\n  }\n\n  render() {\n    this.element = document.createElement(\"div\")\n    this.element.className = \"progress\"\n    this.Reveal.getRevealElement().appendChild(\n      this.element\n    )\n\n    this.bar = document.createElement(\"span\")\n    this.element.appendChild(this.bar)\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    this.element.style.display = config.progress\n      ? \"block\"\n      : \"none\"\n  }\n\n  bind() {\n    if (\n      this.Reveal.getConfig().progress &&\n      this.element\n    ) {\n      this.element.addEventListener(\n        \"click\",\n        this.onProgressClicked,\n        false\n      )\n    }\n  }\n\n  unbind() {\n    if (\n      this.Reveal.getConfig().progress &&\n      this.element\n    ) {\n      this.element.removeEventListener(\n        \"click\",\n        this.onProgressClicked,\n        false\n      )\n    }\n  }\n\n  /**\n   * Updates the progress bar to reflect the current slide.\n   */\n  update() {\n    // Update progress if enabled\n    if (this.Reveal.getConfig().progress && this.bar) {\n      let scale = this.Reveal.getProgress()\n\n      // Don't fill the progress bar if there's only one slide\n      if (this.Reveal.getTotalSlides() < 2) {\n        scale = 0\n      }\n\n      this.bar.style.transform =\n        \"scaleX(\" + scale + \")\"\n    }\n  }\n\n  getMaxWidth() {\n    return this.Reveal.getRevealElement().offsetWidth\n  }\n\n  /**\n   * Clicking on the progress bar results in a navigation to the\n   * closest approximate horizontal slide using this equation:\n   *\n   * ( clickX / presentationWidth ) * numberOfSlides\n   *\n   * @param {object} event\n   */\n  onProgressClicked(event) {\n    this.Reveal.onUserInput(event)\n\n    event.preventDefault()\n\n    let slides = this.Reveal.getSlides()\n    let slidesTotal = slides.length\n    let slideIndex = Math.floor(\n      (event.clientX / this.getMaxWidth()) *\n        slidesTotal\n    )\n\n    if (this.Reveal.getConfig().rtl) {\n      slideIndex = slidesTotal - slideIndex\n    }\n\n    let targetIndices = this.Reveal.getIndices(\n      slides[slideIndex]\n    )\n    this.Reveal.slide(targetIndices.h, targetIndices.v)\n  }\n}\n","/**\n * Handles hiding of the pointer/cursor when inactive.\n */\nexport default class Pointer {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    // Throttles mouse wheel navigation\n    this.lastMouseWheelStep = 0\n\n    // Is the mouse pointer currently hidden from view\n    this.cursorHidden = false\n\n    // Timeout used to determine when the cursor is inactive\n    this.cursorInactiveTimeout = 0\n\n    this.onDocumentCursorActive =\n      this.onDocumentCursorActive.bind(this)\n    this.onDocumentMouseScroll =\n      this.onDocumentMouseScroll.bind(this)\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    if (config.mouseWheel) {\n      document.addEventListener(\n        \"DOMMouseScroll\",\n        this.onDocumentMouseScroll,\n        false\n      ) // FF\n      document.addEventListener(\n        \"mousewheel\",\n        this.onDocumentMouseScroll,\n        false\n      )\n    } else {\n      document.removeEventListener(\n        \"DOMMouseScroll\",\n        this.onDocumentMouseScroll,\n        false\n      ) // FF\n      document.removeEventListener(\n        \"mousewheel\",\n        this.onDocumentMouseScroll,\n        false\n      )\n    }\n\n    // Auto-hide the mouse pointer when its inactive\n    if (config.hideInactiveCursor) {\n      document.addEventListener(\n        \"mousemove\",\n        this.onDocumentCursorActive,\n        false\n      )\n      document.addEventListener(\n        \"mousedown\",\n        this.onDocumentCursorActive,\n        false\n      )\n    } else {\n      this.showCursor()\n\n      document.removeEventListener(\n        \"mousemove\",\n        this.onDocumentCursorActive,\n        false\n      )\n      document.removeEventListener(\n        \"mousedown\",\n        this.onDocumentCursorActive,\n        false\n      )\n    }\n  }\n\n  /**\n   * Shows the mouse pointer after it has been hidden with\n   * #hideCursor.\n   */\n  showCursor() {\n    if (this.cursorHidden) {\n      this.cursorHidden = false\n      this.Reveal.getRevealElement().style.cursor = \"\"\n    }\n  }\n\n  /**\n   * Hides the mouse pointer when it's on top of the .reveal\n   * container.\n   */\n  hideCursor() {\n    if (this.cursorHidden === false) {\n      this.cursorHidden = true\n      this.Reveal.getRevealElement().style.cursor =\n        \"none\"\n    }\n  }\n\n  /**\n   * Called whenever there is mouse input at the document level\n   * to determine if the cursor is active or not.\n   *\n   * @param {object} event\n   */\n  onDocumentCursorActive(event) {\n    this.showCursor()\n\n    clearTimeout(this.cursorInactiveTimeout)\n\n    this.cursorInactiveTimeout = setTimeout(\n      this.hideCursor.bind(this),\n      this.Reveal.getConfig().hideCursorTime\n    )\n  }\n\n  /**\n   * Handles mouse wheel scrolling, throttled to avoid skipping\n   * multiple slides.\n   *\n   * @param {object} event\n   */\n  onDocumentMouseScroll(event) {\n    if (Date.now() - this.lastMouseWheelStep > 1000) {\n      this.lastMouseWheelStep = Date.now()\n\n      let delta = event.detail || -event.wheelDelta\n      if (delta > 0) {\n        this.Reveal.next()\n      } else if (delta < 0) {\n        this.Reveal.prev()\n      }\n    }\n  }\n}\n","/**\n * Loads a JavaScript file from the given URL and executes it.\n *\n * @param {string} url Address of the .js file to load\n * @param {function} callback Method to invoke when the script\n * has loaded and executed\n */\nexport const loadScript = (url, callback) => {\n  const script = document.createElement(\"script\")\n  script.type = \"text/javascript\"\n  script.async = false\n  script.defer = false\n  script.src = url\n\n  if (typeof callback === \"function\") {\n    // Success callback\n    script.onload = script.onreadystatechange = (\n      event\n    ) => {\n      if (\n        event.type === \"load\" ||\n        /loaded|complete/.test(script.readyState)\n      ) {\n        // Kill event listeners\n        script.onload =\n          script.onreadystatechange =\n          script.onerror =\n            null\n\n        callback()\n      }\n    }\n\n    // Error callback\n    script.onerror = (err) => {\n      // Kill event listeners\n      script.onload =\n        script.onreadystatechange =\n        script.onerror =\n          null\n\n      callback(\n        new Error(\n          \"Failed loading script: \" +\n            script.src +\n            \"\\n\" +\n            err\n        )\n      )\n    }\n  }\n\n  // Append the script at the end of <head>\n  const head = document.querySelector(\"head\")\n  head.insertBefore(script, head.lastChild)\n}\n","import { loadScript } from \"../utils/loader.js\"\n\n/**\n * Manages loading and registering of reveal.js plugins.\n */\nexport default class Plugins {\n  constructor(reveal) {\n    this.Reveal = reveal\n\n    // Flags our current state (idle -> loading -> loaded)\n    this.state = \"idle\"\n\n    // An id:instance map of currently registed plugins\n    this.registeredPlugins = {}\n\n    this.asyncDependencies = []\n  }\n\n  /**\n   * Loads reveal.js dependencies, registers and\n   * initializes plugins.\n   *\n   * Plugins are direct references to a reveal.js plugin\n   * object that we register and initialize after any\n   * synchronous dependencies have loaded.\n   *\n   * Dependencies are defined via the 'dependencies' config\n   * option and will be loaded prior to starting reveal.js.\n   * Some dependencies may have an 'async' flag, if so they\n   * will load after reveal.js has been started up.\n   */\n  load(plugins, dependencies) {\n    this.state = \"loading\"\n\n    plugins.forEach(this.registerPlugin.bind(this))\n\n    return new Promise((resolve) => {\n      let scripts = [],\n        scriptsToLoad = 0\n\n      dependencies.forEach((s) => {\n        // Load if there's no condition or the condition is truthy\n        if (!s.condition || s.condition()) {\n          if (s.async) {\n            this.asyncDependencies.push(s)\n          } else {\n            scripts.push(s)\n          }\n        }\n      })\n\n      if (scripts.length) {\n        scriptsToLoad = scripts.length\n\n        const scriptLoadedCallback = (s) => {\n          if (s && typeof s.callback === \"function\")\n            s.callback()\n\n          if (--scriptsToLoad === 0) {\n            this.initPlugins().then(resolve)\n          }\n        }\n\n        // Load synchronous scripts\n        scripts.forEach((s) => {\n          if (typeof s.id === \"string\") {\n            this.registerPlugin(s)\n            scriptLoadedCallback(s)\n          } else if (typeof s.src === \"string\") {\n            loadScript(s.src, () =>\n              scriptLoadedCallback(s)\n            )\n          } else {\n            console.warn(\n              \"Unrecognized plugin format\",\n              s\n            )\n            scriptLoadedCallback()\n          }\n        })\n      } else {\n        this.initPlugins().then(resolve)\n      }\n    })\n  }\n\n  /**\n   * Initializes our plugins and waits for them to be ready\n   * before proceeding.\n   */\n  initPlugins() {\n    return new Promise((resolve) => {\n      let pluginValues = Object.values(\n        this.registeredPlugins\n      )\n      let pluginsToInitialize = pluginValues.length\n\n      // If there are no plugins, skip this step\n      if (pluginsToInitialize === 0) {\n        this.loadAsync().then(resolve)\n      }\n      // ... otherwise initialize plugins\n      else {\n        let initNextPlugin\n\n        let afterPlugInitialized = () => {\n          if (--pluginsToInitialize === 0) {\n            this.loadAsync().then(resolve)\n          } else {\n            initNextPlugin()\n          }\n        }\n\n        let i = 0\n\n        // Initialize plugins serially\n        initNextPlugin = () => {\n          let plugin = pluginValues[i++]\n\n          // If the plugin has an 'init' method, invoke it\n          if (typeof plugin.init === \"function\") {\n            let promise = plugin.init(this.Reveal)\n\n            // If the plugin returned a Promise, wait for it\n            if (\n              promise &&\n              typeof promise.then === \"function\"\n            ) {\n              promise.then(afterPlugInitialized)\n            } else {\n              afterPlugInitialized()\n            }\n          } else {\n            afterPlugInitialized()\n          }\n        }\n\n        initNextPlugin()\n      }\n    })\n  }\n\n  /**\n   * Loads all async reveal.js dependencies.\n   */\n  loadAsync() {\n    this.state = \"loaded\"\n\n    if (this.asyncDependencies.length) {\n      this.asyncDependencies.forEach((s) => {\n        loadScript(s.src, s.callback)\n      })\n    }\n\n    return Promise.resolve()\n  }\n\n  /**\n   * Registers a new plugin with this reveal.js instance.\n   *\n   * reveal.js waits for all regisered plugins to initialize\n   * before considering itself ready, as long as the plugin\n   * is registered before calling `Reveal.initialize()`.\n   */\n  registerPlugin(plugin) {\n    // Backwards compatibility to make reveal.js ~3.9.0\n    // plugins work with reveal.js 4.0.0\n    if (\n      arguments.length === 2 &&\n      typeof arguments[0] === \"string\"\n    ) {\n      plugin = arguments[1]\n      plugin.id = arguments[0]\n    }\n    // Plugin can optionally be a function which we call\n    // to create an instance of the plugin\n    else if (typeof plugin === \"function\") {\n      plugin = plugin()\n    }\n\n    let id = plugin.id\n\n    if (typeof id !== \"string\") {\n      console.warn(\n        \"Unrecognized plugin format; can't find plugin.id\",\n        plugin\n      )\n    } else if (\n      this.registeredPlugins[id] === undefined\n    ) {\n      this.registeredPlugins[id] = plugin\n\n      // If a plugin is registered after reveal.js is loaded,\n      // initialize it right away\n      if (\n        this.state === \"loaded\" &&\n        typeof plugin.init === \"function\"\n      ) {\n        plugin.init(this.Reveal)\n      }\n    } else {\n      console.warn(\n        'reveal.js: \"' +\n          id +\n          '\" plugin has already been registered'\n      )\n    }\n  }\n\n  /**\n   * Checks if a specific plugin has been registered.\n   *\n   * @param {String} id Unique plugin identifier\n   */\n  hasPlugin(id) {\n    return !!this.registeredPlugins[id]\n  }\n\n  /**\n   * Returns the specific plugin instance, if a plugin\n   * with the given ID has been registered.\n   *\n   * @param {String} id Unique plugin identifier\n   */\n  getPlugin(id) {\n    return this.registeredPlugins[id]\n  }\n\n  getRegisteredPlugins() {\n    return this.registeredPlugins\n  }\n}\n","import { SLIDES_SELECTOR } from \"../utils/constants.js\"\nimport {\n  queryAll,\n  createStyleSheet,\n} from \"../utils/util.js\"\n\n/**\n * Setups up our presentation for printing/exporting to PDF.\n */\nexport default class Print {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  /**\n   * Configures the presentation for printing to a static\n   * PDF.\n   */\n  async setupPDF() {\n    const config = this.Reveal.getConfig()\n    const slides = queryAll(\n      this.Reveal.getRevealElement(),\n      SLIDES_SELECTOR\n    )\n\n    // Compute slide numbers now, before we start duplicating slides\n    const doingSlideNumbers =\n      config.slideNumber &&\n      /all|print/i.test(config.showSlideNumber)\n\n    const slideSize = this.Reveal.getComputedSlideSize(\n      window.innerWidth,\n      window.innerHeight\n    )\n\n    // Dimensions of the PDF pages\n    const pageWidth = Math.floor(\n        slideSize.width * (1 + config.margin)\n      ),\n      pageHeight = Math.floor(\n        slideSize.height * (1 + config.margin)\n      )\n\n    // Dimensions of slides within the pages\n    const slideWidth = slideSize.width,\n      slideHeight = slideSize.height\n\n    await new Promise(requestAnimationFrame)\n\n    // Let the browser know what page size we want to print\n    createStyleSheet(\n      \"@page{size:\" +\n        pageWidth +\n        \"px \" +\n        pageHeight +\n        \"px; margin: 0px;}\"\n    )\n\n    // Limit the size of certain elements to the dimensions of the slide\n    createStyleSheet(\n      \".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: \" +\n        slideWidth +\n        \"px; max-height:\" +\n        slideHeight +\n        \"px}\"\n    )\n\n    document.documentElement.classList.add(\"print-pdf\")\n    document.body.style.width = pageWidth + \"px\"\n    document.body.style.height = pageHeight + \"px\"\n\n    const viewportElement = document.querySelector(\n      \".reveal-viewport\"\n    )\n    let presentationBackground\n    if (viewportElement) {\n      const viewportStyles = window.getComputedStyle(\n        viewportElement\n      )\n      if (\n        viewportStyles &&\n        viewportStyles.background\n      ) {\n        presentationBackground =\n          viewportStyles.background\n      }\n    }\n\n    // Make sure stretch elements fit on slide\n    await new Promise(requestAnimationFrame)\n    this.Reveal.layoutSlideContents(\n      slideWidth,\n      slideHeight\n    )\n\n    // Batch scrollHeight access to prevent layout thrashing\n    await new Promise(requestAnimationFrame)\n\n    const slideScrollHeights = slides.map(\n      (slide) => slide.scrollHeight\n    )\n\n    const pages = []\n    const pageContainer = slides[0].parentNode\n\n    // Slide and slide background layout\n    slides.forEach(function (slide, index) {\n      // Vertical stacks are not centred since their section\n      // children will be\n      if (\n        slide.classList.contains(\"stack\") === false\n      ) {\n        // Center the slide inside of the page, giving the slide some margin\n        let left = (pageWidth - slideWidth) / 2\n        let top = (pageHeight - slideHeight) / 2\n\n        const contentHeight = slideScrollHeights[index]\n        let numberOfPages = Math.max(\n          Math.ceil(contentHeight / pageHeight),\n          1\n        )\n\n        // Adhere to configured pages per slide limit\n        numberOfPages = Math.min(\n          numberOfPages,\n          config.pdfMaxPagesPerSlide\n        )\n\n        // Center slides vertically\n        if (\n          (numberOfPages === 1 && config.center) ||\n          slide.classList.contains(\"center\")\n        ) {\n          top = Math.max(\n            (pageHeight - contentHeight) / 2,\n            0\n          )\n        }\n\n        // Wrap the slide in a page element and hide its overflow\n        // so that no page ever flows onto another\n        const page = document.createElement(\"div\")\n        pages.push(page)\n\n        page.className = \"pdf-page\"\n        page.style.height =\n          (pageHeight + config.pdfPageHeightOffset) *\n            numberOfPages +\n          \"px\"\n\n        // Copy the presentation-wide background to each individual\n        // page when printing\n        if (presentationBackground) {\n          page.style.background =\n            presentationBackground\n        }\n\n        page.appendChild(slide)\n\n        // Position the slide inside of the page\n        slide.style.left = left + \"px\"\n        slide.style.top = top + \"px\"\n        slide.style.width = slideWidth + \"px\"\n\n        // Re-run the slide layout so that r-fit-text is applied based on\n        // the printed slide size\n        this.Reveal.slideContent.layout(slide)\n\n        if (slide.slideBackgroundElement) {\n          page.insertBefore(\n            slide.slideBackgroundElement,\n            slide\n          )\n        }\n\n        // Inject notes if `showNotes` is enabled\n        if (config.showNotes) {\n          // Are there notes for this slide?\n          const notes =\n            this.Reveal.getSlideNotes(slide)\n          if (notes) {\n            const notesSpacing = 8\n            const notesLayout =\n              typeof config.showNotes === \"string\"\n                ? config.showNotes\n                : \"inline\"\n            const notesElement =\n              document.createElement(\"div\")\n            notesElement.classList.add(\"speaker-notes\")\n            notesElement.classList.add(\n              \"speaker-notes-pdf\"\n            )\n            notesElement.setAttribute(\n              \"data-layout\",\n              notesLayout\n            )\n            notesElement.innerHTML = notes\n\n            if (notesLayout === \"separate-page\") {\n              pages.push(notesElement)\n            } else {\n              notesElement.style.left =\n                notesSpacing + \"px\"\n              notesElement.style.bottom =\n                notesSpacing + \"px\"\n              notesElement.style.width =\n                pageWidth - notesSpacing * 2 + \"px\"\n              page.appendChild(notesElement)\n            }\n          }\n        }\n\n        // Inject slide numbers if `slideNumbers` are enabled\n        if (doingSlideNumbers) {\n          const slideNumber = index + 1\n          const numberElement =\n            document.createElement(\"div\")\n          numberElement.classList.add(\"slide-number\")\n          numberElement.classList.add(\n            \"slide-number-pdf\"\n          )\n          numberElement.innerHTML = slideNumber\n          page.appendChild(numberElement)\n        }\n\n        // Copy page and show fragments one after another\n        if (config.pdfSeparateFragments) {\n          // Each fragment 'group' is an array containing one or more\n          // fragments. Multiple fragments that appear at the same time\n          // are part of the same group.\n          const fragmentGroups =\n            this.Reveal.fragments.sort(\n              page.querySelectorAll(\".fragment\"),\n              true\n            )\n\n          let previousFragmentStep\n\n          fragmentGroups.forEach(function (fragments) {\n            // Remove 'current-fragment' from the previous group\n            if (previousFragmentStep) {\n              previousFragmentStep.forEach(function (\n                fragment\n              ) {\n                fragment.classList.remove(\n                  \"current-fragment\"\n                )\n              })\n            }\n\n            // Show the fragments for the current index\n            fragments.forEach(function (fragment) {\n              fragment.classList.add(\n                \"visible\",\n                \"current-fragment\"\n              )\n            }, this)\n\n            // Create a separate page for the current fragment state\n            const clonedPage = page.cloneNode(true)\n            pages.push(clonedPage)\n\n            previousFragmentStep = fragments\n          }, this)\n\n          // Reset the first/original page so that all fragments are hidden\n          fragmentGroups.forEach(function (fragments) {\n            fragments.forEach(function (fragment) {\n              fragment.classList.remove(\n                \"visible\",\n                \"current-fragment\"\n              )\n            })\n          })\n        }\n        // Show all fragments\n        else {\n          queryAll(\n            page,\n            \".fragment:not(.fade-out)\"\n          ).forEach(function (fragment) {\n            fragment.classList.add(\"visible\")\n          })\n        }\n      }\n    }, this)\n\n    await new Promise(requestAnimationFrame)\n\n    pages.forEach((page) =>\n      pageContainer.appendChild(page)\n    )\n\n    // Notify subscribers that the PDF layout is good to go\n    this.Reveal.dispatchEvent({ type: \"pdf-ready\" })\n  }\n\n  /**\n   * Checks if this instance is being used to print a PDF.\n   */\n  isPrintingPDF() {\n    return /print-pdf/gi.test(window.location.search)\n  }\n}\n","import { isAndroid } from \"../utils/device.js\"\nimport { matches } from \"../utils/util.js\"\n\nconst SWIPE_THRESHOLD = 40\n\n/**\n * Controls all touch interactions and navigations for\n * a presentation.\n */\nexport default class Touch {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    // Holds information about the currently ongoing touch interaction\n    this.touchStartX = 0\n    this.touchStartY = 0\n    this.touchStartCount = 0\n    this.touchCaptured = false\n\n    this.onPointerDown = this.onPointerDown.bind(this)\n    this.onPointerMove = this.onPointerMove.bind(this)\n    this.onPointerUp = this.onPointerUp.bind(this)\n    this.onTouchStart = this.onTouchStart.bind(this)\n    this.onTouchMove = this.onTouchMove.bind(this)\n    this.onTouchEnd = this.onTouchEnd.bind(this)\n  }\n\n  /**\n   *\n   */\n  bind() {\n    let revealElement = this.Reveal.getRevealElement()\n\n    if (\"onpointerdown\" in window) {\n      // Use W3C pointer events\n      revealElement.addEventListener(\n        \"pointerdown\",\n        this.onPointerDown,\n        false\n      )\n      revealElement.addEventListener(\n        \"pointermove\",\n        this.onPointerMove,\n        false\n      )\n      revealElement.addEventListener(\n        \"pointerup\",\n        this.onPointerUp,\n        false\n      )\n    } else if (window.navigator.msPointerEnabled) {\n      // IE 10 uses prefixed version of pointer events\n      revealElement.addEventListener(\n        \"MSPointerDown\",\n        this.onPointerDown,\n        false\n      )\n      revealElement.addEventListener(\n        \"MSPointerMove\",\n        this.onPointerMove,\n        false\n      )\n      revealElement.addEventListener(\n        \"MSPointerUp\",\n        this.onPointerUp,\n        false\n      )\n    } else {\n      // Fall back to touch events\n      revealElement.addEventListener(\n        \"touchstart\",\n        this.onTouchStart,\n        false\n      )\n      revealElement.addEventListener(\n        \"touchmove\",\n        this.onTouchMove,\n        false\n      )\n      revealElement.addEventListener(\n        \"touchend\",\n        this.onTouchEnd,\n        false\n      )\n    }\n  }\n\n  /**\n   *\n   */\n  unbind() {\n    let revealElement = this.Reveal.getRevealElement()\n\n    revealElement.removeEventListener(\n      \"pointerdown\",\n      this.onPointerDown,\n      false\n    )\n    revealElement.removeEventListener(\n      \"pointermove\",\n      this.onPointerMove,\n      false\n    )\n    revealElement.removeEventListener(\n      \"pointerup\",\n      this.onPointerUp,\n      false\n    )\n\n    revealElement.removeEventListener(\n      \"MSPointerDown\",\n      this.onPointerDown,\n      false\n    )\n    revealElement.removeEventListener(\n      \"MSPointerMove\",\n      this.onPointerMove,\n      false\n    )\n    revealElement.removeEventListener(\n      \"MSPointerUp\",\n      this.onPointerUp,\n      false\n    )\n\n    revealElement.removeEventListener(\n      \"touchstart\",\n      this.onTouchStart,\n      false\n    )\n    revealElement.removeEventListener(\n      \"touchmove\",\n      this.onTouchMove,\n      false\n    )\n    revealElement.removeEventListener(\n      \"touchend\",\n      this.onTouchEnd,\n      false\n    )\n  }\n\n  /**\n   * Checks if the target element prevents the triggering of\n   * swipe navigation.\n   */\n  isSwipePrevented(target) {\n    // Prevent accidental swipes when scrubbing timelines\n    if (matches(target, \"video, audio\")) return true\n\n    while (\n      target &&\n      typeof target.hasAttribute === \"function\"\n    ) {\n      if (target.hasAttribute(\"data-prevent-swipe\"))\n        return true\n      target = target.parentNode\n    }\n\n    return false\n  }\n\n  /**\n   * Handler for the 'touchstart' event, enables support for\n   * swipe and pinch gestures.\n   *\n   * @param {object} event\n   */\n  onTouchStart(event) {\n    if (this.isSwipePrevented(event.target))\n      return true\n\n    this.touchStartX = event.touches[0].clientX\n    this.touchStartY = event.touches[0].clientY\n    this.touchStartCount = event.touches.length\n  }\n\n  /**\n   * Handler for the 'touchmove' event.\n   *\n   * @param {object} event\n   */\n  onTouchMove(event) {\n    if (this.isSwipePrevented(event.target))\n      return true\n\n    let config = this.Reveal.getConfig()\n\n    // Each touch should only trigger one action\n    if (!this.touchCaptured) {\n      this.Reveal.onUserInput(event)\n\n      let currentX = event.touches[0].clientX\n      let currentY = event.touches[0].clientY\n\n      // There was only one touch point, look for a swipe\n      if (\n        event.touches.length === 1 &&\n        this.touchStartCount !== 2\n      ) {\n        let availableRoutes =\n          this.Reveal.availableRoutes({\n            includeFragments: true,\n          })\n\n        let deltaX = currentX - this.touchStartX,\n          deltaY = currentY - this.touchStartY\n\n        if (\n          deltaX > SWIPE_THRESHOLD &&\n          Math.abs(deltaX) > Math.abs(deltaY)\n        ) {\n          this.touchCaptured = true\n          if (config.navigationMode === \"linear\") {\n            if (config.rtl) {\n              this.Reveal.next()\n            } else {\n              this.Reveal.prev()\n            }\n          } else {\n            this.Reveal.left()\n          }\n        } else if (\n          deltaX < -SWIPE_THRESHOLD &&\n          Math.abs(deltaX) > Math.abs(deltaY)\n        ) {\n          this.touchCaptured = true\n          if (config.navigationMode === \"linear\") {\n            if (config.rtl) {\n              this.Reveal.prev()\n            } else {\n              this.Reveal.next()\n            }\n          } else {\n            this.Reveal.right()\n          }\n        } else if (\n          deltaY > SWIPE_THRESHOLD &&\n          availableRoutes.up\n        ) {\n          this.touchCaptured = true\n          if (config.navigationMode === \"linear\") {\n            this.Reveal.prev()\n          } else {\n            this.Reveal.up()\n          }\n        } else if (\n          deltaY < -SWIPE_THRESHOLD &&\n          availableRoutes.down\n        ) {\n          this.touchCaptured = true\n          if (config.navigationMode === \"linear\") {\n            this.Reveal.next()\n          } else {\n            this.Reveal.down()\n          }\n        }\n\n        // If we're embedded, only block touch events if they have\n        // triggered an action\n        if (config.embedded) {\n          if (\n            this.touchCaptured ||\n            this.Reveal.isVerticalSlide()\n          ) {\n            event.preventDefault()\n          }\n        }\n        // Not embedded? Block them all to avoid needless tossing\n        // around of the viewport in iOS\n        else {\n          event.preventDefault()\n        }\n      }\n    }\n    // There's a bug with swiping on some Android devices unless\n    // the default action is always prevented\n    else if (isAndroid) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Handler for the 'touchend' event.\n   *\n   * @param {object} event\n   */\n  onTouchEnd(event) {\n    this.touchCaptured = false\n  }\n\n  /**\n   * Convert pointer down to touch start.\n   *\n   * @param {object} event\n   */\n  onPointerDown(event) {\n    if (\n      event.pointerType ===\n        event.MSPOINTER_TYPE_TOUCH ||\n      event.pointerType === \"touch\"\n    ) {\n      event.touches = [\n        {\n          clientX: event.clientX,\n          clientY: event.clientY,\n        },\n      ]\n      this.onTouchStart(event)\n    }\n  }\n\n  /**\n   * Convert pointer move to touch move.\n   *\n   * @param {object} event\n   */\n  onPointerMove(event) {\n    if (\n      event.pointerType ===\n        event.MSPOINTER_TYPE_TOUCH ||\n      event.pointerType === \"touch\"\n    ) {\n      event.touches = [\n        {\n          clientX: event.clientX,\n          clientY: event.clientY,\n        },\n      ]\n      this.onTouchMove(event)\n    }\n  }\n\n  /**\n   * Convert pointer up to touch end.\n   *\n   * @param {object} event\n   */\n  onPointerUp(event) {\n    if (\n      event.pointerType ===\n        event.MSPOINTER_TYPE_TOUCH ||\n      event.pointerType === \"touch\"\n    ) {\n      event.touches = [\n        {\n          clientX: event.clientX,\n          clientY: event.clientY,\n        },\n      ]\n      this.onTouchEnd(event)\n    }\n  }\n}\n","import { closest } from \"../utils/util.js\"\n\n/**\n * Manages focus when a presentation is embedded. This\n * helps us only capture keyboard from the presentation\n * a user is currently interacting with in a page where\n * multiple presentations are embedded.\n */\n\nconst STATE_FOCUS = \"focus\"\nconst STATE_BLUR = \"blur\"\n\nexport default class Focus {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n\n    this.onRevealPointerDown =\n      this.onRevealPointerDown.bind(this)\n    this.onDocumentPointerDown =\n      this.onDocumentPointerDown.bind(this)\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    if (config.embedded) {\n      this.blur()\n    } else {\n      this.focus()\n      this.unbind()\n    }\n  }\n\n  bind() {\n    if (this.Reveal.getConfig().embedded) {\n      this.Reveal.getRevealElement().addEventListener(\n        \"pointerdown\",\n        this.onRevealPointerDown,\n        false\n      )\n    }\n  }\n\n  unbind() {\n    this.Reveal.getRevealElement().removeEventListener(\n      \"pointerdown\",\n      this.onRevealPointerDown,\n      false\n    )\n    document.removeEventListener(\n      \"pointerdown\",\n      this.onDocumentPointerDown,\n      false\n    )\n  }\n\n  focus() {\n    if (this.state !== STATE_FOCUS) {\n      this.Reveal.getRevealElement().classList.add(\n        \"focused\"\n      )\n      document.addEventListener(\n        \"pointerdown\",\n        this.onDocumentPointerDown,\n        false\n      )\n    }\n\n    this.state = STATE_FOCUS\n  }\n\n  blur() {\n    if (this.state !== STATE_BLUR) {\n      this.Reveal.getRevealElement().classList.remove(\n        \"focused\"\n      )\n      document.removeEventListener(\n        \"pointerdown\",\n        this.onDocumentPointerDown,\n        false\n      )\n    }\n\n    this.state = STATE_BLUR\n  }\n\n  isFocused() {\n    return this.state === STATE_FOCUS\n  }\n\n  onRevealPointerDown(event) {\n    this.focus()\n  }\n\n  onDocumentPointerDown(event) {\n    let revealElement = closest(\n      event.target,\n      \".reveal\"\n    )\n    if (\n      !revealElement ||\n      revealElement !== this.Reveal.getRevealElement()\n    ) {\n      this.blur()\n    }\n  }\n}\n","/**\n * Handles the showing and\n */\nexport default class Notes {\n  constructor(Reveal) {\n    this.Reveal = Reveal\n  }\n\n  render() {\n    this.element = document.createElement(\"div\")\n    this.element.className = \"speaker-notes\"\n    this.element.setAttribute(\"data-prevent-swipe\", \"\")\n    this.element.setAttribute(\"tabindex\", \"0\")\n    this.Reveal.getRevealElement().appendChild(\n      this.element\n    )\n  }\n\n  /**\n   * Called when the reveal.js config is updated.\n   */\n  configure(config, oldConfig) {\n    if (config.showNotes) {\n      this.element.setAttribute(\n        \"data-layout\",\n        typeof config.showNotes === \"string\"\n          ? config.showNotes\n          : \"inline\"\n      )\n    }\n  }\n\n  /**\n   * Pick up notes from the current slide and display them\n   * to the viewer.\n   *\n   * @see {@link config.showNotes}\n   */\n  update() {\n    if (\n      this.Reveal.getConfig().showNotes &&\n      this.element &&\n      this.Reveal.getCurrentSlide() &&\n      !this.Reveal.print.isPrintingPDF()\n    ) {\n      this.element.innerHTML =\n        this.getSlideNotes() ||\n        '<span class=\"notes-placeholder\">No notes on this slide.</span>'\n    }\n  }\n\n  /**\n   * Updates the visibility of the speaker notes sidebar that\n   * is used to share annotated slides. The notes sidebar is\n   * only visible if showNotes is true and there are notes on\n   * one or more slides in the deck.\n   */\n  updateVisibility() {\n    if (\n      this.Reveal.getConfig().showNotes &&\n      this.hasNotes() &&\n      !this.Reveal.print.isPrintingPDF()\n    ) {\n      this.Reveal.getRevealElement().classList.add(\n        \"show-notes\"\n      )\n    } else {\n      this.Reveal.getRevealElement().classList.remove(\n        \"show-notes\"\n      )\n    }\n  }\n\n  /**\n   * Checks if there are speaker notes for ANY slide in the\n   * presentation.\n   */\n  hasNotes() {\n    return (\n      this.Reveal.getSlidesElement().querySelectorAll(\n        \"[data-notes], aside.notes\"\n      ).length > 0\n    )\n  }\n\n  /**\n   * Checks if this presentation is running inside of the\n   * speaker notes window.\n   *\n   * @return {boolean}\n   */\n  isSpeakerNotesWindow() {\n    return !!window.location.search.match(/receiver/gi)\n  }\n\n  /**\n   * Retrieves the speaker notes from a slide. Notes can be\n   * defined in two ways:\n   * 1. As a data-notes attribute on the slide <section>\n   * 2. As an <aside class=\"notes\"> inside of the slide\n   *\n   * @param {HTMLElement} [slide=currentSlide]\n   * @return {(string|null)}\n   */\n  getSlideNotes(\n    slide = this.Reveal.getCurrentSlide()\n  ) {\n    // Notes can be specified via the data-notes attribute...\n    if (slide.hasAttribute(\"data-notes\")) {\n      return slide.getAttribute(\"data-notes\")\n    }\n\n    // ... or using an <aside class=\"notes\"> element\n    let notesElement =\n      slide.querySelector(\"aside.notes\")\n    if (notesElement) {\n      return notesElement.innerHTML\n    }\n\n    return null\n  }\n}\n","/**\n * UI component that lets the use control auto-slide\n * playback via play/pause.\n */\nexport default class Playback {\n  /**\n   * @param {HTMLElement} container The component will append\n   * itself to this\n   * @param {function} progressCheck A method which will be\n   * called frequently to get the current playback progress on\n   * a range of 0-1\n   */\n  constructor(container, progressCheck) {\n    // Cosmetics\n    this.diameter = 100\n    this.diameter2 = this.diameter / 2\n    this.thickness = 6\n\n    // Flags if we are currently playing\n    this.playing = false\n\n    // Current progress on a 0-1 range\n    this.progress = 0\n\n    // Used to loop the animation smoothly\n    this.progressOffset = 1\n\n    this.container = container\n    this.progressCheck = progressCheck\n\n    this.canvas = document.createElement(\"canvas\")\n    this.canvas.className = \"playback\"\n    this.canvas.width = this.diameter\n    this.canvas.height = this.diameter\n    this.canvas.style.width = this.diameter2 + \"px\"\n    this.canvas.style.height = this.diameter2 + \"px\"\n    this.context = this.canvas.getContext(\"2d\")\n\n    this.container.appendChild(this.canvas)\n\n    this.render()\n  }\n\n  setPlaying(value) {\n    const wasPlaying = this.playing\n\n    this.playing = value\n\n    // Start repainting if we weren't already\n    if (!wasPlaying && this.playing) {\n      this.animate()\n    } else {\n      this.render()\n    }\n  }\n\n  animate() {\n    const progressBefore = this.progress\n\n    this.progress = this.progressCheck()\n\n    // When we loop, offset the progress so that it eases\n    // smoothly rather than immediately resetting\n    if (progressBefore > 0.8 && this.progress < 0.2) {\n      this.progressOffset = this.progress\n    }\n\n    this.render()\n\n    if (this.playing) {\n      requestAnimationFrame(this.animate.bind(this))\n    }\n  }\n\n  /**\n   * Renders the current progress and playback state.\n   */\n  render() {\n    let progress = this.playing ? this.progress : 0,\n      radius = this.diameter2 - this.thickness,\n      x = this.diameter2,\n      y = this.diameter2,\n      iconSize = 28\n\n    // Ease towards 1\n    this.progressOffset +=\n      (1 - this.progressOffset) * 0.1\n\n    const endAngle =\n      -Math.PI / 2 + progress * (Math.PI * 2)\n    const startAngle =\n      -Math.PI / 2 +\n      this.progressOffset * (Math.PI * 2)\n\n    this.context.save()\n    this.context.clearRect(\n      0,\n      0,\n      this.diameter,\n      this.diameter\n    )\n\n    // Solid background color\n    this.context.beginPath()\n    this.context.arc(\n      x,\n      y,\n      radius + 4,\n      0,\n      Math.PI * 2,\n      false\n    )\n    this.context.fillStyle = \"rgba( 0, 0, 0, 0.4 )\"\n    this.context.fill()\n\n    // Draw progress track\n    this.context.beginPath()\n    this.context.arc(\n      x,\n      y,\n      radius,\n      0,\n      Math.PI * 2,\n      false\n    )\n    this.context.lineWidth = this.thickness\n    this.context.strokeStyle =\n      \"rgba( 255, 255, 255, 0.2 )\"\n    this.context.stroke()\n\n    if (this.playing) {\n      // Draw progress on top of track\n      this.context.beginPath()\n      this.context.arc(\n        x,\n        y,\n        radius,\n        startAngle,\n        endAngle,\n        false\n      )\n      this.context.lineWidth = this.thickness\n      this.context.strokeStyle = \"#fff\"\n      this.context.stroke()\n    }\n\n    this.context.translate(\n      x - iconSize / 2,\n      y - iconSize / 2\n    )\n\n    // Draw play/pause icons\n    if (this.playing) {\n      this.context.fillStyle = \"#fff\"\n      this.context.fillRect(\n        0,\n        0,\n        iconSize / 2 - 4,\n        iconSize\n      )\n      this.context.fillRect(\n        iconSize / 2 + 4,\n        0,\n        iconSize / 2 - 4,\n        iconSize\n      )\n    } else {\n      this.context.beginPath()\n      this.context.translate(4, 0)\n      this.context.moveTo(0, 0)\n      this.context.lineTo(iconSize - 4, iconSize / 2)\n      this.context.lineTo(0, iconSize)\n      this.context.fillStyle = \"#fff\"\n      this.context.fill()\n    }\n\n    this.context.restore()\n  }\n\n  on(type, listener) {\n    this.canvas.addEventListener(type, listener, false)\n  }\n\n  off(type, listener) {\n    this.canvas.removeEventListener(\n      type,\n      listener,\n      false\n    )\n  }\n\n  destroy() {\n    this.playing = false\n\n    if (this.canvas.parentNode) {\n      this.container.removeChild(this.canvas)\n    }\n  }\n}\n","/**\n * The default reveal.js config object.\n */\nexport default {\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions\n  width: 960,\n  height: 700,\n\n  // Factor of the display size that should remain empty around the content\n  margin: 0.04,\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: 0.2,\n  maxScale: 2.0,\n\n  // Display presentation control arrows\n  controls: true,\n\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: true,\n\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: \"bottom-right\",\n\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: \"faded\",\n\n  // Display a presentation progress bar\n  progress: true,\n\n  // Display the page number of the current slide\n  // - true:    Show slide number\n  // - false:   Hide slide number\n  //\n  // Can optionally be set as a string that specifies the number formatting:\n  // - \"h.v\":\t  Horizontal . vertical slide number (default)\n  // - \"h/v\":\t  Horizontal / vertical slide number\n  // - \"c\":\t  Flattened slide number\n  // - \"c/t\":\t  Flattened slide number / total slides\n  //\n  // Alternatively, you can provide a function that returns the slide\n  // number for the current slide. The function should take in a slide\n  // object and return an array with one string [slideNumber] or\n  // three strings [n1,delimiter,n2]. See #formatSlideNumber().\n  slideNumber: false,\n\n  // Can be used to limit the contexts in which the slide number appears\n  // - \"all\":      Always show the slide number\n  // - \"print\":    Only when printing to PDF\n  // - \"speaker\":  Only in the speaker view\n  showSlideNumber: \"all\",\n\n  // Use 1 based indexing for # links to match slide number (default is zero\n  // based)\n  hashOneBasedIndex: false,\n\n  // Add the current slide number to the URL hash so that reloading the\n  // page/copying the URL will return you to the same slide\n  hash: false,\n\n  // Flags if we should monitor the hash and change slides accordingly\n  respondToHashChanges: true,\n\n  // Push each slide change to the browser history.  Implies `hash: true`\n  history: false,\n\n  // Enable keyboard shortcuts for navigation\n  keyboard: true,\n\n  // Optional function that blocks keyboard events when retuning false\n  //\n  // If you set this to 'focused', we will only capture keyboard events\n  // for embedded decks when they are in focus\n  keyboardCondition: null,\n\n  // Disables the default reveal.js slide layout (scaling and centering)\n  // so that you can use custom CSS layout\n  disableLayout: false,\n\n  // Enable the slide overview mode\n  overview: true,\n\n  // Vertical centering of slides\n  center: true,\n\n  // Enables touch navigation on devices with touch input\n  touch: true,\n\n  // Loop the presentation\n  loop: false,\n\n  // Change the presentation direction to be RTL\n  rtl: false,\n\n  // Changes the behavior of our navigation directions.\n  //\n  // \"default\"\n  // Left/right arrow keys step between horizontal slides, up/down\n  // arrow keys step between vertical slides. Space key steps through\n  // all slides (both horizontal and vertical).\n  //\n  // \"linear\"\n  // Removes the up/down arrows. Left/right arrows step through all\n  // slides (both horizontal and vertical).\n  //\n  // \"grid\"\n  // When this is enabled, stepping left/right from a vertical stack\n  // to an adjacent vertical stack will land you at the same vertical\n  // index.\n  //\n  // Consider a deck with six slides ordered in two vertical stacks:\n  // 1.1    2.1\n  // 1.2    2.2\n  // 1.3    2.3\n  //\n  // If you're on slide 1.3 and navigate right, you will normally move\n  // from 1.3 -> 2.1. If \"grid\" is used, the same navigation takes you\n  // from 1.3 -> 2.3.\n  navigationMode: \"default\",\n\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: false,\n\n  // Turns fragments on and off globally\n  fragments: true,\n\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: true,\n\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: false,\n\n  // Flags if we should show a help overlay when the question-mark\n  // key is pressed\n  help: true,\n\n  // Flags if it should be possible to pause the presentation (blackout)\n  pause: true,\n\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: false,\n\n  // Flags if slides with data-visibility=\"hidden\" should be kep visible\n  showHiddenSlides: false,\n\n  // Global override for autoplaying embedded media (video/audio/iframe)\n  // - null:   Media will only autoplay if data-autoplay is present\n  // - true:   All media will autoplay, regardless of individual setting\n  // - false:  No media will autoplay, regardless of individual setting\n  autoPlayMedia: null,\n\n  // Global override for preloading lazy-loaded iframes\n  // - null:   Iframes with data-src AND data-preload will be loaded when within\n  //           the viewDistance, iframes with only data-src will be loaded when visible\n  // - true:   All iframes with data-src will be loaded when within the viewDistance\n  // - false:  All iframes with data-src will be loaded only when visible\n  preloadIframes: null,\n\n  // Can be used to globally disable auto-animation\n  autoAnimate: true,\n\n  // Optionally provide a custom element matcher that will be\n  // used to dictate which elements we can animate between.\n  autoAnimateMatcher: null,\n\n  // Default settings for our auto-animate transitions, can be\n  // overridden per-slide or per-element via data arguments\n  autoAnimateEasing: \"ease\",\n  autoAnimateDuration: 1.0,\n  autoAnimateUnmatched: true,\n\n  // CSS properties that can be auto-animated. Position & scale\n  // is matched separately so there's no need to include styles\n  // like top/right/bottom/left, width/height or margin.\n  autoAnimateStyles: [\n    \"opacity\",\n    \"color\",\n    \"background-color\",\n    \"padding\",\n    \"font-size\",\n    \"line-height\",\n    \"letter-spacing\",\n    \"border-width\",\n    \"border-color\",\n    \"border-radius\",\n    \"outline\",\n    \"outline-offset\",\n  ],\n\n  // Controls automatic progression to the next slide\n  // - 0:      Auto-sliding only happens if the data-autoslide HTML attribute\n  //           is present on the current slide or fragment\n  // - 1+:     All slides will progress automatically at the given interval\n  // - false:  No auto-sliding, even if data-autoslide is present\n  autoSlide: 0,\n\n  // Stop auto-sliding after user input\n  autoSlideStoppable: true,\n\n  // Use this method for navigation when auto-sliding (defaults to navigateNext)\n  autoSlideMethod: null,\n\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: null,\n\n  // Enable slide navigation via mouse wheel\n  mouseWheel: false,\n\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: false,\n\n  // Exposes the reveal.js API through window.postMessage\n  postMessage: true,\n\n  // Dispatches all reveal.js events to the parent window through postMessage\n  postMessageEvents: false,\n\n  // Focuses body when page changes visibility to ensure keyboard shortcuts work\n  focusBodyOnPageVisibilityChange: true,\n\n  // Transition style\n  transition: \"slide\", // none/fade/slide/convex/concave/zoom\n\n  // Transition speed\n  transitionSpeed: \"default\", // default/fast/slow\n\n  // Transition style for full page slide backgrounds\n  backgroundTransition: \"fade\", // none/fade/slide/convex/concave/zoom\n\n  // Parallax background image\n  parallaxBackgroundImage: \"\", // CSS syntax, e.g. \"a.jpg\"\n\n  // Parallax background size\n  parallaxBackgroundSize: \"\", // CSS syntax, e.g. \"3000px 2000px\"\n\n  // Parallax background repeat\n  parallaxBackgroundRepeat: \"\", // repeat/repeat-x/repeat-y/no-repeat/initial/inherit\n\n  // Parallax background position\n  parallaxBackgroundPosition: \"\", // CSS syntax, e.g. \"top left\"\n\n  // Amount of pixels to move the parallax background per slide step\n  parallaxBackgroundHorizontal: null,\n  parallaxBackgroundVertical: null,\n\n  // The maximum number of pages a single slide can expand onto when printing\n  // to PDF, unlimited by default\n  pdfMaxPagesPerSlide: Number.POSITIVE_INFINITY,\n\n  // Prints each fragment on a separate slide\n  pdfSeparateFragments: true,\n\n  // Offset used to reduce the height of content within exported PDF pages.\n  // This exists to account for environment differences based on how you\n  // print to PDF. CLI printing options, like phantomjs and wkpdf, can end\n  // on precisely the total height of the document whereas in-browser\n  // printing has to end one pixel before.\n  pdfPageHeightOffset: -1,\n\n  // Number of slides away from the current that are visible\n  viewDistance: 3,\n\n  // Number of slides away from the current that are visible on mobile\n  // devices. It is advisable to set this to a lower number than\n  // viewDistance in order to save resources.\n  mobileViewDistance: 2,\n\n  // The display mode that will be used to show slides\n  display: \"block\",\n\n  // Hide cursor if inactive\n  hideInactiveCursor: true,\n\n  // Time before the cursor is hidden (in ms)\n  hideCursorTime: 5000,\n\n  // Script dependencies to load\n  dependencies: [],\n\n  // Plugin objects to register and use for this presentation\n  plugins: [],\n}\n","import SlideContent from \"./controllers/slidecontent.js\"\nimport SlideNumber from \"./controllers/slidenumber.js\"\nimport Backgrounds from \"./controllers/backgrounds.js\"\nimport AutoAnimate from \"./controllers/autoanimate.js\"\nimport Fragments from \"./controllers/fragments.js\"\nimport Overview from \"./controllers/overview.js\"\nimport Keyboard from \"./controllers/keyboard.js\"\nimport Location from \"./controllers/location.js\"\nimport Controls from \"./controllers/controls.js\"\nimport Progress from \"./controllers/progress.js\"\nimport Pointer from \"./controllers/pointer.js\"\nimport Plugins from \"./controllers/plugins.js\"\nimport Print from \"./controllers/print.js\"\nimport Touch from \"./controllers/touch.js\"\nimport Focus from \"./controllers/focus.js\"\nimport Notes from \"./controllers/notes.js\"\nimport Playback from \"./components/playback.js\"\nimport defaultConfig from \"./config.js\"\nimport * as Util from \"./utils/util.js\"\nimport * as Device from \"./utils/device.js\"\nimport {\n  SLIDES_SELECTOR,\n  HORIZONTAL_SLIDES_SELECTOR,\n  VERTICAL_SLIDES_SELECTOR,\n  POST_MESSAGE_METHOD_BLACKLIST,\n} from \"./utils/constants.js\"\n\n// The reveal.js version\nexport const VERSION = \"4.2.1\"\n\n/**\n * reveal.js\n * https://revealjs.com\n * MIT licensed\n *\n * Copyright (C) 2011-2022 Hakim El Hattab, https://hakim.se\n */\nexport default function (revealElement, options) {\n  // Support initialization with no args, one arg\n  // [options] or two args [revealElement, options]\n  if (arguments.length < 2) {\n    options = arguments[0]\n    revealElement = document.querySelector(\".reveal\")\n  }\n\n  const Reveal = {}\n\n  // Configuration defaults, can be overridden at initialization time\n  let config = {},\n    // Flags if reveal.js is loaded (has dispatched the 'ready' event)\n    ready = false,\n    // The horizontal and vertical index of the currently active slide\n    indexh,\n    indexv,\n    // The previous and current slide HTML elements\n    previousSlide,\n    currentSlide,\n    // Remember which directions that the user has navigated towards\n    navigationHistory = {\n      hasNavigatedHorizontally: false,\n      hasNavigatedVertically: false,\n    },\n    // Slides may have a data-state attribute which we pick up and apply\n    // as a class to the body. This list contains the combined state of\n    // all current slides.\n    state = [],\n    // The current scale of the presentation (see width/height config)\n    scale = 1,\n    // CSS transform that is currently applied to the slides container,\n    // split into two groups\n    slidesTransform = { layout: \"\", overview: \"\" },\n    // Cached references to DOM elements\n    dom = {},\n    // Flags if the interaction event listeners are bound\n    eventsAreBound = false,\n    // The current slide transition state; idle or running\n    transition = \"idle\",\n    // The current auto-slide duration\n    autoSlide = 0,\n    // Auto slide properties\n    autoSlidePlayer,\n    autoSlideTimeout = 0,\n    autoSlideStartTime = -1,\n    autoSlidePaused = false,\n    // Controllers for different aspects of our presentation. They're\n    // all given direct references to this Reveal instance since there\n    // may be multiple presentations running in parallel.\n    slideContent = new SlideContent(Reveal),\n    slideNumber = new SlideNumber(Reveal),\n    autoAnimate = new AutoAnimate(Reveal),\n    backgrounds = new Backgrounds(Reveal),\n    fragments = new Fragments(Reveal),\n    overview = new Overview(Reveal),\n    keyboard = new Keyboard(Reveal),\n    location = new Location(Reveal),\n    controls = new Controls(Reveal),\n    progress = new Progress(Reveal),\n    pointer = new Pointer(Reveal),\n    plugins = new Plugins(Reveal),\n    print = new Print(Reveal),\n    focus = new Focus(Reveal),\n    touch = new Touch(Reveal),\n    notes = new Notes(Reveal)\n\n  /**\n   * Starts up the presentation.\n   */\n  function initialize(initOptions) {\n    if (!revealElement)\n      throw 'Unable to find presentation root (<div class=\"reveal\">).'\n\n    // Cache references to key DOM elements\n    dom.wrapper = revealElement\n    dom.slides = revealElement.querySelector(\".slides\")\n\n    if (!dom.slides)\n      throw 'Unable to find slides container (<div class=\"slides\">).'\n\n    // Compose our config object in order of increasing precedence:\n    // 1. Default reveal.js options\n    // 2. Options provided via Reveal.configure() prior to\n    //    initialization\n    // 3. Options passed to the Reveal constructor\n    // 4. Options passed to Reveal.initialize\n    // 5. Query params\n    config = {\n      ...defaultConfig,\n      ...config,\n      ...options,\n      ...initOptions,\n      ...Util.getQueryHash(),\n    }\n\n    setViewport()\n\n    // Force a layout when the whole page, incl fonts, has loaded\n    window.addEventListener(\"load\", layout, false)\n\n    // Register plugins and load dependencies, then move on to #start()\n    plugins\n      .load(config.plugins, config.dependencies)\n      .then(start)\n\n    return new Promise((resolve) =>\n      Reveal.on(\"ready\", resolve)\n    )\n  }\n\n  /**\n   * Encase the presentation in a reveal.js viewport. The\n   * extent of the viewport differs based on configuration.\n   */\n  function setViewport() {\n    // Embedded decks use the reveal element as their viewport\n    if (config.embedded === true) {\n      dom.viewport =\n        Util.closest(\n          revealElement,\n          \".reveal-viewport\"\n        ) || revealElement\n    }\n    // Full-page decks use the body as their viewport\n    else {\n      dom.viewport = document.body\n      document.documentElement.classList.add(\n        \"reveal-full-page\"\n      )\n    }\n\n    dom.viewport.classList.add(\"reveal-viewport\")\n  }\n\n  /**\n   * Starts up reveal.js by binding input events and navigating\n   * to the current URL deeplink if there is one.\n   */\n  function start() {\n    ready = true\n\n    // Remove slides hidden with data-visibility\n    removeHiddenSlides()\n\n    // Make sure we've got all the DOM elements we need\n    setupDOM()\n\n    // Listen to messages posted to this window\n    setupPostMessage()\n\n    // Prevent the slides from being scrolled out of view\n    setupScrollPrevention()\n\n    // Adds bindings for fullscreen mode\n    setupFullscreen()\n\n    // Resets all vertical slides so that only the first is visible\n    resetVerticalSlides()\n\n    // Updates the presentation to match the current configuration values\n    configure()\n\n    // Read the initial hash\n    location.readURL()\n\n    // Create slide backgrounds\n    backgrounds.update(true)\n\n    // Notify listeners that the presentation is ready but use a 1ms\n    // timeout to ensure it's not fired synchronously after #initialize()\n    setTimeout(() => {\n      // Enable transitions now that we're loaded\n      dom.slides.classList.remove(\"no-transition\")\n\n      dom.wrapper.classList.add(\"ready\")\n\n      dispatchEvent({\n        type: \"ready\",\n        data: {\n          indexh,\n          indexv,\n          currentSlide,\n        },\n      })\n    }, 1)\n\n    // Special setup and config is required when printing to PDF\n    if (print.isPrintingPDF()) {\n      removeEventListeners()\n\n      // The document needs to have loaded for the PDF layout\n      // measurements to be accurate\n      if (document.readyState === \"complete\") {\n        print.setupPDF()\n      } else {\n        window.addEventListener(\"load\", () => {\n          print.setupPDF()\n        })\n      }\n    }\n  }\n\n  /**\n   * Removes all slides with data-visibility=\"hidden\". This\n   * is done right before the rest of the presentation is\n   * initialized.\n   *\n   * If you want to show all hidden slides, initialize\n   * reveal.js with showHiddenSlides set to true.\n   */\n  function removeHiddenSlides() {\n    if (!config.showHiddenSlides) {\n      Util.queryAll(\n        dom.wrapper,\n        'section[data-visibility=\"hidden\"]'\n      ).forEach((slide) => {\n        slide.parentNode.removeChild(slide)\n      })\n    }\n  }\n\n  /**\n   * Finds and stores references to DOM elements which are\n   * required by the presentation. If a required element is\n   * not found, it is created.\n   */\n  function setupDOM() {\n    // Prevent transitions while we're loading\n    dom.slides.classList.add(\"no-transition\")\n\n    if (Device.isMobile) {\n      dom.wrapper.classList.add(\"no-hover\")\n    } else {\n      dom.wrapper.classList.remove(\"no-hover\")\n    }\n\n    backgrounds.render()\n    slideNumber.render()\n    controls.render()\n    progress.render()\n    notes.render()\n\n    // Overlay graphic which is displayed during the paused mode\n    dom.pauseOverlay = Util.createSingletonNode(\n      dom.wrapper,\n      \"div\",\n      \"pause-overlay\",\n      config.controls\n        ? '<button class=\"resume-button\">Resume presentation</button>'\n        : null\n    )\n\n    dom.statusElement = createStatusElement()\n\n    dom.wrapper.setAttribute(\"role\", \"application\")\n  }\n\n  /**\n   * Creates a hidden div with role aria-live to announce the\n   * current slide content. Hide the div off-screen to make it\n   * available only to Assistive Technologies.\n   *\n   * @return {HTMLElement}\n   */\n  function createStatusElement() {\n    let statusElement = dom.wrapper.querySelector(\n      \".aria-status\"\n    )\n    if (!statusElement) {\n      statusElement = document.createElement(\"div\")\n      statusElement.style.position = \"absolute\"\n      statusElement.style.height = \"1px\"\n      statusElement.style.width = \"1px\"\n      statusElement.style.overflow = \"hidden\"\n      statusElement.style.clip =\n        \"rect( 1px, 1px, 1px, 1px )\"\n      statusElement.classList.add(\"aria-status\")\n      statusElement.setAttribute(\"aria-live\", \"polite\")\n      statusElement.setAttribute(\"aria-atomic\", \"true\")\n      dom.wrapper.appendChild(statusElement)\n    }\n    return statusElement\n  }\n\n  /**\n   * Announces the given text to screen readers.\n   */\n  function announceStatus(value) {\n    dom.statusElement.textContent = value\n  }\n\n  /**\n   * Converts the given HTML element into a string of text\n   * that can be announced to a screen reader. Hidden\n   * elements are excluded.\n   */\n  function getStatusText(node) {\n    let text = \"\"\n\n    // Text node\n    if (node.nodeType === 3) {\n      text += node.textContent\n    }\n    // Element node\n    else if (node.nodeType === 1) {\n      let isAriaHidden =\n        node.getAttribute(\"aria-hidden\")\n      let isDisplayHidden =\n        window.getComputedStyle(node)[\"display\"] ===\n        \"none\"\n      if (\n        isAriaHidden !== \"true\" &&\n        !isDisplayHidden\n      ) {\n        Array.from(node.childNodes).forEach(\n          (child) => {\n            text += getStatusText(child)\n          }\n        )\n      }\n    }\n\n    text = text.trim()\n\n    return text === \"\" ? \"\" : text + \" \"\n  }\n\n  /**\n   * This is an unfortunate necessity. Some actions – such as\n   * an input field being focused in an iframe or using the\n   * keyboard to expand text selection beyond the bounds of\n   * a slide – can trigger our content to be pushed out of view.\n   * This scrolling can not be prevented by hiding overflow in\n   * CSS (we already do) so we have to resort to repeatedly\n   * checking if the slides have been offset :(\n   */\n  function setupScrollPrevention() {\n    setInterval(() => {\n      if (\n        dom.wrapper.scrollTop !== 0 ||\n        dom.wrapper.scrollLeft !== 0\n      ) {\n        dom.wrapper.scrollTop = 0\n        dom.wrapper.scrollLeft = 0\n      }\n    }, 1000)\n  }\n\n  /**\n   * After entering fullscreen we need to force a layout to\n   * get our presentations to scale correctly. This behavior\n   * is inconsistent across browsers but a force layout seems\n   * to normalize it.\n   */\n  function setupFullscreen() {\n    document.addEventListener(\n      \"fullscreenchange\",\n      onFullscreenChange\n    )\n    document.addEventListener(\n      \"webkitfullscreenchange\",\n      onFullscreenChange\n    )\n  }\n\n  /**\n   * Registers a listener to postMessage events, this makes it\n   * possible to call all reveal.js API methods from another\n   * window. For example:\n   *\n   * revealWindow.postMessage( JSON.stringify({\n   *   method: 'slide',\n   *   args: [ 2 ]\n   * }), '*' );\n   */\n  function setupPostMessage() {\n    if (config.postMessage) {\n      window.addEventListener(\n        \"message\",\n        (event) => {\n          let data = event.data\n\n          // Make sure we're dealing with JSON\n          if (\n            typeof data === \"string\" &&\n            data.charAt(0) === \"{\" &&\n            data.charAt(data.length - 1) === \"}\"\n          ) {\n            data = JSON.parse(data)\n\n            // Check if the requested method can be found\n            if (\n              data.method &&\n              typeof Reveal[data.method] === \"function\"\n            ) {\n              if (\n                POST_MESSAGE_METHOD_BLACKLIST.test(\n                  data.method\n                ) === false\n              ) {\n                const result = Reveal[\n                  data.method\n                ].apply(Reveal, data.args)\n\n                // Dispatch a postMessage event with the returned value from\n                // our method invocation for getter functions\n                dispatchPostMessage(\"callback\", {\n                  method: data.method,\n                  result: result,\n                })\n              } else {\n                console.warn(\n                  'reveal.js: \"' +\n                    data.method +\n                    '\" is is blacklisted from the postMessage API'\n                )\n              }\n            }\n          }\n        },\n        false\n      )\n    }\n  }\n\n  /**\n   * Applies the configuration settings from the config\n   * object. May be called multiple times.\n   *\n   * @param {object} options\n   */\n  function configure(options) {\n    const oldConfig = { ...config }\n\n    // New config options may be passed when this method\n    // is invoked through the API after initialization\n    if (typeof options === \"object\")\n      Util.extend(config, options)\n\n    // Abort if reveal.js hasn't finished loading, config\n    // changes will be applied automatically once ready\n    if (Reveal.isReady() === false) return\n\n    const numberOfSlides =\n      dom.wrapper.querySelectorAll(\n        SLIDES_SELECTOR\n      ).length\n\n    // The transition is added as a class on the .reveal element\n    dom.wrapper.classList.remove(oldConfig.transition)\n    dom.wrapper.classList.add(config.transition)\n\n    dom.wrapper.setAttribute(\n      \"data-transition-speed\",\n      config.transitionSpeed\n    )\n    dom.wrapper.setAttribute(\n      \"data-background-transition\",\n      config.backgroundTransition\n    )\n\n    // Expose our configured slide dimensions as custom props\n    dom.viewport.style.setProperty(\n      \"--slide-width\",\n      config.width + \"px\"\n    )\n    dom.viewport.style.setProperty(\n      \"--slide-height\",\n      config.height + \"px\"\n    )\n\n    if (config.shuffle) {\n      shuffle()\n    }\n\n    Util.toggleClass(\n      dom.wrapper,\n      \"embedded\",\n      config.embedded\n    )\n    Util.toggleClass(dom.wrapper, \"rtl\", config.rtl)\n    Util.toggleClass(\n      dom.wrapper,\n      \"center\",\n      config.center\n    )\n\n    // Exit the paused mode if it was configured off\n    if (config.pause === false) {\n      resume()\n    }\n\n    // Iframe link previews\n    if (config.previewLinks) {\n      enablePreviewLinks()\n      disablePreviewLinks(\"[data-preview-link=false]\")\n    } else {\n      disablePreviewLinks()\n      enablePreviewLinks(\n        \"[data-preview-link]:not([data-preview-link=false])\"\n      )\n    }\n\n    // Reset all changes made by auto-animations\n    autoAnimate.reset()\n\n    // Remove existing auto-slide controls\n    if (autoSlidePlayer) {\n      autoSlidePlayer.destroy()\n      autoSlidePlayer = null\n    }\n\n    // Generate auto-slide controls if needed\n    if (\n      numberOfSlides > 1 &&\n      config.autoSlide &&\n      config.autoSlideStoppable\n    ) {\n      autoSlidePlayer = new Playback(\n        dom.wrapper,\n        () => {\n          return Math.min(\n            Math.max(\n              (Date.now() - autoSlideStartTime) /\n                autoSlide,\n              0\n            ),\n            1\n          )\n        }\n      )\n\n      autoSlidePlayer.on(\n        \"click\",\n        onAutoSlidePlayerClick\n      )\n      autoSlidePaused = false\n    }\n\n    // Add the navigation mode to the DOM so we can adjust styling\n    if (config.navigationMode !== \"default\") {\n      dom.wrapper.setAttribute(\n        \"data-navigation-mode\",\n        config.navigationMode\n      )\n    } else {\n      dom.wrapper.removeAttribute(\n        \"data-navigation-mode\"\n      )\n    }\n\n    notes.configure(config, oldConfig)\n    focus.configure(config, oldConfig)\n    pointer.configure(config, oldConfig)\n    controls.configure(config, oldConfig)\n    progress.configure(config, oldConfig)\n    keyboard.configure(config, oldConfig)\n    fragments.configure(config, oldConfig)\n    slideNumber.configure(config, oldConfig)\n\n    sync()\n  }\n\n  /**\n   * Binds all event listeners.\n   */\n  function addEventListeners() {\n    eventsAreBound = true\n\n    window.addEventListener(\n      \"resize\",\n      onWindowResize,\n      false\n    )\n\n    if (config.touch) touch.bind()\n    if (config.keyboard) keyboard.bind()\n    if (config.progress) progress.bind()\n    if (config.respondToHashChanges) location.bind()\n    controls.bind()\n    focus.bind()\n\n    dom.slides.addEventListener(\n      \"click\",\n      onSlidesClicked,\n      false\n    )\n    dom.slides.addEventListener(\n      \"transitionend\",\n      onTransitionEnd,\n      false\n    )\n    dom.pauseOverlay.addEventListener(\n      \"click\",\n      resume,\n      false\n    )\n\n    if (config.focusBodyOnPageVisibilityChange) {\n      document.addEventListener(\n        \"visibilitychange\",\n        onPageVisibilityChange,\n        false\n      )\n    }\n  }\n\n  /**\n   * Unbinds all event listeners.\n   */\n  function removeEventListeners() {\n    eventsAreBound = false\n\n    touch.unbind()\n    focus.unbind()\n    keyboard.unbind()\n    controls.unbind()\n    progress.unbind()\n    location.unbind()\n\n    window.removeEventListener(\n      \"resize\",\n      onWindowResize,\n      false\n    )\n\n    dom.slides.removeEventListener(\n      \"click\",\n      onSlidesClicked,\n      false\n    )\n    dom.slides.removeEventListener(\n      \"transitionend\",\n      onTransitionEnd,\n      false\n    )\n    dom.pauseOverlay.removeEventListener(\n      \"click\",\n      resume,\n      false\n    )\n  }\n\n  /**\n   * Adds a listener to one of our custom reveal.js events,\n   * like slidechanged.\n   */\n  function on(type, listener, useCapture) {\n    revealElement.addEventListener(\n      type,\n      listener,\n      useCapture\n    )\n  }\n\n  /**\n   * Unsubscribes from a reveal.js event.\n   */\n  function off(type, listener, useCapture) {\n    revealElement.removeEventListener(\n      type,\n      listener,\n      useCapture\n    )\n  }\n\n  /**\n   * Applies CSS transforms to the slides container. The container\n   * is transformed from two separate sources: layout and the overview\n   * mode.\n   *\n   * @param {object} transforms\n   */\n  function transformSlides(transforms) {\n    // Pick up new transforms from arguments\n    if (typeof transforms.layout === \"string\")\n      slidesTransform.layout = transforms.layout\n    if (typeof transforms.overview === \"string\")\n      slidesTransform.overview = transforms.overview\n\n    // Apply the transforms to the slides container\n    if (slidesTransform.layout) {\n      Util.transformElement(\n        dom.slides,\n        slidesTransform.layout +\n          \" \" +\n          slidesTransform.overview\n      )\n    } else {\n      Util.transformElement(\n        dom.slides,\n        slidesTransform.overview\n      )\n    }\n  }\n\n  /**\n   * Dispatches an event of the specified type from the\n   * reveal DOM element.\n   */\n  function dispatchEvent({\n    target = dom.wrapper,\n    type,\n    data,\n    bubbles = true,\n  }) {\n    let event = document.createEvent(\n      \"HTMLEvents\",\n      1,\n      2\n    )\n    event.initEvent(type, bubbles, true)\n    Util.extend(event, data)\n    target.dispatchEvent(event)\n\n    if (target === dom.wrapper) {\n      // If we're in an iframe, post each reveal.js event to the\n      // parent window. Used by the notes plugin\n      dispatchPostMessage(type)\n    }\n\n    return event\n  }\n\n  /**\n   * Dispatched a postMessage of the given type from our window.\n   */\n  function dispatchPostMessage(type, data) {\n    if (\n      config.postMessageEvents &&\n      window.parent !== window.self\n    ) {\n      let message = {\n        namespace: \"reveal\",\n        eventName: type,\n        state: getState(),\n      }\n\n      Util.extend(message, data)\n\n      window.parent.postMessage(\n        JSON.stringify(message),\n        \"*\"\n      )\n    }\n  }\n\n  /**\n   * Bind preview frame links.\n   *\n   * @param {string} [selector=a] - selector for anchors\n   */\n  function enablePreviewLinks(selector = \"a\") {\n    Array.from(\n      dom.wrapper.querySelectorAll(selector)\n    ).forEach((element) => {\n      if (\n        /^(http|www)/gi.test(\n          element.getAttribute(\"href\")\n        )\n      ) {\n        element.addEventListener(\n          \"click\",\n          onPreviewLinkClicked,\n          false\n        )\n      }\n    })\n  }\n\n  /**\n   * Unbind preview frame links.\n   */\n  function disablePreviewLinks(selector = \"a\") {\n    Array.from(\n      dom.wrapper.querySelectorAll(selector)\n    ).forEach((element) => {\n      if (\n        /^(http|www)/gi.test(\n          element.getAttribute(\"href\")\n        )\n      ) {\n        element.removeEventListener(\n          \"click\",\n          onPreviewLinkClicked,\n          false\n        )\n      }\n    })\n  }\n\n  /**\n   * Opens a preview window for the target URL.\n   *\n   * @param {string} url - url for preview iframe src\n   */\n  function showPreview(url) {\n    closeOverlay()\n\n    dom.overlay = document.createElement(\"div\")\n    dom.overlay.classList.add(\"overlay\")\n    dom.overlay.classList.add(\"overlay-preview\")\n    dom.wrapper.appendChild(dom.overlay)\n\n    dom.overlay.innerHTML = `<header>\n\t\t\t\t<a class=\"close\" href=\"#\"><span class=\"icon\"></span></a>\n\t\t\t\t<a class=\"external\" href=\"${url}\" target=\"_blank\"><span class=\"icon\"></span></a>\n\t\t\t</header>\n\t\t\t<div class=\"spinner\"></div>\n\t\t\t<div class=\"viewport\">\n\t\t\t\t<iframe src=\"${url}\"></iframe>\n\t\t\t\t<small class=\"viewport-inner\">\n\t\t\t\t\t<span class=\"x-frame-error\">Unable to load iframe. This is likely due to the site's policy (x-frame-options).</span>\n\t\t\t\t</small>\n\t\t\t</div>`\n\n    dom.overlay\n      .querySelector(\"iframe\")\n      .addEventListener(\n        \"load\",\n        (event) => {\n          dom.overlay.classList.add(\"loaded\")\n        },\n        false\n      )\n\n    dom.overlay\n      .querySelector(\".close\")\n      .addEventListener(\n        \"click\",\n        (event) => {\n          closeOverlay()\n          event.preventDefault()\n        },\n        false\n      )\n\n    dom.overlay\n      .querySelector(\".external\")\n      .addEventListener(\n        \"click\",\n        (event) => {\n          closeOverlay()\n        },\n        false\n      )\n  }\n\n  /**\n   * Open or close help overlay window.\n   *\n   * @param {Boolean} [override] Flag which overrides the\n   * toggle logic and forcibly sets the desired state. True means\n   * help is open, false means it's closed.\n   */\n  function toggleHelp(override) {\n    if (typeof override === \"boolean\") {\n      override ? showHelp() : closeOverlay()\n    } else {\n      if (dom.overlay) {\n        closeOverlay()\n      } else {\n        showHelp()\n      }\n    }\n  }\n\n  /**\n   * Opens an overlay window with help material.\n   */\n  function showHelp() {\n    if (config.help) {\n      closeOverlay()\n\n      dom.overlay = document.createElement(\"div\")\n      dom.overlay.classList.add(\"overlay\")\n      dom.overlay.classList.add(\"overlay-help\")\n      dom.wrapper.appendChild(dom.overlay)\n\n      let html =\n        '<p class=\"title\">Keyboard Shortcuts</p><br/>'\n\n      let shortcuts = keyboard.getShortcuts(),\n        bindings = keyboard.getBindings()\n\n      html += \"<table><th>KEY</th><th>ACTION</th>\"\n      for (let key in shortcuts) {\n        html += `<tr><td>${key}</td><td>${shortcuts[key]}</td></tr>`\n      }\n\n      // Add custom key bindings that have associated descriptions\n      for (let binding in bindings) {\n        if (\n          bindings[binding].key &&\n          bindings[binding].description\n        ) {\n          html += `<tr><td>${bindings[binding].key}</td><td>${bindings[binding].description}</td></tr>`\n        }\n      }\n\n      html += \"</table>\"\n\n      dom.overlay.innerHTML = `\n\t\t\t\t<header>\n\t\t\t\t\t<a class=\"close\" href=\"#\"><span class=\"icon\"></span></a>\n\t\t\t\t</header>\n\t\t\t\t<div class=\"viewport\">\n\t\t\t\t\t<div class=\"viewport-inner\">${html}</div>\n\t\t\t\t</div>\n\t\t\t`\n\n      dom.overlay\n        .querySelector(\".close\")\n        .addEventListener(\n          \"click\",\n          (event) => {\n            closeOverlay()\n            event.preventDefault()\n          },\n          false\n        )\n    }\n  }\n\n  /**\n   * Closes any currently open overlay.\n   */\n  function closeOverlay() {\n    if (dom.overlay) {\n      dom.overlay.parentNode.removeChild(dom.overlay)\n      dom.overlay = null\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Applies JavaScript-controlled layout rules to the\n   * presentation.\n   */\n  function layout() {\n    if (dom.wrapper && !print.isPrintingPDF()) {\n      if (!config.disableLayout) {\n        // On some mobile devices '100vh' is taller than the visible\n        // viewport which leads to part of the presentation being\n        // cut off. To work around this we define our own '--vh' custom\n        // property where 100x adds up to the correct height.\n        //\n        // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n        if (Device.isMobile && !config.embedded) {\n          document.documentElement.style.setProperty(\n            \"--vh\",\n            window.innerHeight * 0.01 + \"px\"\n          )\n        }\n\n        const size = getComputedSlideSize()\n\n        const oldScale = scale\n\n        // Layout the contents of the slides\n        layoutSlideContents(\n          config.width,\n          config.height\n        )\n\n        dom.slides.style.width = size.width + \"px\"\n        dom.slides.style.height = size.height + \"px\"\n\n        // Determine scale of content to fit within available space\n        scale = Math.min(\n          size.presentationWidth / size.width,\n          size.presentationHeight / size.height\n        )\n\n        // Respect max/min scale settings\n        scale = Math.max(scale, config.minScale)\n        scale = Math.min(scale, config.maxScale)\n\n        // Don't apply any scaling styles if scale is 1\n        if (scale === 1) {\n          dom.slides.style.zoom = \"\"\n          dom.slides.style.left = \"\"\n          dom.slides.style.top = \"\"\n          dom.slides.style.bottom = \"\"\n          dom.slides.style.right = \"\"\n          transformSlides({ layout: \"\" })\n        } else {\n          // Zoom Scaling\n          // Content remains crisp no matter how much we scale. Side\n          // effects are minor differences in text layout and iframe\n          // viewports changing size. A 200x200 iframe viewport in a\n          // 2x zoomed presentation ends up having a 400x400 viewport.\n          if (\n            scale > 1 &&\n            Device.supportsZoom &&\n            window.devicePixelRatio < 2\n          ) {\n            dom.slides.style.zoom = scale\n            dom.slides.style.left = \"\"\n            dom.slides.style.top = \"\"\n            dom.slides.style.bottom = \"\"\n            dom.slides.style.right = \"\"\n            transformSlides({ layout: \"\" })\n          }\n          // Transform Scaling\n          // Content layout remains the exact same when scaled up.\n          // Side effect is content becoming blurred, especially with\n          // high scale values on ldpi screens.\n          else {\n            dom.slides.style.zoom = \"\"\n            dom.slides.style.left = \"50%\"\n            dom.slides.style.top = \"50%\"\n            dom.slides.style.bottom = \"auto\"\n            dom.slides.style.right = \"auto\"\n            transformSlides({\n              layout:\n                \"translate(-50%, -50%) scale(\" +\n                scale +\n                \")\",\n            })\n          }\n        }\n\n        // Select all slides, vertical and horizontal\n        const slides = Array.from(\n          dom.wrapper.querySelectorAll(SLIDES_SELECTOR)\n        )\n\n        for (\n          let i = 0, len = slides.length;\n          i < len;\n          i++\n        ) {\n          const slide = slides[i]\n\n          // Don't bother updating invisible slides\n          if (slide.style.display === \"none\") {\n            continue\n          }\n\n          if (\n            config.center ||\n            slide.classList.contains(\"center\")\n          ) {\n            // Vertical stacks are not centred since their section\n            // children will be\n            if (slide.classList.contains(\"stack\")) {\n              slide.style.top = 0\n            } else {\n              slide.style.top =\n                Math.max(\n                  (size.height - slide.scrollHeight) /\n                    2,\n                  0\n                ) + \"px\"\n            }\n          } else {\n            slide.style.top = \"\"\n          }\n        }\n\n        if (oldScale !== scale) {\n          dispatchEvent({\n            type: \"resize\",\n            data: {\n              oldScale,\n              scale,\n              size,\n            },\n          })\n        }\n      }\n\n      progress.update()\n      backgrounds.updateParallax()\n\n      if (overview.isActive()) {\n        overview.update()\n      }\n    }\n  }\n\n  /**\n   * Applies layout logic to the contents of all slides in\n   * the presentation.\n   *\n   * @param {string|number} width\n   * @param {string|number} height\n   */\n  function layoutSlideContents(width, height) {\n    // Handle sizing of elements with the 'r-stretch' class\n    Util.queryAll(\n      dom.slides,\n      \"section > .stretch, section > .r-stretch\"\n    ).forEach((element) => {\n      // Determine how much vertical space we can use\n      let remainingHeight = Util.getRemainingHeight(\n        element,\n        height\n      )\n\n      // Consider the aspect ratio of media elements\n      if (/(img|video)/gi.test(element.nodeName)) {\n        const nw =\n            element.naturalWidth || element.videoWidth,\n          nh =\n            element.naturalHeight ||\n            element.videoHeight\n\n        const es = Math.min(\n          width / nw,\n          remainingHeight / nh\n        )\n\n        element.style.width = nw * es + \"px\"\n        element.style.height = nh * es + \"px\"\n      } else {\n        element.style.width = width + \"px\"\n        element.style.height = remainingHeight + \"px\"\n      }\n    })\n  }\n\n  /**\n   * Calculates the computed pixel size of our slides. These\n   * values are based on the width and height configuration\n   * options.\n   *\n   * @param {number} [presentationWidth=dom.wrapper.offsetWidth]\n   * @param {number} [presentationHeight=dom.wrapper.offsetHeight]\n   */\n  function getComputedSlideSize(\n    presentationWidth,\n    presentationHeight\n  ) {\n    const size = {\n      // Slide size\n      width: config.width,\n      height: config.height,\n\n      // Presentation size\n      presentationWidth:\n        presentationWidth || dom.wrapper.offsetWidth,\n      presentationHeight:\n        presentationHeight || dom.wrapper.offsetHeight,\n    }\n\n    // Reduce available space by margin\n    size.presentationWidth -=\n      size.presentationWidth * config.margin\n    size.presentationHeight -=\n      size.presentationHeight * config.margin\n\n    // Slide width may be a percentage of available width\n    if (\n      typeof size.width === \"string\" &&\n      /%$/.test(size.width)\n    ) {\n      size.width =\n        (parseInt(size.width, 10) / 100) *\n        size.presentationWidth\n    }\n\n    // Slide height may be a percentage of available height\n    if (\n      typeof size.height === \"string\" &&\n      /%$/.test(size.height)\n    ) {\n      size.height =\n        (parseInt(size.height, 10) / 100) *\n        size.presentationHeight\n    }\n\n    return size\n  }\n\n  /**\n   * Stores the vertical index of a stack so that the same\n   * vertical slide can be selected when navigating to and\n   * from the stack.\n   *\n   * @param {HTMLElement} stack The vertical stack element\n   * @param {string|number} [v=0] Index to memorize\n   */\n  function setPreviousVerticalIndex(stack, v) {\n    if (\n      typeof stack === \"object\" &&\n      typeof stack.setAttribute === \"function\"\n    ) {\n      stack.setAttribute(\n        \"data-previous-indexv\",\n        v || 0\n      )\n    }\n  }\n\n  /**\n   * Retrieves the vertical index which was stored using\n   * #setPreviousVerticalIndex() or 0 if no previous index\n   * exists.\n   *\n   * @param {HTMLElement} stack The vertical stack element\n   */\n  function getPreviousVerticalIndex(stack) {\n    if (\n      typeof stack === \"object\" &&\n      typeof stack.setAttribute === \"function\" &&\n      stack.classList.contains(\"stack\")\n    ) {\n      // Prefer manually defined start-indexv\n      const attributeName = stack.hasAttribute(\n        \"data-start-indexv\"\n      )\n        ? \"data-start-indexv\"\n        : \"data-previous-indexv\"\n\n      return parseInt(\n        stack.getAttribute(attributeName) || 0,\n        10\n      )\n    }\n\n    return 0\n  }\n\n  /**\n   * Checks if the current or specified slide is vertical\n   * (nested within another slide).\n   *\n   * @param {HTMLElement} [slide=currentSlide] The slide to check\n   * orientation of\n   * @return {Boolean}\n   */\n  function isVerticalSlide(slide = currentSlide) {\n    return (\n      slide &&\n      slide.parentNode &&\n      !!slide.parentNode.nodeName.match(/section/i)\n    )\n  }\n\n  /**\n   * Returns true if we're on the last slide in the current\n   * vertical stack.\n   */\n  function isLastVerticalSlide() {\n    if (\n      currentSlide &&\n      isVerticalSlide(currentSlide)\n    ) {\n      // Does this slide have a next sibling?\n      if (currentSlide.nextElementSibling) return false\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Returns true if we're currently on the first slide in\n   * the presentation.\n   */\n  function isFirstSlide() {\n    return indexh === 0 && indexv === 0\n  }\n\n  /**\n   * Returns true if we're currently on the last slide in\n   * the presenation. If the last slide is a stack, we only\n   * consider this the last slide if it's at the end of the\n   * stack.\n   */\n  function isLastSlide() {\n    if (currentSlide) {\n      // Does this slide have a next sibling?\n      if (currentSlide.nextElementSibling) return false\n\n      // If it's vertical, does its parent have a next sibling?\n      if (\n        isVerticalSlide(currentSlide) &&\n        currentSlide.parentNode.nextElementSibling\n      )\n        return false\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Enters the paused mode which fades everything on screen to\n   * black.\n   */\n  function pause() {\n    if (config.pause) {\n      const wasPaused =\n        dom.wrapper.classList.contains(\"paused\")\n\n      cancelAutoSlide()\n      dom.wrapper.classList.add(\"paused\")\n\n      if (wasPaused === false) {\n        dispatchEvent({ type: \"paused\" })\n      }\n    }\n  }\n\n  /**\n   * Exits from the paused mode.\n   */\n  function resume() {\n    const wasPaused =\n      dom.wrapper.classList.contains(\"paused\")\n    dom.wrapper.classList.remove(\"paused\")\n\n    cueAutoSlide()\n\n    if (wasPaused) {\n      dispatchEvent({ type: \"resumed\" })\n    }\n  }\n\n  /**\n   * Toggles the paused mode on and off.\n   */\n  function togglePause(override) {\n    if (typeof override === \"boolean\") {\n      override ? pause() : resume()\n    } else {\n      isPaused() ? resume() : pause()\n    }\n  }\n\n  /**\n   * Checks if we are currently in the paused mode.\n   *\n   * @return {Boolean}\n   */\n  function isPaused() {\n    return dom.wrapper.classList.contains(\"paused\")\n  }\n\n  /**\n   * Toggles the auto slide mode on and off.\n   *\n   * @param {Boolean} [override] Flag which sets the desired state.\n   * True means autoplay starts, false means it stops.\n   */\n\n  function toggleAutoSlide(override) {\n    if (typeof override === \"boolean\") {\n      override ? resumeAutoSlide() : pauseAutoSlide()\n    } else {\n      autoSlidePaused\n        ? resumeAutoSlide()\n        : pauseAutoSlide()\n    }\n  }\n\n  /**\n   * Checks if the auto slide mode is currently on.\n   *\n   * @return {Boolean}\n   */\n  function isAutoSliding() {\n    return !!(autoSlide && !autoSlidePaused)\n  }\n\n  /**\n   * Steps from the current point in the presentation to the\n   * slide which matches the specified horizontal and vertical\n   * indices.\n   *\n   * @param {number} [h=indexh] Horizontal index of the target slide\n   * @param {number} [v=indexv] Vertical index of the target slide\n   * @param {number} [f] Index of a fragment within the\n   * target slide to activate\n   * @param {number} [origin] Origin for use in multimaster environments\n   */\n  function slide(h, v, f, origin) {\n    // Dispatch an event before hte slide\n    const slidechange = dispatchEvent({\n      type: \"beforeslidechange\",\n      data: {\n        indexh: h === undefined ? indexh : h,\n        indexv: v === undefined ? indexv : v,\n        origin,\n      },\n    })\n\n    // Abort if this slide change was prevented by an event listener\n    if (slidechange.defaultPrevented) return\n\n    // Remember where we were at before\n    previousSlide = currentSlide\n\n    // Query all horizontal slides in the deck\n    const horizontalSlides =\n      dom.wrapper.querySelectorAll(\n        HORIZONTAL_SLIDES_SELECTOR\n      )\n\n    // Abort if there are no slides\n    if (horizontalSlides.length === 0) return\n\n    // If no vertical index is specified and the upcoming slide is a\n    // stack, resume at its previous vertical index\n    if (v === undefined && !overview.isActive()) {\n      v = getPreviousVerticalIndex(horizontalSlides[h])\n    }\n\n    // If we were on a vertical stack, remember what vertical index\n    // it was on so we can resume at the same position when returning\n    if (\n      previousSlide &&\n      previousSlide.parentNode &&\n      previousSlide.parentNode.classList.contains(\n        \"stack\"\n      )\n    ) {\n      setPreviousVerticalIndex(\n        previousSlide.parentNode,\n        indexv\n      )\n    }\n\n    // Remember the state before this slide\n    const stateBefore = state.concat()\n\n    // Reset the state array\n    state.length = 0\n\n    let indexhBefore = indexh || 0,\n      indexvBefore = indexv || 0\n\n    // Activate and transition to the new slide\n    indexh = updateSlides(\n      HORIZONTAL_SLIDES_SELECTOR,\n      h === undefined ? indexh : h\n    )\n    indexv = updateSlides(\n      VERTICAL_SLIDES_SELECTOR,\n      v === undefined ? indexv : v\n    )\n\n    // Dispatch an event if the slide changed\n    let slideChanged =\n      indexh !== indexhBefore ||\n      indexv !== indexvBefore\n\n    // Ensure that the previous slide is never the same as the current\n    if (!slideChanged) previousSlide = null\n\n    // Find the current horizontal slide and any possible vertical slides\n    // within it\n    let currentHorizontalSlide =\n        horizontalSlides[indexh],\n      currentVerticalSlides =\n        currentHorizontalSlide.querySelectorAll(\n          \"section\"\n        )\n\n    // Store references to the previous and current slides\n    currentSlide =\n      currentVerticalSlides[indexv] ||\n      currentHorizontalSlide\n\n    let autoAnimateTransition = false\n\n    // Detect if we're moving between two auto-animated slides\n    if (\n      slideChanged &&\n      previousSlide &&\n      currentSlide &&\n      !overview.isActive()\n    ) {\n      // If this is an auto-animated transition, we disable the\n      // regular slide transition\n      //\n      // Note 20-03-2020:\n      // This needs to happen before we update slide visibility,\n      // otherwise transitions will still run in Safari.\n      if (\n        previousSlide.hasAttribute(\n          \"data-auto-animate\"\n        ) &&\n        currentSlide.hasAttribute(\n          \"data-auto-animate\"\n        ) &&\n        previousSlide.getAttribute(\n          \"data-auto-animate-id\"\n        ) ===\n          currentSlide.getAttribute(\n            \"data-auto-animate-id\"\n          ) &&\n        !(\n          indexh > indexhBefore ||\n          indexv > indexvBefore\n            ? currentSlide\n            : previousSlide\n        ).hasAttribute(\"data-auto-animate-restart\")\n      ) {\n        autoAnimateTransition = true\n        dom.slides.classList.add(\n          \"disable-slide-transitions\"\n        )\n      }\n\n      transition = \"running\"\n    }\n\n    // Update the visibility of slides now that the indices have changed\n    updateSlidesVisibility()\n\n    layout()\n\n    // Update the overview if it's currently active\n    if (overview.isActive()) {\n      overview.update()\n    }\n\n    // Show fragment, if specified\n    if (typeof f !== \"undefined\") {\n      fragments.goto(f)\n    }\n\n    // Solves an edge case where the previous slide maintains the\n    // 'present' class when navigating between adjacent vertical\n    // stacks\n    if (\n      previousSlide &&\n      previousSlide !== currentSlide\n    ) {\n      previousSlide.classList.remove(\"present\")\n      previousSlide.setAttribute(\"aria-hidden\", \"true\")\n\n      // Reset all slides upon navigate to home\n      if (isFirstSlide()) {\n        // Launch async task\n        setTimeout(() => {\n          getVerticalStacks().forEach((slide) => {\n            setPreviousVerticalIndex(slide, 0)\n          })\n        }, 0)\n      }\n    }\n\n    // Apply the new state\n    stateLoop: for (\n      let i = 0, len = state.length;\n      i < len;\n      i++\n    ) {\n      // Check if this state existed on the previous slide. If it\n      // did, we will avoid adding it repeatedly\n      for (let j = 0; j < stateBefore.length; j++) {\n        if (stateBefore[j] === state[i]) {\n          stateBefore.splice(j, 1)\n          continue stateLoop\n        }\n      }\n\n      dom.viewport.classList.add(state[i])\n\n      // Dispatch custom event matching the state's name\n      dispatchEvent({ type: state[i] })\n    }\n\n    // Clean up the remains of the previous state\n    while (stateBefore.length) {\n      dom.viewport.classList.remove(stateBefore.pop())\n    }\n\n    if (slideChanged) {\n      dispatchEvent({\n        type: \"slidechanged\",\n        data: {\n          indexh,\n          indexv,\n          previousSlide,\n          currentSlide,\n          origin,\n        },\n      })\n    }\n\n    // Handle embedded content\n    if (slideChanged || !previousSlide) {\n      slideContent.stopEmbeddedContent(previousSlide)\n      slideContent.startEmbeddedContent(currentSlide)\n    }\n\n    // Announce the current slide contents to screen readers\n    // Use animation frame to prevent getComputedStyle in getStatusText\n    // from triggering layout mid-frame\n    requestAnimationFrame(() => {\n      announceStatus(getStatusText(currentSlide))\n    })\n\n    progress.update()\n    controls.update()\n    notes.update()\n    backgrounds.update()\n    backgrounds.updateParallax()\n    slideNumber.update()\n    fragments.update()\n\n    // Update the URL hash\n    location.writeURL()\n\n    cueAutoSlide()\n\n    // Auto-animation\n    if (autoAnimateTransition) {\n      setTimeout(() => {\n        dom.slides.classList.remove(\n          \"disable-slide-transitions\"\n        )\n      }, 0)\n\n      if (config.autoAnimate) {\n        // Run the auto-animation between our slides\n        autoAnimate.run(previousSlide, currentSlide)\n      }\n    }\n  }\n\n  /**\n   * Syncs the presentation with the current DOM. Useful\n   * when new slides or control elements are added or when\n   * the configuration has changed.\n   */\n  function sync() {\n    // Subscribe to input\n    removeEventListeners()\n    addEventListeners()\n\n    // Force a layout to make sure the current config is accounted for\n    layout()\n\n    // Reflect the current autoSlide value\n    autoSlide = config.autoSlide\n\n    // Start auto-sliding if it's enabled\n    cueAutoSlide()\n\n    // Re-create all slide backgrounds\n    backgrounds.create()\n\n    // Write the current hash to the URL\n    location.writeURL()\n\n    fragments.sortAll()\n\n    controls.update()\n    progress.update()\n\n    updateSlidesVisibility()\n\n    notes.update()\n    notes.updateVisibility()\n    backgrounds.update(true)\n    slideNumber.update()\n    slideContent.formatEmbeddedContent()\n\n    // Start or stop embedded content depending on global config\n    if (config.autoPlayMedia === false) {\n      slideContent.stopEmbeddedContent(currentSlide, {\n        unloadIframes: false,\n      })\n    } else {\n      slideContent.startEmbeddedContent(currentSlide)\n    }\n\n    if (overview.isActive()) {\n      overview.layout()\n    }\n  }\n\n  /**\n   * Updates reveal.js to keep in sync with new slide attributes. For\n   * example, if you add a new `data-background-image` you can call\n   * this to have reveal.js render the new background image.\n   *\n   * Similar to #sync() but more efficient when you only need to\n   * refresh a specific slide.\n   *\n   * @param {HTMLElement} slide\n   */\n  function syncSlide(slide = currentSlide) {\n    backgrounds.sync(slide)\n    fragments.sync(slide)\n\n    slideContent.load(slide)\n\n    backgrounds.update()\n    notes.update()\n  }\n\n  /**\n   * Resets all vertical slides so that only the first\n   * is visible.\n   */\n  function resetVerticalSlides() {\n    getHorizontalSlides().forEach(\n      (horizontalSlide) => {\n        Util.queryAll(\n          horizontalSlide,\n          \"section\"\n        ).forEach((verticalSlide, y) => {\n          if (y > 0) {\n            verticalSlide.classList.remove(\"present\")\n            verticalSlide.classList.remove(\"past\")\n            verticalSlide.classList.add(\"future\")\n            verticalSlide.setAttribute(\n              \"aria-hidden\",\n              \"true\"\n            )\n          }\n        })\n      }\n    )\n  }\n\n  /**\n   * Randomly shuffles all slides in the deck.\n   */\n  function shuffle(slides = getHorizontalSlides()) {\n    slides.forEach((slide, i) => {\n      // Insert the slide next to a randomly picked sibling slide\n      // slide. This may cause the slide to insert before itself,\n      // but that's not an issue.\n      let beforeSlide =\n        slides[\n          Math.floor(Math.random() * slides.length)\n        ]\n      if (\n        beforeSlide.parentNode === slide.parentNode\n      ) {\n        slide.parentNode.insertBefore(\n          slide,\n          beforeSlide\n        )\n      }\n\n      // Randomize the order of vertical slides (if there are any)\n      let verticalSlides =\n        slide.querySelectorAll(\"section\")\n      if (verticalSlides.length) {\n        shuffle(verticalSlides)\n      }\n    })\n  }\n\n  /**\n   * Updates one dimension of slides by showing the slide\n   * with the specified index.\n   *\n   * @param {string} selector A CSS selector that will fetch\n   * the group of slides we are working with\n   * @param {number} index The index of the slide that should be\n   * shown\n   *\n   * @return {number} The index of the slide that is now shown,\n   * might differ from the passed in index if it was out of\n   * bounds.\n   */\n  function updateSlides(selector, index) {\n    // Select all slides and convert the NodeList result to\n    // an array\n    let slides = Util.queryAll(dom.wrapper, selector),\n      slidesLength = slides.length\n\n    let printMode = print.isPrintingPDF()\n\n    if (slidesLength) {\n      // Should the index loop?\n      if (config.loop) {\n        index %= slidesLength\n\n        if (index < 0) {\n          index = slidesLength + index\n        }\n      }\n\n      // Enforce max and minimum index bounds\n      index = Math.max(\n        Math.min(index, slidesLength - 1),\n        0\n      )\n\n      for (let i = 0; i < slidesLength; i++) {\n        let element = slides[i]\n\n        let reverse =\n          config.rtl && !isVerticalSlide(element)\n\n        // Avoid .remove() with multiple args for IE11 support\n        element.classList.remove(\"past\")\n        element.classList.remove(\"present\")\n        element.classList.remove(\"future\")\n\n        // http://www.w3.org/html/wg/drafts/html/master/editing.html#the-hidden-attribute\n        element.setAttribute(\"hidden\", \"\")\n        element.setAttribute(\"aria-hidden\", \"true\")\n\n        // If this element contains vertical slides\n        if (element.querySelector(\"section\")) {\n          element.classList.add(\"stack\")\n        }\n\n        // If we're printing static slides, all slides are \"present\"\n        if (printMode) {\n          element.classList.add(\"present\")\n          continue\n        }\n\n        if (i < index) {\n          // Any element previous to index is given the 'past' class\n          element.classList.add(\n            reverse ? \"future\" : \"past\"\n          )\n\n          if (config.fragments) {\n            // Show all fragments in prior slides\n            Util.queryAll(\n              element,\n              \".fragment\"\n            ).forEach((fragment) => {\n              fragment.classList.add(\"visible\")\n              fragment.classList.remove(\n                \"current-fragment\"\n              )\n            })\n          }\n        } else if (i > index) {\n          // Any element subsequent to index is given the 'future' class\n          element.classList.add(\n            reverse ? \"past\" : \"future\"\n          )\n\n          if (config.fragments) {\n            // Hide all fragments in future slides\n            Util.queryAll(\n              element,\n              \".fragment.visible\"\n            ).forEach((fragment) => {\n              fragment.classList.remove(\n                \"visible\",\n                \"current-fragment\"\n              )\n            })\n          }\n        }\n      }\n\n      let slide = slides[index]\n      let wasPresent =\n        slide.classList.contains(\"present\")\n\n      // Mark the current slide as present\n      slide.classList.add(\"present\")\n      slide.removeAttribute(\"hidden\")\n      slide.removeAttribute(\"aria-hidden\")\n\n      if (!wasPresent) {\n        // Dispatch an event indicating the slide is now visible\n        dispatchEvent({\n          target: slide,\n          type: \"visible\",\n          bubbles: false,\n        })\n      }\n\n      // If this slide has a state associated with it, add it\n      // onto the current state of the deck\n      let slideState = slide.getAttribute(\"data-state\")\n      if (slideState) {\n        state = state.concat(slideState.split(\" \"))\n      }\n    } else {\n      // Since there are no slides we can't be anywhere beyond the\n      // zeroth index\n      index = 0\n    }\n\n    return index\n  }\n\n  /**\n   * Optimization method; hide all slides that are far away\n   * from the present slide.\n   */\n  function updateSlidesVisibility() {\n    // Select all slides and convert the NodeList result to\n    // an array\n    let horizontalSlides = getHorizontalSlides(),\n      horizontalSlidesLength = horizontalSlides.length,\n      distanceX,\n      distanceY\n\n    if (\n      horizontalSlidesLength &&\n      typeof indexh !== \"undefined\"\n    ) {\n      // The number of steps away from the present slide that will\n      // be visible\n      let viewDistance = overview.isActive()\n        ? 10\n        : config.viewDistance\n\n      // Shorten the view distance on devices that typically have\n      // less resources\n      if (Device.isMobile) {\n        viewDistance = overview.isActive()\n          ? 6\n          : config.mobileViewDistance\n      }\n\n      // All slides need to be visible when exporting to PDF\n      if (print.isPrintingPDF()) {\n        viewDistance = Number.MAX_VALUE\n      }\n\n      for (\n        let x = 0;\n        x < horizontalSlidesLength;\n        x++\n      ) {\n        let horizontalSlide = horizontalSlides[x]\n\n        let verticalSlides = Util.queryAll(\n            horizontalSlide,\n            \"section\"\n          ),\n          verticalSlidesLength = verticalSlides.length\n\n        // Determine how far away this slide is from the present\n        distanceX = Math.abs((indexh || 0) - x) || 0\n\n        // If the presentation is looped, distance should measure\n        // 1 between the first and last slides\n        if (config.loop) {\n          distanceX =\n            Math.abs(\n              ((indexh || 0) - x) %\n                (horizontalSlidesLength - viewDistance)\n            ) || 0\n        }\n\n        // Show the horizontal slide if it's within the view distance\n        if (distanceX < viewDistance) {\n          slideContent.load(horizontalSlide)\n        } else {\n          slideContent.unload(horizontalSlide)\n        }\n\n        if (verticalSlidesLength) {\n          let oy = getPreviousVerticalIndex(\n            horizontalSlide\n          )\n\n          for (\n            let y = 0;\n            y < verticalSlidesLength;\n            y++\n          ) {\n            let verticalSlide = verticalSlides[y]\n\n            distanceY =\n              x === (indexh || 0)\n                ? Math.abs((indexv || 0) - y)\n                : Math.abs(y - oy)\n\n            if (distanceX + distanceY < viewDistance) {\n              slideContent.load(verticalSlide)\n            } else {\n              slideContent.unload(verticalSlide)\n            }\n          }\n        }\n      }\n\n      // Flag if there are ANY vertical slides, anywhere in the deck\n      if (hasVerticalSlides()) {\n        dom.wrapper.classList.add(\n          \"has-vertical-slides\"\n        )\n      } else {\n        dom.wrapper.classList.remove(\n          \"has-vertical-slides\"\n        )\n      }\n\n      // Flag if there are ANY horizontal slides, anywhere in the deck\n      if (hasHorizontalSlides()) {\n        dom.wrapper.classList.add(\n          \"has-horizontal-slides\"\n        )\n      } else {\n        dom.wrapper.classList.remove(\n          \"has-horizontal-slides\"\n        )\n      }\n    }\n  }\n\n  /**\n   * Determine what available routes there are for navigation.\n   *\n   * @return {{left: boolean, right: boolean, up: boolean, down: boolean}}\n   */\n  function availableRoutes({\n    includeFragments = false,\n  } = {}) {\n    let horizontalSlides =\n        dom.wrapper.querySelectorAll(\n          HORIZONTAL_SLIDES_SELECTOR\n        ),\n      verticalSlides = dom.wrapper.querySelectorAll(\n        VERTICAL_SLIDES_SELECTOR\n      )\n\n    let routes = {\n      left: indexh > 0,\n      right: indexh < horizontalSlides.length - 1,\n      up: indexv > 0,\n      down: indexv < verticalSlides.length - 1,\n    }\n\n    // Looped presentations can always be navigated as long as\n    // there are slides available\n    if (config.loop) {\n      if (horizontalSlides.length > 1) {\n        routes.left = true\n        routes.right = true\n      }\n\n      if (verticalSlides.length > 1) {\n        routes.up = true\n        routes.down = true\n      }\n    }\n\n    if (\n      horizontalSlides.length > 1 &&\n      config.navigationMode === \"linear\"\n    ) {\n      routes.right = routes.right || routes.down\n      routes.left = routes.left || routes.up\n    }\n\n    // If includeFragments is set, a route will be considered\n    // availalbe if either a slid OR fragment is available in\n    // the given direction\n    if (includeFragments === true) {\n      let fragmentRoutes = fragments.availableRoutes()\n      routes.left = routes.left || fragmentRoutes.prev\n      routes.up = routes.up || fragmentRoutes.prev\n      routes.down = routes.down || fragmentRoutes.next\n      routes.right =\n        routes.right || fragmentRoutes.next\n    }\n\n    // Reverse horizontal controls for rtl\n    if (config.rtl) {\n      let left = routes.left\n      routes.left = routes.right\n      routes.right = left\n    }\n\n    return routes\n  }\n\n  /**\n   * Returns the number of past slides. This can be used as a global\n   * flattened index for slides.\n   *\n   * @param {HTMLElement} [slide=currentSlide] The slide we're counting before\n   *\n   * @return {number} Past slide count\n   */\n  function getSlidePastCount(slide = currentSlide) {\n    let horizontalSlides = getHorizontalSlides()\n\n    // The number of past slides\n    let pastCount = 0\n\n    // Step through all slides and count the past ones\n    mainLoop: for (\n      let i = 0;\n      i < horizontalSlides.length;\n      i++\n    ) {\n      let horizontalSlide = horizontalSlides[i]\n      let verticalSlides =\n        horizontalSlide.querySelectorAll(\"section\")\n\n      for (let j = 0; j < verticalSlides.length; j++) {\n        // Stop as soon as we arrive at the present\n        if (verticalSlides[j] === slide) {\n          break mainLoop\n        }\n\n        // Don't count slides with the \"uncounted\" class\n        if (\n          verticalSlides[j].dataset.visibility !==\n          \"uncounted\"\n        ) {\n          pastCount++\n        }\n      }\n\n      // Stop as soon as we arrive at the present\n      if (horizontalSlide === slide) {\n        break\n      }\n\n      // Don't count the wrapping section for vertical slides and\n      // slides marked as uncounted\n      if (\n        horizontalSlide.classList.contains(\"stack\") ===\n          false &&\n        horizontalSlide.dataset.visibility !==\n          \"uncounted\"\n      ) {\n        pastCount++\n      }\n    }\n\n    return pastCount\n  }\n\n  /**\n   * Returns a value ranging from 0-1 that represents\n   * how far into the presentation we have navigated.\n   *\n   * @return {number}\n   */\n  function getProgress() {\n    // The number of past and total slides\n    let totalCount = getTotalSlides()\n    let pastCount = getSlidePastCount()\n\n    if (currentSlide) {\n      let allFragments =\n        currentSlide.querySelectorAll(\".fragment\")\n\n      // If there are fragments in the current slide those should be\n      // accounted for in the progress.\n      if (allFragments.length > 0) {\n        let visibleFragments =\n          currentSlide.querySelectorAll(\n            \".fragment.visible\"\n          )\n\n        // This value represents how big a portion of the slide progress\n        // that is made up by its fragments (0-1)\n        let fragmentWeight = 0.9\n\n        // Add fragment progress to the past slide count\n        pastCount +=\n          (visibleFragments.length /\n            allFragments.length) *\n          fragmentWeight\n      }\n    }\n\n    return Math.min(pastCount / (totalCount - 1), 1)\n  }\n\n  /**\n   * Retrieves the h/v location and fragment of the current,\n   * or specified, slide.\n   *\n   * @param {HTMLElement} [slide] If specified, the returned\n   * index will be for this slide rather than the currently\n   * active one\n   *\n   * @return {{h: number, v: number, f: number}}\n   */\n  function getIndices(slide) {\n    // By default, return the current indices\n    let h = indexh,\n      v = indexv,\n      f\n\n    // If a slide is specified, return the indices of that slide\n    if (slide) {\n      let isVertical = isVerticalSlide(slide)\n      let slideh = isVertical\n        ? slide.parentNode\n        : slide\n\n      // Select all horizontal slides\n      let horizontalSlides = getHorizontalSlides()\n\n      // Now that we know which the horizontal slide is, get its index\n      h = Math.max(horizontalSlides.indexOf(slideh), 0)\n\n      // Assume we're not vertical\n      v = undefined\n\n      // If this is a vertical slide, grab the vertical index\n      if (isVertical) {\n        v = Math.max(\n          Util.queryAll(\n            slide.parentNode,\n            \"section\"\n          ).indexOf(slide),\n          0\n        )\n      }\n    }\n\n    if (!slide && currentSlide) {\n      let hasFragments =\n        currentSlide.querySelectorAll(\".fragment\")\n          .length > 0\n      if (hasFragments) {\n        let currentFragment =\n          currentSlide.querySelector(\n            \".current-fragment\"\n          )\n        if (\n          currentFragment &&\n          currentFragment.hasAttribute(\n            \"data-fragment-index\"\n          )\n        ) {\n          f = parseInt(\n            currentFragment.getAttribute(\n              \"data-fragment-index\"\n            ),\n            10\n          )\n        } else {\n          f =\n            currentSlide.querySelectorAll(\n              \".fragment.visible\"\n            ).length - 1\n        }\n      }\n    }\n\n    return { h, v, f }\n  }\n\n  /**\n   * Retrieves all slides in this presentation.\n   */\n  function getSlides() {\n    return Util.queryAll(\n      dom.wrapper,\n      SLIDES_SELECTOR +\n        ':not(.stack):not([data-visibility=\"uncounted\"])'\n    )\n  }\n\n  /**\n   * Returns a list of all horizontal slides in the deck. Each\n   * vertical stack is included as one horizontal slide in the\n   * resulting array.\n   */\n  function getHorizontalSlides() {\n    return Util.queryAll(\n      dom.wrapper,\n      HORIZONTAL_SLIDES_SELECTOR\n    )\n  }\n\n  /**\n   * Returns all vertical slides that exist within this deck.\n   */\n  function getVerticalSlides() {\n    return Util.queryAll(\n      dom.wrapper,\n      \".slides>section>section\"\n    )\n  }\n\n  /**\n   * Returns all vertical stacks (each stack can contain multiple slides).\n   */\n  function getVerticalStacks() {\n    return Util.queryAll(\n      dom.wrapper,\n      HORIZONTAL_SLIDES_SELECTOR + \".stack\"\n    )\n  }\n\n  /**\n   * Returns true if there are at least two horizontal slides.\n   */\n  function hasHorizontalSlides() {\n    return getHorizontalSlides().length > 1\n  }\n\n  /**\n   * Returns true if there are at least two vertical slides.\n   */\n  function hasVerticalSlides() {\n    return getVerticalSlides().length > 1\n  }\n\n  /**\n   * Returns an array of objects where each object represents the\n   * attributes on its respective slide.\n   */\n  function getSlidesAttributes() {\n    return getSlides().map((slide) => {\n      let attributes = {}\n      for (\n        let i = 0;\n        i < slide.attributes.length;\n        i++\n      ) {\n        let attribute = slide.attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n      return attributes\n    })\n  }\n\n  /**\n   * Retrieves the total number of slides in this presentation.\n   *\n   * @return {number}\n   */\n  function getTotalSlides() {\n    return getSlides().length\n  }\n\n  /**\n   * Returns the slide element matching the specified index.\n   *\n   * @return {HTMLElement}\n   */\n  function getSlide(x, y) {\n    let horizontalSlide = getHorizontalSlides()[x]\n    let verticalSlides =\n      horizontalSlide &&\n      horizontalSlide.querySelectorAll(\"section\")\n\n    if (\n      verticalSlides &&\n      verticalSlides.length &&\n      typeof y === \"number\"\n    ) {\n      return verticalSlides\n        ? verticalSlides[y]\n        : undefined\n    }\n\n    return horizontalSlide\n  }\n\n  /**\n   * Returns the background element for the given slide.\n   * All slides, even the ones with no background properties\n   * defined, have a background element so as long as the\n   * index is valid an element will be returned.\n   *\n   * @param {mixed} x Horizontal background index OR a slide\n   * HTML element\n   * @param {number} y Vertical background index\n   * @return {(HTMLElement[]|*)}\n   */\n  function getSlideBackground(x, y) {\n    let slide =\n      typeof x === \"number\" ? getSlide(x, y) : x\n    if (slide) {\n      return slide.slideBackgroundElement\n    }\n\n    return undefined\n  }\n\n  /**\n   * Retrieves the current state of the presentation as\n   * an object. This state can then be restored at any\n   * time.\n   *\n   * @return {{indexh: number, indexv: number, indexf: number, paused: boolean, overview: boolean}}\n   */\n  function getState() {\n    let indices = getIndices()\n\n    return {\n      indexh: indices.h,\n      indexv: indices.v,\n      indexf: indices.f,\n      paused: isPaused(),\n      overview: overview.isActive(),\n    }\n  }\n\n  /**\n   * Restores the presentation to the given state.\n   *\n   * @param {object} state As generated by getState()\n   * @see {@link getState} generates the parameter `state`\n   */\n  function setState(state) {\n    if (typeof state === \"object\") {\n      slide(\n        Util.deserialize(state.indexh),\n        Util.deserialize(state.indexv),\n        Util.deserialize(state.indexf)\n      )\n\n      let pausedFlag = Util.deserialize(state.paused),\n        overviewFlag = Util.deserialize(state.overview)\n\n      if (\n        typeof pausedFlag === \"boolean\" &&\n        pausedFlag !== isPaused()\n      ) {\n        togglePause(pausedFlag)\n      }\n\n      if (\n        typeof overviewFlag === \"boolean\" &&\n        overviewFlag !== overview.isActive()\n      ) {\n        overview.toggle(overviewFlag)\n      }\n    }\n  }\n\n  /**\n   * Cues a new automated slide if enabled in the config.\n   */\n  function cueAutoSlide() {\n    cancelAutoSlide()\n\n    if (currentSlide && config.autoSlide !== false) {\n      let fragment = currentSlide.querySelector(\n        \".current-fragment\"\n      )\n\n      // When the slide first appears there is no \"current\" fragment so\n      // we look for a data-autoslide timing on the first fragment\n      if (!fragment)\n        fragment =\n          currentSlide.querySelector(\".fragment\")\n\n      let fragmentAutoSlide = fragment\n        ? fragment.getAttribute(\"data-autoslide\")\n        : null\n      let parentAutoSlide = currentSlide.parentNode\n        ? currentSlide.parentNode.getAttribute(\n            \"data-autoslide\"\n          )\n        : null\n      let slideAutoSlide = currentSlide.getAttribute(\n        \"data-autoslide\"\n      )\n\n      // Pick value in the following priority order:\n      // 1. Current fragment's data-autoslide\n      // 2. Current slide's data-autoslide\n      // 3. Parent slide's data-autoslide\n      // 4. Global autoSlide setting\n      if (fragmentAutoSlide) {\n        autoSlide = parseInt(fragmentAutoSlide, 10)\n      } else if (slideAutoSlide) {\n        autoSlide = parseInt(slideAutoSlide, 10)\n      } else if (parentAutoSlide) {\n        autoSlide = parseInt(parentAutoSlide, 10)\n      } else {\n        autoSlide = config.autoSlide\n\n        // If there are media elements with data-autoplay,\n        // automatically set the autoSlide duration to the\n        // length of that media. Not applicable if the slide\n        // is divided up into fragments.\n        // playbackRate is accounted for in the duration.\n        if (\n          currentSlide.querySelectorAll(\".fragment\")\n            .length === 0\n        ) {\n          Util.queryAll(\n            currentSlide,\n            \"video, audio\"\n          ).forEach((el) => {\n            if (el.hasAttribute(\"data-autoplay\")) {\n              if (\n                autoSlide &&\n                (el.duration * 1000) /\n                  el.playbackRate >\n                  autoSlide\n              ) {\n                autoSlide =\n                  (el.duration * 1000) /\n                    el.playbackRate +\n                  1000\n              }\n            }\n          })\n        }\n      }\n\n      // Cue the next auto-slide if:\n      // - There is an autoSlide value\n      // - Auto-sliding isn't paused by the user\n      // - The presentation isn't paused\n      // - The overview isn't active\n      // - The presentation isn't over\n      if (\n        autoSlide &&\n        !autoSlidePaused &&\n        !isPaused() &&\n        !overview.isActive() &&\n        (!isLastSlide() ||\n          fragments.availableRoutes().next ||\n          config.loop === true)\n      ) {\n        autoSlideTimeout = setTimeout(() => {\n          if (\n            typeof config.autoSlideMethod ===\n            \"function\"\n          ) {\n            config.autoSlideMethod()\n          } else {\n            navigateNext()\n          }\n          cueAutoSlide()\n        }, autoSlide)\n        autoSlideStartTime = Date.now()\n      }\n\n      if (autoSlidePlayer) {\n        autoSlidePlayer.setPlaying(\n          autoSlideTimeout !== -1\n        )\n      }\n    }\n  }\n\n  /**\n   * Cancels any ongoing request to auto-slide.\n   */\n  function cancelAutoSlide() {\n    clearTimeout(autoSlideTimeout)\n    autoSlideTimeout = -1\n  }\n\n  function pauseAutoSlide() {\n    if (autoSlide && !autoSlidePaused) {\n      autoSlidePaused = true\n      dispatchEvent({ type: \"autoslidepaused\" })\n      clearTimeout(autoSlideTimeout)\n\n      if (autoSlidePlayer) {\n        autoSlidePlayer.setPlaying(false)\n      }\n    }\n  }\n\n  function resumeAutoSlide() {\n    if (autoSlide && autoSlidePaused) {\n      autoSlidePaused = false\n      dispatchEvent({ type: \"autoslideresumed\" })\n      cueAutoSlide()\n    }\n  }\n\n  function navigateLeft({\n    skipFragments = false,\n  } = {}) {\n    navigationHistory.hasNavigatedHorizontally = true\n\n    // Reverse for RTL\n    if (config.rtl) {\n      if (\n        (overview.isActive() ||\n          skipFragments ||\n          fragments.next() === false) &&\n        availableRoutes().left\n      ) {\n        slide(\n          indexh + 1,\n          config.navigationMode === \"grid\"\n            ? indexv\n            : undefined\n        )\n      }\n    }\n    // Normal navigation\n    else if (\n      (overview.isActive() ||\n        skipFragments ||\n        fragments.prev() === false) &&\n      availableRoutes().left\n    ) {\n      slide(\n        indexh - 1,\n        config.navigationMode === \"grid\"\n          ? indexv\n          : undefined\n      )\n    }\n  }\n\n  function navigateRight({\n    skipFragments = false,\n  } = {}) {\n    navigationHistory.hasNavigatedHorizontally = true\n\n    // Reverse for RTL\n    if (config.rtl) {\n      if (\n        (overview.isActive() ||\n          skipFragments ||\n          fragments.prev() === false) &&\n        availableRoutes().right\n      ) {\n        slide(\n          indexh - 1,\n          config.navigationMode === \"grid\"\n            ? indexv\n            : undefined\n        )\n      }\n    }\n    // Normal navigation\n    else if (\n      (overview.isActive() ||\n        skipFragments ||\n        fragments.next() === false) &&\n      availableRoutes().right\n    ) {\n      slide(\n        indexh + 1,\n        config.navigationMode === \"grid\"\n          ? indexv\n          : undefined\n      )\n    }\n  }\n\n  function navigateUp({ skipFragments = false } = {}) {\n    // Prioritize hiding fragments\n    if (\n      (overview.isActive() ||\n        skipFragments ||\n        fragments.prev() === false) &&\n      availableRoutes().up\n    ) {\n      slide(indexh, indexv - 1)\n    }\n  }\n\n  function navigateDown({\n    skipFragments = false,\n  } = {}) {\n    navigationHistory.hasNavigatedVertically = true\n\n    // Prioritize revealing fragments\n    if (\n      (overview.isActive() ||\n        skipFragments ||\n        fragments.next() === false) &&\n      availableRoutes().down\n    ) {\n      slide(indexh, indexv + 1)\n    }\n  }\n\n  /**\n   * Navigates backwards, prioritized in the following order:\n   * 1) Previous fragment\n   * 2) Previous vertical slide\n   * 3) Previous horizontal slide\n   */\n  function navigatePrev({\n    skipFragments = false,\n  } = {}) {\n    // Prioritize revealing fragments\n    if (skipFragments || fragments.prev() === false) {\n      if (availableRoutes().up) {\n        navigateUp({ skipFragments })\n      } else {\n        // Fetch the previous horizontal slide, if there is one\n        let previousSlide\n\n        if (config.rtl) {\n          previousSlide = Util.queryAll(\n            dom.wrapper,\n            HORIZONTAL_SLIDES_SELECTOR + \".future\"\n          ).pop()\n        } else {\n          previousSlide = Util.queryAll(\n            dom.wrapper,\n            HORIZONTAL_SLIDES_SELECTOR + \".past\"\n          ).pop()\n        }\n\n        // When going backwards and arriving on a stack we start\n        // at the bottom of the stack\n        if (\n          previousSlide &&\n          previousSlide.classList.contains(\"stack\")\n        ) {\n          let v =\n            previousSlide.querySelectorAll(\"section\")\n              .length - 1 || undefined\n          let h = indexh - 1\n          slide(h, v)\n        } else {\n          navigateLeft({ skipFragments })\n        }\n      }\n    }\n  }\n\n  /**\n   * The reverse of #navigatePrev().\n   */\n  function navigateNext({\n    skipFragments = false,\n  } = {}) {\n    navigationHistory.hasNavigatedHorizontally = true\n    navigationHistory.hasNavigatedVertically = true\n\n    // Prioritize revealing fragments\n    if (skipFragments || fragments.next() === false) {\n      let routes = availableRoutes()\n\n      // When looping is enabled `routes.down` is always available\n      // so we need a separate check for when we've reached the\n      // end of a stack and should move horizontally\n      if (\n        routes.down &&\n        routes.right &&\n        config.loop &&\n        isLastVerticalSlide()\n      ) {\n        routes.down = false\n      }\n\n      if (routes.down) {\n        navigateDown({ skipFragments })\n      } else if (config.rtl) {\n        navigateLeft({ skipFragments })\n      } else {\n        navigateRight({ skipFragments })\n      }\n    }\n  }\n\n  // --------------------------------------------------------------------//\n  // ----------------------------- EVENTS -------------------------------//\n  // --------------------------------------------------------------------//\n\n  /**\n   * Called by all event handlers that are based on user\n   * input.\n   *\n   * @param {object} [event]\n   */\n  function onUserInput(event) {\n    if (config.autoSlideStoppable) {\n      pauseAutoSlide()\n    }\n  }\n\n  /**\n   * Event listener for transition end on the current slide.\n   *\n   * @param {object} [event]\n   */\n  function onTransitionEnd(event) {\n    if (\n      transition === \"running\" &&\n      /section/gi.test(event.target.nodeName)\n    ) {\n      transition = \"idle\"\n      dispatchEvent({\n        type: \"slidetransitionend\",\n        data: {\n          indexh,\n          indexv,\n          previousSlide,\n          currentSlide,\n        },\n      })\n    }\n  }\n\n  /**\n   * A global listener for all click events inside of the\n   * .slides container.\n   *\n   * @param {object} [event]\n   */\n  function onSlidesClicked(event) {\n    const anchor = Util.closest(\n      event.target,\n      'a[href^=\"#\"]'\n    )\n\n    // If a hash link is clicked, we find the target slide\n    // and navigate to it. We previously relied on 'hashchange'\n    // for links like these but that prevented media with\n    // audio tracks from playing in mobile browsers since it\n    // wasn't considered a direct interaction with the document.\n    if (anchor) {\n      const hash = anchor.getAttribute(\"href\")\n      const indices = location.getIndicesFromHash(hash)\n\n      if (indices) {\n        Reveal.slide(indices.h, indices.v, indices.f)\n        event.preventDefault()\n      }\n    }\n  }\n\n  /**\n   * Handler for the window level 'resize' event.\n   *\n   * @param {object} [event]\n   */\n  function onWindowResize(event) {\n    layout()\n  }\n\n  /**\n   * Handle for the window level 'visibilitychange' event.\n   *\n   * @param {object} [event]\n   */\n  function onPageVisibilityChange(event) {\n    // If, after clicking a link or similar and we're coming back,\n    // focus the document.body to ensure we can use keyboard shortcuts\n    if (\n      document.hidden === false &&\n      document.activeElement !== document.body\n    ) {\n      // Not all elements support .blur() - SVGs among them.\n      if (\n        typeof document.activeElement.blur ===\n        \"function\"\n      ) {\n        document.activeElement.blur()\n      }\n      document.body.focus()\n    }\n  }\n\n  /**\n   * Handler for the document level 'fullscreenchange' event.\n   *\n   * @param {object} [event]\n   */\n  function onFullscreenChange(event) {\n    let element =\n      document.fullscreenElement ||\n      document.webkitFullscreenElement\n    if (element === dom.wrapper) {\n      event.stopImmediatePropagation()\n\n      // Timeout to avoid layout shift in Safari\n      setTimeout(() => {\n        Reveal.layout()\n        Reveal.focus.focus() // focus.focus :'(\n      }, 1)\n    }\n  }\n\n  /**\n   * Handles clicks on links that are set to preview in the\n   * iframe overlay.\n   *\n   * @param {object} event\n   */\n  function onPreviewLinkClicked(event) {\n    if (\n      event.currentTarget &&\n      event.currentTarget.hasAttribute(\"href\")\n    ) {\n      let url =\n        event.currentTarget.getAttribute(\"href\")\n      if (url) {\n        showPreview(url)\n        event.preventDefault()\n      }\n    }\n  }\n\n  /**\n   * Handles click on the auto-sliding controls element.\n   *\n   * @param {object} [event]\n   */\n  function onAutoSlidePlayerClick(event) {\n    // Replay\n    if (isLastSlide() && config.loop === false) {\n      slide(0, 0)\n      resumeAutoSlide()\n    }\n    // Resume\n    else if (autoSlidePaused) {\n      resumeAutoSlide()\n    }\n    // Pause\n    else {\n      pauseAutoSlide()\n    }\n  }\n\n  // --------------------------------------------------------------------//\n  // ------------------------------- API --------------------------------//\n  // --------------------------------------------------------------------//\n\n  // The public reveal.js API\n  const API = {\n    VERSION,\n\n    initialize,\n    configure,\n\n    sync,\n    syncSlide,\n    syncFragments: fragments.sync.bind(fragments),\n\n    // Navigation methods\n    slide,\n    left: navigateLeft,\n    right: navigateRight,\n    up: navigateUp,\n    down: navigateDown,\n    prev: navigatePrev,\n    next: navigateNext,\n\n    // Navigation aliases\n    navigateLeft,\n    navigateRight,\n    navigateUp,\n    navigateDown,\n    navigatePrev,\n    navigateNext,\n\n    // Fragment methods\n    navigateFragment: fragments.goto.bind(fragments),\n    prevFragment: fragments.prev.bind(fragments),\n    nextFragment: fragments.next.bind(fragments),\n\n    // Event binding\n    on,\n    off,\n\n    // Legacy event binding methods left in for backwards compatibility\n    addEventListener: on,\n    removeEventListener: off,\n\n    // Forces an update in slide layout\n    layout,\n\n    // Randomizes the order of slides\n    shuffle,\n\n    // Returns an object with the available routes as booleans (left/right/top/bottom)\n    availableRoutes,\n\n    // Returns an object with the available fragments as booleans (prev/next)\n    availableFragments:\n      fragments.availableRoutes.bind(fragments),\n\n    // Toggles a help overlay with keyboard shortcuts\n    toggleHelp,\n\n    // Toggles the overview mode on/off\n    toggleOverview: overview.toggle.bind(overview),\n\n    // Toggles the \"black screen\" mode on/off\n    togglePause,\n\n    // Toggles the auto slide mode on/off\n    toggleAutoSlide,\n\n    // Slide navigation checks\n    isFirstSlide,\n    isLastSlide,\n    isLastVerticalSlide,\n    isVerticalSlide,\n\n    // State checks\n    isPaused,\n    isAutoSliding,\n    isSpeakerNotes:\n      notes.isSpeakerNotesWindow.bind(notes),\n    isOverview: overview.isActive.bind(overview),\n    isFocused: focus.isFocused.bind(focus),\n    isPrintingPDF: print.isPrintingPDF.bind(print),\n\n    // Checks if reveal.js has been loaded and is ready for use\n    isReady: () => ready,\n\n    // Slide preloading\n    loadSlide: slideContent.load.bind(slideContent),\n    unloadSlide:\n      slideContent.unload.bind(slideContent),\n\n    // Preview management\n    showPreview,\n    hidePreview: closeOverlay,\n\n    // Adds or removes all internal event listeners\n    addEventListeners,\n    removeEventListeners,\n    dispatchEvent,\n\n    // Facility for persisting and restoring the presentation state\n    getState,\n    setState,\n\n    // Presentation progress on range of 0-1\n    getProgress,\n\n    // Returns the indices of the current, or specified, slide\n    getIndices,\n\n    // Returns an Array of key:value maps of the attributes of each\n    // slide in the deck\n    getSlidesAttributes,\n\n    // Returns the number of slides that we have passed\n    getSlidePastCount,\n\n    // Returns the total number of slides\n    getTotalSlides,\n\n    // Returns the slide element at the specified index\n    getSlide,\n\n    // Returns the previous slide element, may be null\n    getPreviousSlide: () => previousSlide,\n\n    // Returns the current slide element\n    getCurrentSlide: () => currentSlide,\n\n    // Returns the slide background element at the specified index\n    getSlideBackground,\n\n    // Returns the speaker notes string for a slide, or null\n    getSlideNotes: notes.getSlideNotes.bind(notes),\n\n    // Returns an Array of all slides\n    getSlides,\n\n    // Returns an array with all horizontal/vertical slides in the deck\n    getHorizontalSlides,\n    getVerticalSlides,\n\n    // Checks if the presentation contains two or more horizontal\n    // and vertical slides\n    hasHorizontalSlides,\n    hasVerticalSlides,\n\n    // Checks if the deck has navigated on either axis at least once\n    hasNavigatedHorizontally: () =>\n      navigationHistory.hasNavigatedHorizontally,\n    hasNavigatedVertically: () =>\n      navigationHistory.hasNavigatedVertically,\n\n    // Adds/removes a custom key binding\n    addKeyBinding:\n      keyboard.addKeyBinding.bind(keyboard),\n    removeKeyBinding:\n      keyboard.removeKeyBinding.bind(keyboard),\n\n    // Programmatically triggers a keyboard event\n    triggerKey: keyboard.triggerKey.bind(keyboard),\n\n    // Registers a new shortcut to include in the help overlay\n    registerKeyboardShortcut:\n      keyboard.registerKeyboardShortcut.bind(keyboard),\n\n    getComputedSlideSize,\n\n    // Returns the current scale of the presentation content\n    getScale: () => scale,\n\n    // Returns the current configuration object\n    getConfig: () => config,\n\n    // Helper method, retrieves query string as a key:value map\n    getQueryHash: Util.getQueryHash,\n\n    // Returns reveal.js DOM elements\n    getRevealElement: () => revealElement,\n    getSlidesElement: () => dom.slides,\n    getViewportElement: () => dom.viewport,\n    getBackgroundsElement: () => backgrounds.element,\n\n    // API for registering and retrieving plugins\n    registerPlugin:\n      plugins.registerPlugin.bind(plugins),\n    hasPlugin: plugins.hasPlugin.bind(plugins),\n    getPlugin: plugins.getPlugin.bind(plugins),\n    getPlugins:\n      plugins.getRegisteredPlugins.bind(plugins),\n  }\n\n  // Our internal API which controllers have access to\n  Util.extend(Reveal, {\n    ...API,\n\n    // Methods for announcing content to screen readers\n    announceStatus,\n    getStatusText,\n\n    // Controllers\n    print,\n    focus,\n    progress,\n    controls,\n    location,\n    overview,\n    fragments,\n    slideContent,\n    slideNumber,\n\n    onUserInput,\n    closeOverlay,\n    updateSlidesVisibility,\n    layoutSlideContents,\n    transformSlides,\n    cueAutoSlide,\n    cancelAutoSlide,\n  })\n\n  return API\n}\n","import Deck, { VERSION } from \"./reveal.js\"\n\n/**\n * Expose the Reveal class to the window. To create a\n * new instance:\n * let deck = new Reveal( document.querySelector( '.reveal' ), {\n *   controls: false\n * } );\n * deck.initialize().then(() => {\n *   // reveal.js is ready\n * });\n */\nlet Reveal = Deck\n\n/**\n * The below is a thin shell that mimics the pre 4.0\n * reveal.js API and ensures backwards compatibility.\n * This API only allows for one Reveal instance per\n * page, whereas the new API above lets you run many\n * presentations on the same page.\n *\n * Reveal.initialize( { controls: false } ).then(() => {\n *   // reveal.js is ready\n * });\n */\n\nlet enqueuedAPICalls = []\n\nReveal.initialize = (options) => {\n  // Create our singleton reveal.js instance\n  Object.assign(\n    Reveal,\n    new Deck(\n      document.querySelector(\".reveal\"),\n      options\n    )\n  )\n\n  // Invoke any enqueued API calls\n  enqueuedAPICalls.map((method) => method(Reveal))\n\n  return Reveal.initialize()\n}\n\n/**\n * The pre 4.0 API let you add event listener before\n * initializing. We maintain the same behavior by\n * queuing up premature API calls and invoking all\n * of them when Reveal.initialize is called.\n */\n;[\n  \"configure\",\n  \"on\",\n  \"off\",\n  \"addEventListener\",\n  \"removeEventListener\",\n  \"registerPlugin\",\n].forEach((method) => {\n  Reveal[method] = (...args) => {\n    enqueuedAPICalls.push((deck) =>\n      deck[method].call(null, ...args)\n    )\n  }\n})\n\nReveal.isReady = () => false\n\nReveal.VERSION = VERSION\n\nexport default Reveal\n"],"names":["extend","a","b","i","queryAll","el","selector","Array","from","querySelectorAll","toggleClass","className","value","classList","add","remove","deserialize","match","parseFloat","transformElement","element","transform","style","matches","target","matchesMethod","matchesSelector","msMatchesSelector","call","closest","parentNode","createSingletonNode","container","tagname","classname","innerHTML","nodes","length","testNode","node","document","createElement","appendChild","createStyleSheet","tag","type","styleSheet","cssText","createTextNode","head","getQueryHash","query","location","search","replace","split","shift","pop","unescape","getRemainingHeight","height","newHeight","oldHeight","offsetHeight","removeProperty","fileExtensionToMimeMap","mp4","m4a","ogv","mpeg","webm","UA","navigator","userAgent","testElement","isMobile","test","platform","maxTouchPoints","isChrome","isAndroid","supportsZoom","Object","defineProperty","fitty_module","_extends","assign","arguments","source","key","prototype","hasOwnProperty","w","toArray","nl","slice","DrawState","fitties","redrawFrame","requestRedraw","cancelAnimationFrame","requestAnimationFrame","redraw","filter","f","dirty","active","redrawAll","forEach","styleComputed","computeStyle","shouldPreStyle","applyStyle","fittiesToRedraw","shouldRedraw","calculateStyles","markAsClean","dispatchFitEvent","availableWidth","clientWidth","currentWidth","scrollWidth","previousFontSize","currentFontSize","Math","min","max","minSize","maxSize","whiteSpace","multiLine","getComputedStyle","getPropertyValue","display","preStyle","preStyleTestCompleted","fontSize","dispatchEvent","CustomEvent","detail","oldValue","newValue","scaleFactor","fit","destroy","_","observeMutations","observer","disconnect","originalStyle","subscribe","unsubscribe","MutationObserver","observe","defaultOptions","subtree","childList","characterData","resizeDebounce","onWindowResized","clearTimeout","setTimeout","fitty","observeWindowDelay","events","set","enabled","method","e","observeWindow","fitAll","fittyCreate","elements","options","fittyOptions","publicFitties","map","newbie","push","init","unfreeze","freeze","undefined","window","SlideContent","constructor","Reveal","startEmbeddedIframe","this","bind","shouldPreload","preload","getConfig","preloadIframes","hasAttribute","load","slide","tagName","setAttribute","getAttribute","removeAttribute","media","sources","background","slideBackgroundElement","backgroundContent","slideBackgroundContentElement","backgroundIframe","backgroundImage","backgroundVideo","backgroundVideoLoop","backgroundVideoMuted","trim","encodeURI","join","isSpeakerNotes","video","muted","filename","getMimeTypeFromFile","excludeIframes","iframe","width","maxHeight","maxWidth","backgroundIframeElement","querySelector","layout","unload","getSlideBackground","formatEmbeddedContent","_appendParamToIframeSource","sourceAttribute","sourceURL","param","getSlidesElement","src","indexOf","startEmbeddedContent","autoplay","autoPlayMedia","play","readyState","startEmbeddedMedia","promise","catch","controls","addEventListener","removeEventListener","event","isAttachedToDOM","isVisible","currentTime","contentWindow","postMessage","stopEmbeddedContent","unloadIframes","pause","SlideNumber","render","getRevealElement","configure","config","oldConfig","slideNumberDisplay","slideNumber","isPrintingPDF","showSlideNumber","update","getSlideNumber","getCurrentSlide","format","getHorizontalSlides","horizontalOffset","dataset","visibility","getSlidePastCount","getTotalSlides","indices","getIndices","h","sep","isVerticalSlide","v","url","getHash","formatNumber","delimiter","isNaN","colorToRgb","color","hex3","r","parseInt","charAt","g","hex6","substr","rgb","rgba","Backgrounds","create","slideh","backgroundStack","createBackground","slidev","parallaxBackgroundImage","backgroundSize","parallaxBackgroundSize","backgroundRepeat","parallaxBackgroundRepeat","backgroundPosition","parallaxBackgroundPosition","contentElement","sync","data","backgroundColor","backgroundTransition","backgroundOpacity","dataPreload","opacity","contrastColor","computedBackgroundStyle","includeAll","currentSlide","currentBackground","horizontalPast","rtl","horizontalFuture","childNodes","backgroundh","backgroundv","previousBackground","slideContent","currentBackgroundContent","backgroundImageURL","previousBackgroundHash","currentBackgroundHash","classToBubble","contains","updateParallax","backgroundWidth","backgroundHeight","horizontalSlides","verticalSlides","getVerticalSlides","horizontalOffsetMultiplier","slideWidth","offsetWidth","horizontalSlideCount","parallaxBackgroundHorizontal","verticalOffsetMultiplier","verticalOffset","slideHeight","verticalSlideCount","parallaxBackgroundVertical","POST_MESSAGE_METHOD_BLACKLIST","FRAGMENT_STYLE_REGEX","autoAnimateCounter","AutoAnimate","run","fromSlide","toSlide","reset","allSlides","getSlides","toSlideIndex","fromSlideIndex","autoAnimateStyleSheet","animationOptions","getAutoAnimateOptions","autoAnimate","slideDirection","css","getAutoAnimatableElements","autoAnimateElements","to","autoAnimateUnmatched","defaultUnmatchedDuration","duration","defaultUnmatchedDelay","getUnmatchedAutoAnimateElements","unmatchedElement","unmatchedOptions","id","delay","autoAnimateTarget","fontWeight","sheet","removeChild","elementOptions","easing","fromProps","getAutoAnimatableProperties","toProps","styles","translate","scale","presentationScale","getScale","delta","x","y","scaleX","scaleY","round","propertyName","toValue","fromValue","explicitValue","toStyleProperties","keys","inheritedOptions","autoAnimateEasing","autoAnimateDuration","autoAnimatedParent","autoAnimateDelay","direction","properties","bounds","measure","center","getBoundingClientRect","offsetLeft","offsetTop","computedStyles","autoAnimateStyles","property","pairs","autoAnimateMatcher","getAutoAnimatePairs","reserved","pair","index","textNodes","findAutoAnimateMatches","nodeName","innerText","textContent","getLocalBoundingBox","fromScope","toScope","serializer","fromMatches","toMatches","fromElement","pimaryIndex","secondaryIndex","rootElement","children","reduce","result","containsAnimatedElements","concat","Fragments","fragments","disable","enable","availableRoutes","hiddenFragments","prev","next","sort","grouped","ordered","unordered","sorted","fragment","group","sortAll","horizontalSlide","verticalSlide","changedFragments","shown","hidden","maxIndex","currentFragment","wasVisible","announceStatus","getStatusText","bubbles","goto","offset","lastVisibleFragment","progress","fragmentInURL","writeURL","Overview","onSlideClicked","activate","overview","isActive","cancelAutoSlide","getBackgroundsElement","margin","slideSize","getComputedSlideSize","overviewSlideWidth","overviewSlideHeight","updateSlidesVisibility","indexh","indexv","hslide","vslide","hbackground","vbackground","vmin","innerWidth","innerHeight","transformSlides","deactivate","cueAutoSlide","toggle","override","preventDefault","Keyboard","shortcuts","bindings","onDocumentKeyDown","onDocumentKeyPress","navigationMode","unbind","addKeyBinding","binding","callback","keyCode","description","removeKeyBinding","triggerKey","registerKeyboardShortcut","getShortcuts","getBindings","shiftKey","charCode","toggleHelp","keyboardCondition","isFocused","autoSlideWasPaused","isAutoSliding","onUserInput","activeElementIsCE","activeElement","isContentEditable","activeElementIsInput","activeElementIsNotes","unusedModifier","altKey","ctrlKey","metaKey","resumeKeyCodes","keyboard","isPaused","useLinearMode","hasHorizontalSlides","hasVerticalSlides","triggered","apply","action","skipFragments","left","right","up","Number","MAX_VALUE","down","togglePause","requestMethod","documentElement","requestFullscreen","webkitRequestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","enterFullscreen","embedded","getViewportElement","autoSlideStoppable","toggleAutoSlide","closeOverlay","Location","writeURLTimeout","onWindowHashChange","getIndicesFromHash","hash","name","bits","hashIndexBase","hashOneBasedIndex","getElementById","decodeURIComponent","error","readURL","currentIndices","newIndices","history","replaceState","pathname","s","encodeURIComponent","Controls","onNavigateLeftClicked","onNavigateRightClicked","onNavigateUpClicked","onNavigateDownClicked","onNavigatePrevClicked","onNavigateNextClicked","revealElement","controlsLeft","controlsRight","controlsUp","controlsDown","controlsPrev","controlsNext","controlsRightArrow","controlsLeftArrow","controlsDownArrow","controlsLayout","controlsBackArrows","pointerEvents","eventName","routes","fragmentsRoutes","controlsTutorial","hasNavigatedVertically","hasNavigatedHorizontally","Progress","onProgressClicked","bar","getProgress","getMaxWidth","slides","slidesTotal","slideIndex","floor","clientX","targetIndices","Pointer","lastMouseWheelStep","cursorHidden","cursorInactiveTimeout","onDocumentCursorActive","onDocumentMouseScroll","mouseWheel","hideInactiveCursor","showCursor","cursor","hideCursor","hideCursorTime","Date","now","wheelDelta","loadScript","script","async","defer","onload","onreadystatechange","onerror","err","Error","insertBefore","lastChild","Plugins","reveal","state","registeredPlugins","asyncDependencies","plugins","dependencies","registerPlugin","Promise","resolve","scripts","scriptsToLoad","condition","scriptLoadedCallback","initPlugins","then","console","warn","pluginValues","values","pluginsToInitialize","loadAsync","initNextPlugin","afterPlugInitialized","plugin","hasPlugin","getPlugin","getRegisteredPlugins","Print","doingSlideNumbers","pageWidth","pageHeight","body","viewportElement","presentationBackground","viewportStyles","layoutSlideContents","slideScrollHeights","scrollHeight","pages","pageContainer","top","contentHeight","numberOfPages","ceil","pdfMaxPagesPerSlide","page","pdfPageHeightOffset","showNotes","notes","getSlideNotes","notesSpacing","notesLayout","notesElement","bottom","numberElement","pdfSeparateFragments","fragmentGroups","previousFragmentStep","clonedPage","cloneNode","Touch","touchStartX","touchStartY","touchStartCount","touchCaptured","onPointerDown","onPointerMove","onPointerUp","onTouchStart","onTouchMove","onTouchEnd","msPointerEnabled","isSwipePrevented","touches","clientY","currentX","currentY","includeFragments","deltaX","deltaY","abs","pointerType","MSPOINTER_TYPE_TOUCH","Focus","onRevealPointerDown","onDocumentPointerDown","blur","focus","Notes","print","updateVisibility","hasNotes","isSpeakerNotesWindow","Playback","progressCheck","diameter","diameter2","thickness","playing","progressOffset","canvas","context","getContext","setPlaying","wasPlaying","animate","progressBefore","radius","iconSize","endAngle","PI","startAngle","save","clearRect","beginPath","arc","fillStyle","fill","lineWidth","strokeStyle","stroke","fillRect","moveTo","lineTo","restore","on","listener","off","minScale","maxScale","respondToHashChanges","disableLayout","touch","loop","shuffle","help","showHiddenSlides","autoSlide","autoSlideMethod","defaultTiming","previewLinks","postMessageEvents","focusBodyOnPageVisibilityChange","transition","transitionSpeed","POSITIVE_INFINITY","viewDistance","mobileViewDistance","previousSlide","autoSlidePlayer","ready","navigationHistory","slidesTransform","dom","autoSlideTimeout","autoSlideStartTime","autoSlidePaused","backgrounds","pointer","initialize","initOptions","wrapper","defaultConfig","Util","setViewport","start","viewport","removeHiddenSlides","setupDOM","setupPostMessage","setupScrollPrevention","setupFullscreen","resetVerticalSlides","removeEventListeners","setupPDF","Device","pauseOverlay","statusElement","createStatusElement","position","overflow","clip","text","nodeType","isAriaHidden","isDisplayHidden","child","setInterval","scrollTop","scrollLeft","onFullscreenChange","JSON","parse","args","dispatchPostMessage","isReady","numberOfSlides","setProperty","resume","enablePreviewLinks","disablePreviewLinks","onAutoSlidePlayerClick","addEventListeners","onWindowResize","onSlidesClicked","onTransitionEnd","onPageVisibilityChange","useCapture","transforms","createEvent","initEvent","parent","self","message","namespace","getState","stringify","onPreviewLinkClicked","showPreview","overlay","showHelp","html","size","oldScale","presentationWidth","presentationHeight","zoom","devicePixelRatio","len","remainingHeight","nw","naturalWidth","videoWidth","nh","naturalHeight","videoHeight","es","setPreviousVerticalIndex","stack","getPreviousVerticalIndex","attributeName","isLastVerticalSlide","nextElementSibling","isFirstSlide","isLastSlide","wasPaused","resumeAutoSlide","pauseAutoSlide","origin","defaultPrevented","stateBefore","indexhBefore","indexvBefore","updateSlides","slideChanged","currentHorizontalSlide","currentVerticalSlides","autoAnimateTransition","getVerticalStacks","stateLoop","j","splice","syncSlide","beforeSlide","random","slidesLength","printMode","reverse","wasPresent","slideState","distanceX","distanceY","horizontalSlidesLength","verticalSlidesLength","oy","fragmentRoutes","pastCount","mainLoop","totalCount","allFragments","fragmentWeight","isVertical","SLIDES_SELECTOR","HORIZONTAL_SLIDES_SELECTOR","getSlidesAttributes","attributes","attribute","getSlide","indexf","paused","setState","pausedFlag","overviewFlag","fragmentAutoSlide","parentAutoSlide","slideAutoSlide","playbackRate","navigateNext","navigateLeft","navigateRight","navigateUp","navigateDown","navigatePrev","anchor","fullscreenElement","webkitFullscreenElement","stopImmediatePropagation","currentTarget","API","VERSION","syncFragments","navigateFragment","prevFragment","nextFragment","availableFragments","toggleOverview","isOverview","loadSlide","unloadSlide","hidePreview","getPreviousSlide","getPlugins","Deck","enqueuedAPICalls","deck"],"mappings":"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"}